<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows设置操作URI指令</title>
    <link href="/blog/2024/03/Windows%E8%AE%BE%E7%BD%AE%E6%93%8D%E4%BD%9CURI%E6%8C%87%E4%BB%A4.html"/>
    <url>/blog/2024/03/Windows%E8%AE%BE%E7%BD%AE%E6%93%8D%E4%BD%9CURI%E6%8C%87%E4%BB%A4.html</url>
    
    <content type="html"><![CDATA[<h2 id="ms-settings-URI-方案参考"><a href="#ms-settings-URI-方案参考" class="headerlink" title="ms-settings: URI 方案参考"></a>ms-settings: URI 方案参考</h2><p>以下部分描述了用于打开“设置”应用的不同页面的各类 ms-settings URI：</p><ul><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#accounts">帐户</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#apps">应用</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#control-center">控制中心</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#cortana">Cortana</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#devices">设备</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#ease-of-access">轻松访问</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#extras">附加信息</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#family-group">家庭组</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#gaming">游戏</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#mixed-reality">混合现实</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#network-and-internet">网络和 Internet</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#personalization">个性化设置</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#phone">电话</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#privacy">隐私</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#search">搜索</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#surface-hub">Surface Hub</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#system">系统</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#time-and-language">时间和语言</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#update-and-security">更新和安全</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app#user-accounts">用户帐户</a></li></ul><h3 id="帐户"><a href="#帐户" class="headerlink" title="帐户"></a>帐户</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">访问工作单位或学校</td><td align="left">ms-settings:workplace</td></tr><tr><td align="left">电子邮件和应用帐户</td><td align="left">ms-settings:emailandaccounts</td></tr><tr><td align="left">家人和其他人</td><td align="left">ms-settings:otherusers</td></tr><tr><td align="left">设置展台</td><td align="left">ms-settings:assignedaccess</td></tr><tr><td align="left">登录选项</td><td align="left">ms-settings:signinoptions ms-settings:signinoptions-dynamiclock</td></tr><tr><td align="left">同步你的设置</td><td align="left">ms-settings:sync ms-settings:backup（已在 Windows 11 中弃用的备份页）</td></tr><tr><td align="left">Windows Hello 设置</td><td align="left">ms-settings:signinoptions-launchfaceenrollment ms-settings:signinoptions-launchfingerprintenrollment</td></tr><tr><td align="left">你的信息</td><td align="left">ms-settings:yourinfo</td></tr></tbody></table><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">应用和功能</td><td align="left">ms-settings:appsfeatures</td></tr><tr><td align="left">应用功能</td><td align="left">ms-settings:appsfeatures-app（应用的重置、管理加载项和可下载内容等）  若要使用 URI 访问此页面，请使用 ms-settings:appsfeatures-app URI 并传递应用的“包系列名称”的可选参数。</td></tr><tr><td align="left">网站应用</td><td align="left">ms-settings:appsforwebsites</td></tr><tr><td align="left">默认应用</td><td align="left">ms-settings:defaultapps（<strong>在 Windows 11 版本 21H2（具有 2023-04 累积更新）或 22H2（具有 2023-04 累积更新）或更高版本中引入的行为。</strong>） 使用应用的 URI 转义名称以下列格式追加查询字符串参数，以直接启动该应用的默认设置页：  - registeredAppMachine&#x3D;&lt;应用的 URI 转义的每台计算机安装名&gt; - registeredAppUser&#x3D;&lt;应用的 URI 转义的每个用户安装名&gt; - registeredAUMID&#x3D;&lt;URI 转义的应用程序用户模型 ID&gt;  有关详细信息，请参阅<a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-default-apps-settings">启动默认应用设置页</a>。</td></tr><tr><td align="left">默认浏览器设置</td><td align="left">ms-settings:defaultbrowsersettings（<strong>在 Windows 11 中弃用</strong>）</td></tr><tr><td align="left">管理可选功能</td><td align="left">ms-settings:optionalfeatures</td></tr><tr><td align="left">脱机地图</td><td align="left">ms-settings:maps ms-settings:maps-downloadmaps（下载地图）</td></tr><tr><td align="left">启动应用</td><td align="left">ms-settings:startupapps</td></tr><tr><td align="left">视频播放</td><td align="left">ms-settings:videoplayback</td></tr></tbody></table><h3 id="控制中心"><a href="#控制中心" class="headerlink" title="控制中心"></a>控制中心</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">控制中心</td><td align="left">ms-settings:controlcenter</td></tr></tbody></table><h3 id="Cortana"><a href="#Cortana" class="headerlink" title="Cortana"></a>Cortana</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">跨越我的设备使用 Cortana</td><td align="left">ms-settings:cortana-notifications</td></tr><tr><td align="left">更多详细信息</td><td align="left">ms-settings:cortana-moredetails</td></tr><tr><td align="left">权限和历史记录</td><td align="left">ms-settings:cortana-permissions</td></tr><tr><td align="left">搜索 Windows</td><td align="left">ms-settings:cortana-windowssearch</td></tr><tr><td align="left">与 Cortana 交谈</td><td align="left">ms-settings:cortana-language ms-settings:cortana ms-settings:cortana-talktocortana</td></tr></tbody></table><p> 备注</p><p>将电脑设置为 Cortana 当前不可用或 Cortana 已禁用的区域时，桌面上的此“设置”部分称为“搜索”。 在这种情况下，不会列出特定于 Cortana 的页面（“跨设备的 Cortana”和“与 Cortana 交谈”）。</p><h3 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">自动播放</td><td align="left">ms-settings:autoplay</td></tr><tr><td align="left">Bluetooth</td><td align="left">ms-settings:bluetooth</td></tr><tr><td align="left">连接的设备数</td><td align="left">ms-settings:connecteddevices</td></tr><tr><td align="left">默认相机</td><td align="left">ms-settings:camera（已在 Windows 10 版本 1809 及更高版本中弃用的行为）</td></tr><tr><td align="left">相机设置</td><td align="left">ms-settings:camera（已在 Windows 11 版本 22000 及更高版本中引入的行为）将查询字符串参数 <code>cameraId</code> 集追加到相机设备的 URI 转义符号链接名称，以直接启动该相机的设置。 有关详细信息，请参阅<a href="https://learn.microsoft.com/zh-cn/windows/uwp/audio-video-camera/launch-camera-settings">启动相机设置页</a>。</td></tr><tr><td align="left">鼠标和触摸板</td><td align="left">ms-settings:mousetouchpad（仅在具有触控板的设备上可用的触控板设置）</td></tr><tr><td align="left">触控笔和 Windows Ink</td><td align="left">ms-settings:pen</td></tr><tr><td align="left">打印机和扫描仪</td><td align="left">ms-settings:printers</td></tr><tr><td align="left">触控</td><td align="left">ms-settings:devices-touch</td></tr><tr><td align="left">触摸板</td><td align="left">ms-settings:devices-touchpad（仅当存在触控板硬件时才可用）</td></tr><tr><td align="left">文本建议</td><td align="left">ms-settings:devicestyping-hwkbtextsuggestions</td></tr><tr><td align="left">Typing</td><td align="left">ms-settings:typing</td></tr><tr><td align="left">USB</td><td align="left">ms-settings:usb</td></tr><tr><td align="left">滚轮</td><td align="left">ms-settings:wheel（仅当拨号配对时可用）</td></tr><tr><td align="left">你的手机</td><td align="left">ms-settings:mobile-devices</td></tr></tbody></table><h3 id="轻松访问"><a href="#轻松访问" class="headerlink" title="轻松访问"></a>轻松访问</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">音频</td><td align="left">ms-settings:easeofaccess-audio</td></tr><tr><td align="left">隐藏式字幕</td><td align="left">ms-settings:easeofaccess-closedcaptioning</td></tr><tr><td align="left">颜色筛选器</td><td align="left">ms-settings:easeofaccess-colorfilter ms-settings:easeofaccess-colorfilter-adaptivecolorlink ms-settings:easeofaccess-colorfilter-bluelightlink</td></tr><tr><td align="left">显示</td><td align="left">ms-settings:easeofaccess-display</td></tr><tr><td align="left">眼球控制</td><td align="left">ms-settings:easeofaccess-eyecontrol</td></tr><tr><td align="left">字体</td><td align="left">ms-settings:fonts</td></tr><tr><td align="left">高对比度</td><td align="left">ms-settings:easeofaccess-highcontrast</td></tr><tr><td align="left">键盘</td><td align="left">ms-settings:easeofaccess-keyboard</td></tr><tr><td align="left">放大镜</td><td align="left">ms-settings:easeofaccess-magnifier</td></tr><tr><td align="left">鼠标</td><td align="left">ms-settings:easeofaccess-mouse</td></tr><tr><td align="left">鼠标指针和触控</td><td align="left">ms-settings:easeofaccess-mousepointer</td></tr><tr><td align="left">讲述人</td><td align="left">ms-settings:easeofaccess-narrator ms-settings:easeofaccess-narrator-isautostartenabled</td></tr><tr><td align="left">语音</td><td align="left">ms-settings:easeofaccess-speechrecognition</td></tr><tr><td align="left">文本光标</td><td align="left">ms-settings:easeofaccess-cursor</td></tr><tr><td align="left">视觉效果</td><td align="left">ms-settings:easeofaccess-visualeffects</td></tr></tbody></table><h3 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">附加信息</td><td align="left">ms-settings:extras（仅在通过某种方式（例如第三方）安装了“设置应用”后可用）</td></tr></tbody></table><h3 id="家庭组"><a href="#家庭组" class="headerlink" title="家庭组"></a>家庭组</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">家庭组</td><td align="left">ms-settings:family-group</td></tr></tbody></table><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">游戏栏</td><td align="left">ms-settings:gaming-gamebar</td></tr><tr><td align="left">游戏 DVR</td><td align="left">ms-settings:gaming-gamedvr</td></tr><tr><td align="left">游戏模式</td><td align="left">ms-settings:gaming-gamemode</td></tr><tr><td align="left">全屏玩游戏</td><td align="left">ms-settings:quietmomentsgame</td></tr><tr><td align="left">TruePlay</td><td align="left">ms-settings:gaming-trueplay（从 Windows 10 版本 1809（10.0，内部版本 17763）起，Windows 中会删除此功能）</td></tr></tbody></table><h3 id="混合现实"><a href="#混合现实" class="headerlink" title="混合现实"></a>混合现实</h3><p>只有在已安装混合现实门户应用的情况下，这些设置才可用。</p><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">音频和语音</td><td align="left">ms-settings:holographic-audio</td></tr><tr><td align="left">环境</td><td align="left">ms-settings:privacy-holographic-environment</td></tr><tr><td align="left">头戴显示设备显示</td><td align="left">ms-settings:holographic-headset</td></tr><tr><td align="left">卸载</td><td align="left">ms-settings:holographic-management</td></tr><tr><td align="left">启动和桌面</td><td align="left">ms-settings:holographic-startupandesktop</td></tr></tbody></table><h3 id="网络和-Internet"><a href="#网络和-Internet" class="headerlink" title="网络和 Internet"></a>网络和 Internet</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">网络和 Internet</td><td align="left">ms-settings:network-status</td></tr><tr><td align="left">高级设置</td><td align="left">ms-settings:network-advancedsettings</td></tr><tr><td align="left">飞行模式</td><td align="left">ms-settings:network-airplanemode ms-settings:proximity</td></tr><tr><td align="left">手机网络和 SIM 卡</td><td align="left">ms-settings:network-cellular</td></tr><tr><td align="left">拨号</td><td align="left">ms-settings:network-dialup</td></tr><tr><td align="left">DirectAccess</td><td align="left">ms-settings:network-directaccess（仅在启用 DirectAccess 时才可用）</td></tr><tr><td align="left">以太网</td><td align="left">ms-settings:network-ethernet</td></tr><tr><td align="left">管理已知网络</td><td align="left">ms-settings:network-wifisettings</td></tr><tr><td align="left">移动热点</td><td align="left">ms-settings:network-mobilehotspot</td></tr><tr><td align="left">代理</td><td align="left">ms-settings:network-proxy</td></tr><tr><td align="left">VPN</td><td align="left">ms-settings:network-vpn</td></tr><tr><td align="left">WLAN</td><td align="left">ms-settings:network-wifi（仅当设备具有 wifi 适配器时才可用）</td></tr><tr><td align="left">Wi-Fi 预配</td><td align="left">ms-settings:wifi-provisioning</td></tr></tbody></table><h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">背景</td><td align="left">ms-settings:personalization-background</td></tr><tr><td align="left">选择哪些文件夹显示于“开始”屏幕</td><td align="left">ms-settings:personalization-start-places</td></tr><tr><td align="left">颜色</td><td align="left">ms-settings:personalization-colors ms-settings:colors</td></tr><tr><td align="left">概览</td><td align="left">ms-settings:personalization-glance（已在 Windows 10 版本 1809 及更高版本中弃用）</td></tr><tr><td align="left">锁屏界面</td><td align="left">ms-settings:lockscreen</td></tr><tr><td align="left">导航栏</td><td align="left">ms-settings:personalization-navbar（已在 Windows 10 版本 1809 及更高版本中弃用）</td></tr><tr><td align="left">个性化（类别）</td><td align="left">ms-settings:personalization</td></tr><tr><td align="left">开始</td><td align="left">ms-settings:personalization-start</td></tr><tr><td align="left">任务栏</td><td align="left">ms-settings:taskbar</td></tr><tr><td align="left">触摸键盘</td><td align="left">ms-settings:personalization-touchkeyboard</td></tr><tr><td align="left">主题</td><td align="left">ms-settings:themes</td></tr></tbody></table><h3 id="电话"><a href="#电话" class="headerlink" title="电话"></a>电话</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">你的手机</td><td align="left">ms-settings:mobile-devices ms-settings:mobile-devices-addphone ms-settings:mobile-devices-addphone-direct（打开“你的手机”应用）</td></tr><tr><td align="left">设备使用情况</td><td align="left">ms-settings:deviceusage</td></tr></tbody></table><h3 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">附件应用</td><td align="left">ms-settings:privacy-accessoryapps（已在 Windows 10 版本 1809 及更高版本中弃用）</td></tr><tr><td align="left">帐户信息</td><td align="left">ms-settings:privacy-accountinfo</td></tr><tr><td align="left">活动历史记录</td><td align="left">ms-settings:privacy-activityhistory</td></tr><tr><td align="left">广告 ID</td><td align="left">ms-settings:privacy-advertisingid（已在 Windows 10 版本 1809 及更高版本中弃用）</td></tr><tr><td align="left">应用诊断</td><td align="left">ms-settings:privacy-appdiagnostics</td></tr><tr><td align="left">自动文件下载</td><td align="left">ms-settings:privacy-automaticfiledownloads</td></tr><tr><td align="left">后台应用</td><td align="left">ms-settings:privacy-backgroundapps（已在 Windows 11 21H2 及更高版本中弃用）  <strong>注意：</strong>在 Windows 11 中，后台应用权限是单独访问的。 若要查看权限，请转到“应用”-&gt;“已安装的应用”，然后在新式应用中选择“…”，然后选择“高级选项”。 新式应用会显示高级页面，除非设置了组策略或设置了用户的全局切换值（Windows 10 中已弃用的设置），否则将显示“后台应用权限”部分。 若要使用 URI 访问此页面，请使用 <code>ms-settings:appsfeatures-app</code> URI 并传递应用的包系列名称的可选参数。</td></tr><tr><td align="left">后台空间感知</td><td align="left">ms-settings:privacy-backgroundspatialperception</td></tr><tr><td align="left">日历</td><td align="left">ms-settings:privacy-calendar</td></tr><tr><td align="left">联络历史记录</td><td align="left">ms-settings:privacy-callhistory</td></tr><tr><td align="left">Camera</td><td align="left">ms-settings:privacy-webcam</td></tr><tr><td align="left">联系人</td><td align="left">ms-settings:privacy-contacts</td></tr><tr><td align="left">文档</td><td align="left">ms-settings:privacy-documents</td></tr><tr><td align="left">“下载”文件夹</td><td align="left">ms-settings:privacy-downloadsfolder</td></tr><tr><td align="left">电子邮件</td><td align="left">ms-settings:privacy-email</td></tr><tr><td align="left">眼动追踪仪</td><td align="left">ms-settings:privacy-eyetracker（需要眼动跟踪器硬件）</td></tr><tr><td align="left">反馈和诊断</td><td align="left">ms-settings:privacy-feedback</td></tr><tr><td align="left">文件系统</td><td align="left">ms-settings:privacy-broadfilesystemaccess</td></tr><tr><td align="left">常规</td><td align="left">ms-settings:privacy 或 ms-settings:privacy-general</td></tr><tr><td align="left">图形</td><td align="left">ms-settings:privacy-graphicscaptureprogrammatic ms-settings:privacy-graphicscapturewithoutborder</td></tr><tr><td align="left">墨迹书写和键入</td><td align="left">ms-settings:privacy-speechtyping</td></tr><tr><td align="left">位置</td><td align="left">ms-settings:privacy-location</td></tr><tr><td align="left">Messaging</td><td align="left">ms-settings:privacy-messaging</td></tr><tr><td align="left">Microphone</td><td align="left">ms-settings:privacy-microphone</td></tr><tr><td align="left">动态效果</td><td align="left">ms-settings:privacy-motion</td></tr><tr><td align="left">音乐库</td><td align="left">ms-settings:privacy-musiclibrary</td></tr><tr><td align="left">通知</td><td align="left">ms-settings:privacy-notifications</td></tr><tr><td align="left">其他设备</td><td align="left">ms-settings:privacy-customdevices</td></tr><tr><td align="left">电话联络</td><td align="left">ms-settings:privacy-phonecalls</td></tr><tr><td align="left">图片</td><td align="left">ms-settings:privacy-pictures</td></tr><tr><td align="left">无线电收发器</td><td align="left">ms-settings:privacy-radios</td></tr><tr><td align="left">语音</td><td align="left">ms-settings:privacy-speech</td></tr><tr><td align="left">任务</td><td align="left">ms-settings:privacy-tasks</td></tr><tr><td align="left">视频</td><td align="left">ms-settings:privacy-videos</td></tr><tr><td align="left">语音激活</td><td align="left">ms-settings:privacy-voiceactivation</td></tr></tbody></table><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">搜索</td><td align="left">ms-settings:search</td></tr><tr><td align="left">搜索更多详细信息</td><td align="left">ms-settings:search-moredetails</td></tr><tr><td align="left">搜索权限</td><td align="left">ms-settings:search-permissions</td></tr></tbody></table><h3 id="Surface-Hub"><a href="#Surface-Hub" class="headerlink" title="Surface Hub"></a>Surface Hub</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">帐户</td><td align="left">ms-settings:surfacehub-accounts</td></tr><tr><td align="left">会话清理</td><td align="left">ms-settings:surfacehub-sessioncleanup</td></tr><tr><td align="left">团队会议</td><td align="left">ms-settings:surfacehub-calling</td></tr><tr><td align="left">设备管理团队</td><td align="left">ms-settings:surfacehub-devicemanagenent</td></tr><tr><td align="left">欢迎屏幕</td><td align="left">ms-settings:surfacehub-welcome</td></tr></tbody></table><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">关于</td><td align="left">ms-settings:about</td></tr><tr><td align="left">高级显示设置</td><td align="left">ms-settings:display-advanced（仅支持高级显示选项的设备可用）</td></tr><tr><td align="left">应用音量和设备首选项</td><td align="left">ms-settings:apps-volume（已在 Windows 10 版本 1903 中添加）</td></tr><tr><td align="left">节电模式</td><td align="left">ms-settings:batterysaver（仅具有电池的设备可用，例如平板电脑）</td></tr><tr><td align="left">节电模式设置</td><td align="left">ms-settings:batterysaver-settings（仅具有电池的设备可用，例如平板电脑）</td></tr><tr><td align="left">电池使用</td><td align="left">ms-settings:batterysaver-usagedetails（仅具有电池的设备可用，例如平板电脑）</td></tr><tr><td align="left">剪贴板</td><td align="left">ms-settings:clipboard</td></tr><tr><td align="left">显示</td><td align="left">ms-settings:display</td></tr><tr><td align="left">默认保存位置</td><td align="left">ms-settings:savelocations</td></tr><tr><td align="left">显示</td><td align="left">ms-settings:screenrotation</td></tr><tr><td align="left">复制我的显示器</td><td align="left">ms-settings:quietmomentspresentation</td></tr><tr><td align="left">在这些小时内</td><td align="left">ms-settings:quietmomentsscheduled</td></tr><tr><td align="left">加密</td><td align="left">ms-settings:deviceencryption</td></tr><tr><td align="left">能源推荐</td><td align="left">ms-settings:energyrecommendations（已在适用于 Windows 11 版本 22H2 内部版本 22624 的 2 月 Moment 更新中添加）</td></tr><tr><td align="left">专注助手</td><td align="left">ms-settings:quiethours</td></tr><tr><td align="left">图形设置</td><td align="left">ms-settings:display-advancedgraphics（仅支持高级图形选项的设备可用）</td></tr><tr><td align="left">图形默认设置</td><td align="left">ms-settings:display-advancedgraphics-default</td></tr><tr><td align="left">多任务</td><td align="left">ms-settings:multitasking ms-settings:multitasking-sgupdate</td></tr><tr><td align="left">夜灯设置</td><td align="left">ms-settings:nightlight</td></tr><tr><td align="left">投影到此电脑</td><td align="left">ms-settings:project</td></tr><tr><td align="left">共享体验</td><td align="left">ms-settings:crossdevice</td></tr><tr><td align="left">平板模式</td><td align="left">ms-settings:tabletmode（已在 Windows 11 中删除）</td></tr><tr><td align="left">任务栏</td><td align="left">ms-settings:taskbar</td></tr><tr><td align="left">通知和操作</td><td align="left">ms-settings:notifications</td></tr><tr><td align="left">远程桌面</td><td align="left">ms-settings:remotedesktop</td></tr><tr><td align="left">电话</td><td align="left">ms-settings:phone（已在 Windows 10 版本 1809 及更高版本中弃用）</td></tr><tr><td align="left">电源和睡眠</td><td align="left">ms-settings:powersleep</td></tr><tr><td align="left">存在感测</td><td align="left">ms-settings:presence（已在适用于 Windows 11 版本 22H2 内部版本 22624 的 5 月 Moment 更新中添加）</td></tr><tr><td align="left">声音</td><td align="left">ms-settings:sound</td></tr><tr><td align="left">声音设备</td><td align="left">ms-settings:sound-devices</td></tr><tr><td align="left">存储</td><td align="left">ms-settings:storagesense</td></tr><tr><td align="left">存储感知</td><td align="left">ms-settings:storagepolicies</td></tr><tr><td align="left">有关存储的建议</td><td align="left">ms-settings:storagerecommendations</td></tr><tr><td align="left">磁盘和卷</td><td align="left">ms-settings:disksandvolumes</td></tr></tbody></table><h3 id="时间和语言"><a href="#时间和语言" class="headerlink" title="时间和语言"></a>时间和语言</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">日期和时间</td><td align="left">ms-settings:dateandtime</td></tr><tr><td align="left">日本 IME 设置</td><td align="left">ms-settings:regionlanguage-jpnime（安装了 Microsoft Japan 输入法编辑器则可用）</td></tr><tr><td align="left">区域</td><td align="left">ms-settings:regionformatting</td></tr><tr><td align="left">语言</td><td align="left">ms-settings:keyboard ms-settings:keyboard-advanced ms-settings:regionlanguage ms-settings:regionlanguage-bpmfime ms-settings:regionlanguage-cangjieime ms-settings:regionlanguage-chsime-wubi-udp ms-settings:regionlanguage-quickime ms-settings:regionlanguage-korime</td></tr><tr><td align="left">拼音 IME 设置</td><td align="left">ms-settings:regionlanguage-chsime-pinyin（在安装了 Microsoft 拼音输入法编辑器的情况下可用） ms-settings:regionlanguage-chsime-pinyin-domainlexicon ms-settings:regionlanguage-chsime-pinyin-keyconfig ms-settings:regionlanguage-chsime-pinyin-udp</td></tr><tr><td align="left">语音</td><td align="left">ms-settings:speech</td></tr><tr><td align="left">五笔 IME 设置</td><td align="left">ms-settings:regionlanguage-chsime-wubi（安装了 Microsoft 五笔输入法编辑器则可用）</td></tr><tr><td align="left">添加显示语言</td><td align="left">ms-settings:regionlanguage-adddisplaylanguage</td></tr><tr><td align="left">语言选项</td><td align="left">ms-settings:regionlanguage-languageoptions</td></tr><tr><td align="left">设置显示语言</td><td align="left">ms-settings:regionlanguage-setdisplaylanguage</td></tr></tbody></table><h3 id="更新和安全"><a href="#更新和安全" class="headerlink" title="更新和安全"></a>更新和安全</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">激活</td><td align="left">ms-settings:activation</td></tr><tr><td align="left">备份</td><td align="left">ms-settings:backup（已在 Windows 11 中删除的页；打开同步）</td></tr><tr><td align="left">传递优化</td><td align="left">ms-settings:delivery-optimization ms-settings:delivery-optimization-activity ms-settings:delivery-optimization-advanced</td></tr><tr><td align="left">查找我的设备</td><td align="left">ms-settings:findmydevice</td></tr><tr><td align="left">面向开发人员</td><td align="left">ms-settings:developers</td></tr><tr><td align="left">恢复</td><td align="left">ms-settings:recovery</td></tr><tr><td align="left">启动安全密钥注册</td><td align="left">ms-settings:signinoptions-launchsecuritykeyenrollment</td></tr><tr><td align="left">疑难解答</td><td align="left">ms-settings:troubleshoot</td></tr><tr><td align="left">Windows 安全性</td><td align="left">ms-settings:windowsdefender</td></tr><tr><td align="left">Windows 预览体验计划</td><td align="left">ms-settings:windowsinsider（仅当用户在 WIP 中注册后才存在） ms-settings:windowsinsider-optin</td></tr><tr><td align="left">Windows 更新</td><td align="left">ms-settings:windowsupdate ms-settings:windowsupdate-action</td></tr><tr><td align="left">Windows 更新-活动小时数</td><td align="left">ms-settings:windowsupdate-activehours</td></tr><tr><td align="left">Windows 更新-高级选项</td><td align="left">ms-settings:windowsupdate-options</td></tr><tr><td align="left">Windows 更新-可选更新</td><td align="left">ms-settings:windowsupdate-optionalupdates</td></tr><tr><td align="left">Windows 更新-重启选项</td><td align="left">ms-settings:windowsupdate-restartoptions</td></tr><tr><td align="left">Windows 更新-按需查找器</td><td align="left">ms-settings:windowsupdate-seekerondemand</td></tr><tr><td align="left">Windows 更新-查看更新历史记录</td><td align="left">ms-settings:windowsupdate-history</td></tr></tbody></table><h3 id="用户帐户"><a href="#用户帐户" class="headerlink" title="用户帐户"></a>用户帐户</h3><table><thead><tr><th align="left">“设置”页面</th><th align="left">URI</th></tr></thead><tbody><tr><td align="left">预配</td><td align="left">ms-settings:workplace-provisioning（仅当企业部署了预配程序包时才可用）</td></tr><tr><td align="left">修复令牌</td><td align="left">ms-settings:workplace-repairtoken</td></tr><tr><td align="left">预配</td><td align="left">ms-settings:provisioning（仅当移动设备上企业部署了预配程序包时才可用）</td></tr><tr><td align="left">Windows Anywhere</td><td align="left">ms-settings:windowsanywhere（设备必须支持 Windows Anywhere）</td></tr></tbody></table><p>(完)</p><p><strong>参考</strong></p><ul><li><a href="https://learn.microsoft.com/zh-cn/windows/uwp/launch-resume/launch-settings-app">启动 Windows 设置应用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>翻译转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极简生活可以尝试的实践</title>
    <link href="/blog/2024/03/%E6%9E%81%E7%AE%80%E7%94%9F%E6%B4%BB%E5%8F%AF%E4%BB%A5%E5%B0%9D%E8%AF%95%E7%9A%84%E5%AE%9E%E8%B7%B5.html"/>
    <url>/blog/2024/03/%E6%9E%81%E7%AE%80%E7%94%9F%E6%B4%BB%E5%8F%AF%E4%BB%A5%E5%B0%9D%E8%AF%95%E7%9A%84%E5%AE%9E%E8%B7%B5.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>拥有却不珍惜，才是最可惜的事情。</p></blockquote><h2 id="生活篇"><a href="#生活篇" class="headerlink" title="生活篇"></a>生活篇</h2><p>直接打地铺，不需要买床。</p><p><img src="/blog/./assets/E3C3UZYXABAF2-1711639803786-9.png" alt="img"></p><p>小坐垫</p><p><img src="/blog/./assets/3FXLWZYXAAQHW-1711639826858-12.png" alt="img"></p><p>单人冰箱，电饭煲，微波炉，镜子</p><p><img src="/blog/./assets/GPZ3WZYXACAEC-1711639833540-15.png" alt="img"></p><p>室内绿植</p><p><img src="/blog/./assets/NMQ32ZYXABAE4-1711639840135-18.png" alt="img"></p><p>（完）</p><p>参考资料：</p><ul><li><p><a href="https://v.qq.com/x/page/h3364s2sm40.html">人文讲堂——从断舍离实践老子道德经</a></p></li><li><p><a href="https://v.qq.com/x/cover/mzc003j5ct15nqx/p35087f17f5.html">生活中的一天日本极简主义者的一天，过的有多简单？</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>极简生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《不持有的生活》读书摘录</title>
    <link href="/blog/2024/03/%E3%80%8A%E4%B8%8D%E6%8C%81%E6%9C%89%E7%9A%84%E7%94%9F%E6%B4%BB%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95.html"/>
    <url>/blog/2024/03/%E3%80%8A%E4%B8%8D%E6%8C%81%E6%9C%89%E7%9A%84%E7%94%9F%E6%B4%BB%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95.html</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://book.douban.com/subject/4086725/">《不持有的生活》</a><br>作者: 金子由纪子<br>出版社: 山东人民出版社<br>译者: 燕子<br>出版年: 2009-9-1<br>页数: 191<br>定价: 29.00元<br>装帧: 平装<br>ISBN: 9787209049467</p></blockquote><h2 id="时间就是金钱"><a href="#时间就是金钱" class="headerlink" title="时间就是金钱"></a>时间就是金钱</h2><p>物品四溢、乱糟糟的生活，使人混乱，毫无生气。</p><p>物品四溢的生活之所以是我们的压力，难道不是因为，东西的本质就是时间的集合体吗？</p><p>无论是多么没用的东西，也都耗费了地球上的资源，并且是经过了工厂机器的加工，或因人们的手工劳动，才制造岀來的。</p><p>即使是一张纸，如果不是具有一定年龄的树木，也是无法制成的。</p><p>一粒种子在发芽之后，需要阳光的滋养才能长成参天大树。</p><p>某天，这棵树被砍伐，运送到了工厂。</p><p>经过了多道工序，最终制成纸张。</p><p>这些纸被卡车运到店里，然后被打好包装、贴上价签，之后被出售。</p><p>我们一想那些冗长的过程，就会感觉要昏过去了。我们不得不承认，周围所有的东西，都要历经不同的，并与之相适应的漫长时间才得以产生。</p><p>当然，没有人会在平日里关注这些事情，所以更值得关注。其实，每件东西上都凝结了时间，这种时间的重量压在我们心上，就变成了一种无形的压力。  只不过，这种压力会因为物品的不同，而表现岀不同的意义。</p><p>那些虽然没有用也不喜欢，但是却嫌麻烦没有扔掉的东西，就算再小，我们也会觉得像海底的水压一般沉重。而那些我们喜欢的、每天使用时心情都很愉悦的东两，即使很重，我们也会毫无感觉。</p><p>拥有很多收藏品,并且对这些东西十分珍惜的人,一定不会感到有任何压力, 还会生活得轻松自在。有问题的是那些被不喜欢的东西所包围，但是又不知道  该如何是好，只能选择继续保留的人们。这种生活被时间的重量压碎，变得不 再正常了。</p><p>我们通常都是把时间“出售”给企业或个人，用以此获得的报酬来谋生。</p><p>我们周围的某些东西，实质上都是“我们的时间“的另一种表现形式。</p><p>“时间就是金钱”，这是现代社会中众所周知的常识。我们也可以换个说法, 即“时间就是物品”。</p><p>被物品包围却无法很好地利用物品的人，不能将自己历尽艰辛付岀的时间 收回来，就是浪费了这些时间。</p><p>不仅如此，有些人还抱有这样的想法：“不能有效利用东西是因为现在的东西都没用，如果是好东西一定会很珍惜，所以想要拥有比现在更好的东西，这些人难道不可笑吗？</p><p>为了实现上述目标，我们就需要花费更多的钱，也就必须出卖更多的时间。</p><p>用这种方式获得的东西，那些人能够有效地利用吗？</p><p>为了这些连是否能有效利用都不知道的东西，而抱怨说“很忙、没有时间”, 难道不是一种本末倒置的行为吗？</p><h2 id="这种生活方式支持着“不持有的生活”"><a href="#这种生活方式支持着“不持有的生活”" class="headerlink" title="这种生活方式支持着“不持有的生活”"></a>这种生活方式支持着“不持有的生活”</h2><p>我曾经在门户网站“All ABOUT”的“简单生活”专栏中•担任指导员的工作。 所以，有很多机会接触那些过着“不持有的生活”的人。通过与他们接触的经历,  我深深地感受到：</p><p>“东西越少，越不会使人慌张张”</p><p>“不持有的生活使自己的时间变得绰绰有余”</p><p>说到“不会慌慌張张”、“时间绰绰有余”，我们会条件反射地联想到“长期休假”、“提前退休”、“乡下的慢节奏生活”等等</p><p>但是，与我交谈过的人，并不是非常有钱或不用工作就可以生存下去的人, 反而是些每天都要拼命工作，与普通人一样工作很忙，但却过着惬意生活的人。</p><p>有些人如果不长期休假、不提前退休、不移居到孤岛，就无法过上这种惬 意的生活。他们就必须加倍地努力，否则将无法赚到足够的钱来实现这些日的。</p><p>有一些人曾经成功地做到了这一点，并不意味着所有人都可以。这种方式 获得的时间也未必就是悠闲、宽裕的。</p><p>我们似乎都认为，只有比平常人付岀多倍劳动或能力较一般人强的人，才 能获得宽裕的时间。</p><p>事实却并非如此。</p><p>宽裕的时间并不一定等于集中的时间。</p><p>一边过着极为普通的生活，一边拥有宽裕的时间，也是很容易办到的事情。</p><p>如果你也想这样的话，就不妨尝试一下我下面为你推荐的生活方式。</p><h2 id="早起"><a href="#早起" class="headerlink" title="早起"></a>早起</h2><p>每天尽量早起。早晨比起一天中的其他时间更容易“制造”出多余时间。 也许会有很多人讶异地说：“紧张匆忙的早上，哪有什么宽裕的时间可言啊？ ”</p><p>但事实的确如此</p><p>从现在起，就尝试一下比平时早起30分钟吧。在这段时间里，去做任何自 己喜欢的或能感到快乐的事。即使剩下的事情都没有改变，但仅仅是因为早起 30分钟，你也会感到一天的流程不知是何原因竟慢了许多。</p><p>早起30分钟，让你的时间渐渐地宽裕起来。</p><h2 id="保持充足的睡眠"><a href="#保持充足的睡眠" class="headerlink" title="保持充足的睡眠"></a>保持充足的睡眠</h2><p>这一点看起来似乎和“早起”有些冲突，不过，我们还是要在晚上好好休息。 有些人为了学习或是“自强奋发”而彻夜不休地努力。不过，我们要清楚一点,  睡眠对于你的整个人生来说有着无可替代的重要作用。</p><p>睡眠并不是在浪费时间。睡眠时,我们身体上和心灵上的创伤都能得到治愈。</p><p>如果你属于每天睡眠时间都较长的人，也不要为此而感到羞愧。就像爱因斯坦这样的大科学家，也是个每天需要睡10个小时以上的“嗜睡者(long  sleeper )”。</p><p>如果你认为长时间睡眠对自己是必要的，你就好好地睡一觉，这样一天的时间也会变得缓慢下来。如果你无法挤岀睡眠时间，就减少在看电视、上网等 事情上花费的时间。</p><h2 id="享受用餐"><a href="#享受用餐" class="headerlink" title="享受用餐"></a>享受用餐</h2><p>你无须了解美食信息和专业的营养，但你需要尽可能多地了解所住的地区 一年四季都有什么美味的食品，以及如何烹饪它们才最美味。还要考虑怎样将这些美味盛装，并和谁在哪里享用。当然，如果能自己亲手制作美味的菜肴,  就再好不过啦！</p><p>认真地享受自己的每一餐(包括做饭的过程)，这样你的心情也会得到放松。 这种方式能让我们不再心慌意乱，听上去似乎有些不可思议，但这无比真实。</p><h2 id="仰望天空"><a href="#仰望天空" class="headerlink" title="仰望天空"></a>仰望天空</h2><p>仰望天空似乎毫无意义，但是对减缓时间的流逝感而言，这是十分重要的。 当你心烦意乱、焦躁不安时，做个深呼吸，仰望一下天空吧！向上仰望时，也许你会更清楚地意识到自己所奋力追逐的事物，实际上并没有想象中的那么困难。</p><p>仰望天空无须花费你很多的时间，但却能使你的生活变得悠闲、舒适。</p><h2 id="不要总说“我很忙”"><a href="#不要总说“我很忙”" class="headerlink" title="不要总说“我很忙”"></a>不要总说“我很忙”</h2><p>现在，无论是大人还是小孩都会感到很忙碌。但是，并不是你抱怨完自己有多“忙”之后，时间就宽裕了了。所以，你可不可以不要再说“忙” 了？</p><p>当你不再抱怨自己忙以后，心情自然就会舒畅许多，甚至也能让周围的人感到惬意。</p><p>如果你仅仅是通过减少浪费，而实现有效地利用时间。从表面上來看，生活中很多事情的效率都有了不小的提高。</p><p>快节奏的生活中包含了很多不合理的、与人类生理习惯相违背的东西，在某些方面会岀现些“扭曲”。举个例子来说，很多人不明所以地沉迷于赌博，也有人对购物疯狂迷恋，还有一些人会无法门控地暴饮暴食。这些现象不就是当今社会的病患所在吗？</p><p>“充裕的时间”并不是指那些通过努力工作，才终于到手的时间，而是现在这一瞬。</p><p>每天24小时，不管你如何努力它也变不成30个小时。</p><p>但是，现在的一瞬确实存在，比你想象中的之后的某一时间更加现实。</p><p>如果我们能将这一瞬，用我们双眼和双手来体味，从中找寻到无限乐趣， 这一瞬就是我们最为充裕的时间。</p><p>本章中所叙述的这些生活方式，咋一看似乎都没冇什么意义。</p><p>但是，这些看似无意义的行为，却能够在很大程度上帮助我们。如果你能通过珍惜这些时间，使内心恢复到原有的平静状态.在追求某件事物时，原本焦躁不安的情绪也能得到很好的缓解。</p><p>这样一來，这种无须依赖东西的生活，会变得轻松和愉快。同时，你也能够淸楚地知道，什么才是对自己有用的东西。</p><h2 id="东西不是敌人，而是朋友"><a href="#东西不是敌人，而是朋友" class="headerlink" title="东西不是敌人，而是朋友"></a>东西不是敌人，而是朋友</h2><p>“我不要东西。”</p><p>“我要远离东西。”</p><p>虽然有人总会这样说，但是这并不是让我们将东西视为敌人。虽说是“不持有的生活”，但是修行僧人那种生活中一切多余事物都没有的生活方式，称不上是人类应有的，充满人情冷暖的生活方式。</p><p>我也有特别喜爱的东西，当听到别人说“那种东西快扔掉”时，也会感到很失落。因为，是那些东西让我的生活变得丰富多彩。若是没有了它们，那就不是我的生活了。</p><p>很多东西在我们经常使用的过程中，会变得和身体很契合，简直就像自已 的一部分一样。这样的东西就如同朋友一般。试想一下，拥有众多朋友的生活  将会是多么温暖美好啊！</p><p>但是，就像我们无法与所有遇见的人都成为朋友一样，我们也不可能开开心心地和所有东西“打交道”。</p><p>比如说，有人就很喜欢用百元的商品，但我就不属于这种人.我不希望自己家中堆满了百元商品；香奈儿、迪奥可谓非常有名的品牌，很多人都很爱用，却不适合我。</p><p>只要清楚这些，你就会知道它们是不可能和自己成为朋友的！</p><p>那么，什么东西才适合我们的生活呢？</p><p>又有什么东西可以与我们成为朋友呢？</p><p>我想，这不是一朝一夕就能弄明白的事情，而需要在日常生活中不断思索和探求。</p><p>如果你把东西当成了敌人的话，不仅会使自己的生活变得繁杂，而且会无谓地耗费许多精力。但是，如果将它们视为自己的朋友，我们将不需要其他多余的东西。</p><p>“不持有的生活”倡导我们适度拥有物品。不过，想要做到让物品的数量恰到好处，是件很难的事情。因为，这个所谓的“度”，既没有一个可以参考的平均值，也没有正确的答案。</p><p>如果可能的话，我想过这种“不持有的生活”、不丢弃东西的生活。无论生活中是否有物品存在，我都能应对自如。</p><p>我们每天的生活，都是一种以此为目的的学习和修行。</p><h2 id="后记为了不迷失"><a href="#后记为了不迷失" class="headerlink" title="后记为了不迷失"></a>后记为了不迷失</h2><p>摄影中有一个专业词语叫做“背景处理”。</p><p>在摄影时，如果被拍摄物的周围有很多乱七八糟的东西，拍摄的主体看上 去也不会很漂亮。如果一张照片看不出背景和被拍摄物的分別，这照片究竞想拍摄的是什么，别人也就无从得知了。</p><p>为了防止这种情况的发生，摄影师或是移动被摄物体，或是把背景中的东西挪走，不然就只有把背景虚化。这样一来，被摄物体立刻就会变得突出了。</p><p>“不持有的生活”与摄影的原理相同。</p><p>如果你不清楚自己现在的生活状态，那么，就像摄影中的背景处理那样, 一件一件来减少周围的东西吧！</p><p>想要一下子改变自己的生活，使之清新、舒适，是很难办到的。我们可以 从一点一滴做起，慢慢实践于生活之中，这样一来就简单多了。</p><p>就像挖掘化石的时候，需要小心翼翼地去掉它周围的泥土和砂石，模糊的镜面在能够清晰映照前，需要不断进行打磨一样，经过这个过程一一养成“不持有”的生活习惯——你才能够找到埋藏于自己内心深处的那些个性风格及喜欢的东西。而“不持有的生活”正是这样一个过程。</p><p>“不持有的生活”是珍惜现在的生活。</p><p>因为“东西”也可以看做是“时间”的代名词，或许“继续保留”便意味着执著于过去；而过量地“准备”则是种对未来的担忧，这也许是一种逃避现实生活的举动。</p><p>如果仅仅着眼于现在的生活，这种“现在的生活”，并不需要太多东西。</p><p>而珍惜“现在”的人，知道此时此刻自己该做些什么。</p><p>不管多么“忙”，你也要听一听哭泣着撒着娇的孩子都说了些什么。</p><p>当身边的朋友失去了勇气、无路可走的时候，我们必须给予他们面对“现在” 的力量。</p><p>还有比这些更重要的东西吗？</p><p>为了不遗失自己最重要的东西。</p><p>为了在“现在”中生活着的自己。</p><p>就让我们开始过这种“不持有的生活”吧！</p><p>一无所有的生活称不上是“不持有的生活”。</p><p>我相信，一百个人会有一百种“不持有的生活”。</p><p>与“想拥有什么”相比，“不持有什么”更能体现出一个人的风格。</p><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>极简生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>艾宾浩斯遗忘曲线复习计划表</title>
    <link href="/blog/2024/03/%E8%89%BE%E5%AE%BE%E6%B5%A9%E6%96%AF%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92%E8%A1%A8.html"/>
    <url>/blog/2024/03/%E8%89%BE%E5%AE%BE%E6%B5%A9%E6%96%AF%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92%E8%A1%A8.html</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center">__________________________复习计划表</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">序号</td><td align="center">学习日期</td><td align="center">学  习  内  容</td><td align="center">复习周期</td><td align="center">复习周期</td><td align="center">复习周期</td><td align="center">复习周期</td><td align="center">复习周期</td><td align="center">复习周期</td><td align="center">复习周期</td><td align="center">复习周期</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1天</td><td align="center">2天</td><td align="center">4天</td><td align="center">7天</td><td align="center">15天</td><td align="center">1月</td><td align="center">3月</td><td align="center">6月</td></tr><tr><td align="center">1</td><td align="center">月  日</td><td align="center"></td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">2</td><td align="center">月  日</td><td align="center"></td><td align="center">1</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">3</td><td align="center">月  日</td><td align="center"></td><td align="center">2</td><td align="center">1</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">4</td><td align="center">月  日</td><td align="center"></td><td align="center">3</td><td align="center">2</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">5</td><td align="center">月  日</td><td align="center"></td><td align="center">4</td><td align="center">3</td><td align="center">1</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">6</td><td align="center">月  日</td><td align="center"></td><td align="center">5</td><td align="center">4</td><td align="center">2</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">7</td><td align="center">月  日</td><td align="center"></td><td align="center">6</td><td align="center">5</td><td align="center">3</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">8</td><td align="center">月  日</td><td align="center"></td><td align="center">7</td><td align="center">6</td><td align="center">4</td><td align="center">1</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">9</td><td align="center">月  日</td><td align="center"></td><td align="center">8</td><td align="center">7</td><td align="center">5</td><td align="center">2</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">10</td><td align="center">月  日</td><td align="center"></td><td align="center">9</td><td align="center">8</td><td align="center">6</td><td align="center">3</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">11</td><td align="center">月  日</td><td align="center"></td><td align="center">10</td><td align="center">9</td><td align="center">7</td><td align="center">4</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">12</td><td align="center">月  日</td><td align="center"></td><td align="center">11</td><td align="center">10</td><td align="center">8</td><td align="center">5</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">13</td><td align="center">月  日</td><td align="center"></td><td align="center">12</td><td align="center">11</td><td align="center">9</td><td align="center">6</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">14</td><td align="center">月  日</td><td align="center"></td><td align="center">13</td><td align="center">12</td><td align="center">10</td><td align="center">7</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">15</td><td align="center">月  日</td><td align="center"></td><td align="center">14</td><td align="center">13</td><td align="center">11</td><td align="center">8</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">16</td><td align="center">月  日</td><td align="center"></td><td align="center">15</td><td align="center">14</td><td align="center">12</td><td align="center">9</td><td align="center">1</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">17</td><td align="center">月  日</td><td align="center"></td><td align="center">16</td><td align="center">15</td><td align="center">13</td><td align="center">10</td><td align="center">2</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">18</td><td align="center">月  日</td><td align="center"></td><td align="center">17</td><td align="center">16</td><td align="center">14</td><td align="center">11</td><td align="center">3</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">19</td><td align="center">月  日</td><td align="center"></td><td align="center">18</td><td align="center">17</td><td align="center">15</td><td align="center">12</td><td align="center">4</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">20</td><td align="center">月  日</td><td align="center"></td><td align="center">19</td><td align="center">18</td><td align="center">16</td><td align="center">13</td><td align="center">5</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">21</td><td align="center">月  日</td><td align="center"></td><td align="center">20</td><td align="center">19</td><td align="center">17</td><td align="center">14</td><td align="center">6</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">22</td><td align="center">月  日</td><td align="center"></td><td align="center">21</td><td align="center">20</td><td align="center">18</td><td align="center">15</td><td align="center">7</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">23</td><td align="center">月  日</td><td align="center"></td><td align="center">22</td><td align="center">21</td><td align="center">19</td><td align="center">16</td><td align="center">8</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">24</td><td align="center">月  日</td><td align="center"></td><td align="center">23</td><td align="center">22</td><td align="center">20</td><td align="center">17</td><td align="center">9</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">25</td><td align="center">月  日</td><td align="center"></td><td align="center">24</td><td align="center">23</td><td align="center">21</td><td align="center">18</td><td align="center">10</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">26</td><td align="center">月  日</td><td align="center"></td><td align="center">25</td><td align="center">24</td><td align="center">22</td><td align="center">19</td><td align="center">11</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">27</td><td align="center">月  日</td><td align="center"></td><td align="center">26</td><td align="center">25</td><td align="center">23</td><td align="center">20</td><td align="center">12</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">28</td><td align="center">月  日</td><td align="center"></td><td align="center">27</td><td align="center">26</td><td align="center">24</td><td align="center">21</td><td align="center">13</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">29</td><td align="center">月  日</td><td align="center"></td><td align="center">28</td><td align="center">27</td><td align="center">25</td><td align="center">22</td><td align="center">14</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">30</td><td align="center">月  日</td><td align="center"></td><td align="center">29</td><td align="center">28</td><td align="center">26</td><td align="center">23</td><td align="center">15</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">31</td><td align="center">月  日</td><td align="center"></td><td align="center">30</td><td align="center">29</td><td align="center">27</td><td align="center">24</td><td align="center">16</td><td align="center">1</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">32</td><td align="center">月  日</td><td align="center"></td><td align="center">31</td><td align="center">30</td><td align="center">28</td><td align="center">25</td><td align="center">17</td><td align="center">2</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">33</td><td align="center">月  日</td><td align="center"></td><td align="center">32</td><td align="center">31</td><td align="center">29</td><td align="center">26</td><td align="center">18</td><td align="center">3</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">34</td><td align="center">月  日</td><td align="center"></td><td align="center">33</td><td align="center">32</td><td align="center">30</td><td align="center">27</td><td align="center">19</td><td align="center">4</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">35</td><td align="center">月  日</td><td align="center"></td><td align="center">34</td><td align="center">33</td><td align="center">31</td><td align="center">28</td><td align="center">20</td><td align="center">5</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">36</td><td align="center">月  日</td><td align="center"></td><td align="center">35</td><td align="center">34</td><td align="center">32</td><td align="center">29</td><td align="center">21</td><td align="center">6</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">37</td><td align="center">月  日</td><td align="center"></td><td align="center">36</td><td align="center">35</td><td align="center">33</td><td align="center">30</td><td align="center">22</td><td align="center">7</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">38</td><td align="center">月  日</td><td align="center"></td><td align="center">37</td><td align="center">36</td><td align="center">34</td><td align="center">31</td><td align="center">23</td><td align="center">8</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">39</td><td align="center">月  日</td><td align="center"></td><td align="center">38</td><td align="center">37</td><td align="center">35</td><td align="center">32</td><td align="center">24</td><td align="center">9</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">40</td><td align="center">月  日</td><td align="center"></td><td align="center">39</td><td align="center">38</td><td align="center">36</td><td align="center">33</td><td align="center">25</td><td align="center">10</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">41</td><td align="center">月  日</td><td align="center"></td><td align="center">40</td><td align="center">39</td><td align="center">37</td><td align="center">34</td><td align="center">26</td><td align="center">11</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">42</td><td align="center">月  日</td><td align="center"></td><td align="center">41</td><td align="center">40</td><td align="center">38</td><td align="center">35</td><td align="center">27</td><td align="center">12</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">43</td><td align="center">月  日</td><td align="center"></td><td align="center">42</td><td align="center">41</td><td align="center">39</td><td align="center">36</td><td align="center">28</td><td align="center">13</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">44</td><td align="center">月  日</td><td align="center"></td><td align="center">43</td><td align="center">42</td><td align="center">40</td><td align="center">37</td><td align="center">29</td><td align="center">14</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">45</td><td align="center">月  日</td><td align="center"></td><td align="center">44</td><td align="center">43</td><td align="center">41</td><td align="center">38</td><td align="center">30</td><td align="center">15</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">46</td><td align="center">月  日</td><td align="center"></td><td align="center">45</td><td align="center">44</td><td align="center">42</td><td align="center">39</td><td align="center">31</td><td align="center">16</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">47</td><td align="center">月  日</td><td align="center"></td><td align="center">46</td><td align="center">45</td><td align="center">43</td><td align="center">40</td><td align="center">32</td><td align="center">17</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">48</td><td align="center">月  日</td><td align="center"></td><td align="center">47</td><td align="center">46</td><td align="center">44</td><td align="center">41</td><td align="center">33</td><td align="center">18</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">49</td><td align="center">月  日</td><td align="center"></td><td align="center">48</td><td align="center">47</td><td align="center">45</td><td align="center">42</td><td align="center">34</td><td align="center">19</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">50</td><td align="center">月  日</td><td align="center"></td><td align="center">49</td><td align="center">48</td><td align="center">46</td><td align="center">43</td><td align="center">35</td><td align="center">20</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">51</td><td align="center">月  日</td><td align="center"></td><td align="center">50</td><td align="center">49</td><td align="center">47</td><td align="center">44</td><td align="center">36</td><td align="center">21</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">52</td><td align="center">月  日</td><td align="center"></td><td align="center">51</td><td align="center">50</td><td align="center">48</td><td align="center">45</td><td align="center">37</td><td align="center">22</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">53</td><td align="center">月  日</td><td align="center"></td><td align="center">52</td><td align="center">51</td><td align="center">49</td><td align="center">46</td><td align="center">38</td><td align="center">23</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">54</td><td align="center">月  日</td><td align="center"></td><td align="center">53</td><td align="center">52</td><td align="center">50</td><td align="center">47</td><td align="center">39</td><td align="center">24</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">55</td><td align="center">月  日</td><td align="center"></td><td align="center">54</td><td align="center">53</td><td align="center">51</td><td align="center">48</td><td align="center">40</td><td align="center">25</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">56</td><td align="center">月  日</td><td align="center"></td><td align="center">55</td><td align="center">54</td><td align="center">52</td><td align="center">49</td><td align="center">41</td><td align="center">26</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">57</td><td align="center">月  日</td><td align="center"></td><td align="center">56</td><td align="center">55</td><td align="center">53</td><td align="center">50</td><td align="center">42</td><td align="center">27</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">58</td><td align="center">月  日</td><td align="center"></td><td align="center">57</td><td align="center">56</td><td align="center">54</td><td align="center">51</td><td align="center">43</td><td align="center">28</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">59</td><td align="center">月  日</td><td align="center"></td><td align="center">58</td><td align="center">57</td><td align="center">55</td><td align="center">52</td><td align="center">44</td><td align="center">29</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">60</td><td align="center">月  日</td><td align="center"></td><td align="center">59</td><td align="center">58</td><td align="center">56</td><td align="center">53</td><td align="center">45</td><td align="center">30</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">61</td><td align="center">月  日</td><td align="center"></td><td align="center">60</td><td align="center">59</td><td align="center">57</td><td align="center">54</td><td align="center">46</td><td align="center">31</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">62</td><td align="center">月  日</td><td align="center"></td><td align="center">61</td><td align="center">60</td><td align="center">58</td><td align="center">55</td><td align="center">47</td><td align="center">32</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">63</td><td align="center">月  日</td><td align="center"></td><td align="center">62</td><td align="center">61</td><td align="center">59</td><td align="center">56</td><td align="center">48</td><td align="center">33</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">64</td><td align="center">月  日</td><td align="center"></td><td align="center">63</td><td align="center">62</td><td align="center">60</td><td align="center">57</td><td align="center">49</td><td align="center">34</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">65</td><td align="center">月  日</td><td align="center"></td><td align="center">64</td><td align="center">63</td><td align="center">61</td><td align="center">58</td><td align="center">50</td><td align="center">35</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">66</td><td align="center">月  日</td><td align="center"></td><td align="center">65</td><td align="center">64</td><td align="center">62</td><td align="center">59</td><td align="center">51</td><td align="center">36</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">67</td><td align="center">月  日</td><td align="center"></td><td align="center">66</td><td align="center">65</td><td align="center">63</td><td align="center">60</td><td align="center">52</td><td align="center">37</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">68</td><td align="center">月  日</td><td align="center"></td><td align="center">67</td><td align="center">66</td><td align="center">64</td><td align="center">61</td><td align="center">53</td><td align="center">38</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">69</td><td align="center">月  日</td><td align="center"></td><td align="center">68</td><td align="center">67</td><td align="center">65</td><td align="center">62</td><td align="center">54</td><td align="center">39</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">70</td><td align="center">月  日</td><td align="center"></td><td align="center">69</td><td align="center">68</td><td align="center">66</td><td align="center">63</td><td align="center">55</td><td align="center">40</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">71</td><td align="center">月  日</td><td align="center"></td><td align="center">70</td><td align="center">69</td><td align="center">67</td><td align="center">64</td><td align="center">56</td><td align="center">41</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">72</td><td align="center">月  日</td><td align="center"></td><td align="center">71</td><td align="center">70</td><td align="center">68</td><td align="center">65</td><td align="center">57</td><td align="center">42</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">73</td><td align="center">月  日</td><td align="center"></td><td align="center">72</td><td align="center">71</td><td align="center">69</td><td align="center">66</td><td align="center">58</td><td align="center">43</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">74</td><td align="center">月  日</td><td align="center"></td><td align="center">73</td><td align="center">72</td><td align="center">70</td><td align="center">67</td><td align="center">59</td><td align="center">44</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">75</td><td align="center">月  日</td><td align="center"></td><td align="center">74</td><td align="center">73</td><td align="center">71</td><td align="center">68</td><td align="center">60</td><td align="center">45</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">76</td><td align="center">月  日</td><td align="center"></td><td align="center">75</td><td align="center">74</td><td align="center">72</td><td align="center">69</td><td align="center">61</td><td align="center">46</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">77</td><td align="center">月  日</td><td align="center"></td><td align="center">76</td><td align="center">75</td><td align="center">73</td><td align="center">70</td><td align="center">62</td><td align="center">47</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">78</td><td align="center">月  日</td><td align="center"></td><td align="center">77</td><td align="center">76</td><td align="center">74</td><td align="center">71</td><td align="center">63</td><td align="center">48</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">79</td><td align="center">月  日</td><td align="center"></td><td align="center">78</td><td align="center">77</td><td align="center">75</td><td align="center">72</td><td align="center">64</td><td align="center">49</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">80</td><td align="center">月  日</td><td align="center"></td><td align="center">79</td><td align="center">78</td><td align="center">76</td><td align="center">73</td><td align="center">65</td><td align="center">50</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">81</td><td align="center">月  日</td><td align="center"></td><td align="center">80</td><td align="center">79</td><td align="center">77</td><td align="center">74</td><td align="center">66</td><td align="center">51</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">82</td><td align="center">月  日</td><td align="center"></td><td align="center">81</td><td align="center">80</td><td align="center">78</td><td align="center">75</td><td align="center">67</td><td align="center">52</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">83</td><td align="center">月  日</td><td align="center"></td><td align="center">82</td><td align="center">81</td><td align="center">79</td><td align="center">76</td><td align="center">68</td><td align="center">53</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">84</td><td align="center">月  日</td><td align="center"></td><td align="center">83</td><td align="center">82</td><td align="center">80</td><td align="center">77</td><td align="center">69</td><td align="center">54</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">85</td><td align="center">月  日</td><td align="center"></td><td align="center">84</td><td align="center">83</td><td align="center">81</td><td align="center">78</td><td align="center">70</td><td align="center">55</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">86</td><td align="center">月  日</td><td align="center"></td><td align="center">85</td><td align="center">84</td><td align="center">82</td><td align="center">79</td><td align="center">71</td><td align="center">56</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">87</td><td align="center">月  日</td><td align="center"></td><td align="center">86</td><td align="center">85</td><td align="center">83</td><td align="center">80</td><td align="center">72</td><td align="center">57</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">88</td><td align="center">月  日</td><td align="center"></td><td align="center">87</td><td align="center">86</td><td align="center">84</td><td align="center">81</td><td align="center">73</td><td align="center">58</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">89</td><td align="center">月  日</td><td align="center"></td><td align="center">88</td><td align="center">87</td><td align="center">85</td><td align="center">82</td><td align="center">74</td><td align="center">59</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">90</td><td align="center">月  日</td><td align="center"></td><td align="center">89</td><td align="center">88</td><td align="center">86</td><td align="center">83</td><td align="center">75</td><td align="center">60</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">91</td><td align="center">月  日</td><td align="center"></td><td align="center">90</td><td align="center">89</td><td align="center">87</td><td align="center">84</td><td align="center">76</td><td align="center">61</td><td align="center">1</td><td align="center">-</td></tr><tr><td align="center">92</td><td align="center">月  日</td><td align="center"></td><td align="center">91</td><td align="center">90</td><td align="center">88</td><td align="center">85</td><td align="center">77</td><td align="center">62</td><td align="center">2</td><td align="center">-</td></tr><tr><td align="center">93</td><td align="center">月  日</td><td align="center"></td><td align="center">92</td><td align="center">91</td><td align="center">89</td><td align="center">86</td><td align="center">78</td><td align="center">63</td><td align="center">3</td><td align="center">-</td></tr><tr><td align="center">94</td><td align="center">月  日</td><td align="center"></td><td align="center">93</td><td align="center">92</td><td align="center">90</td><td align="center">87</td><td align="center">79</td><td align="center">64</td><td align="center">4</td><td align="center">-</td></tr><tr><td align="center">95</td><td align="center">月  日</td><td align="center"></td><td align="center">94</td><td align="center">93</td><td align="center">91</td><td align="center">88</td><td align="center">80</td><td align="center">65</td><td align="center">5</td><td align="center">-</td></tr><tr><td align="center">96</td><td align="center">月  日</td><td align="center"></td><td align="center">95</td><td align="center">94</td><td align="center">92</td><td align="center">89</td><td align="center">81</td><td align="center">66</td><td align="center">6</td><td align="center">-</td></tr><tr><td align="center">97</td><td align="center">月  日</td><td align="center"></td><td align="center">96</td><td align="center">95</td><td align="center">93</td><td align="center">90</td><td align="center">82</td><td align="center">67</td><td align="center">7</td><td align="center">-</td></tr><tr><td align="center">98</td><td align="center">月  日</td><td align="center"></td><td align="center">97</td><td align="center">96</td><td align="center">94</td><td align="center">91</td><td align="center">83</td><td align="center">68</td><td align="center">8</td><td align="center">-</td></tr><tr><td align="center">99</td><td align="center">月  日</td><td align="center"></td><td align="center">98</td><td align="center">97</td><td align="center">95</td><td align="center">92</td><td align="center">84</td><td align="center">69</td><td align="center">9</td><td align="center">-</td></tr><tr><td align="center">100</td><td align="center">月  日</td><td align="center"></td><td align="center">99</td><td align="center">98</td><td align="center">96</td><td align="center">93</td><td align="center">85</td><td align="center">70</td><td align="center">10</td><td align="center">-</td></tr><tr><td align="center">101</td><td align="center">月  日</td><td align="center"></td><td align="center">100</td><td align="center">99</td><td align="center">97</td><td align="center">94</td><td align="center">86</td><td align="center">71</td><td align="center">11</td><td align="center">-</td></tr><tr><td align="center">102</td><td align="center">月  日</td><td align="center"></td><td align="center">101</td><td align="center">100</td><td align="center">98</td><td align="center">95</td><td align="center">87</td><td align="center">72</td><td align="center">12</td><td align="center">-</td></tr><tr><td align="center">103</td><td align="center">月  日</td><td align="center"></td><td align="center">102</td><td align="center">101</td><td align="center">99</td><td align="center">96</td><td align="center">88</td><td align="center">73</td><td align="center">13</td><td align="center">-</td></tr><tr><td align="center">104</td><td align="center">月  日</td><td align="center"></td><td align="center">103</td><td align="center">102</td><td align="center">100</td><td align="center">97</td><td align="center">89</td><td align="center">74</td><td align="center">14</td><td align="center">-</td></tr><tr><td align="center">105</td><td align="center">月  日</td><td align="center"></td><td align="center">104</td><td align="center">103</td><td align="center">101</td><td align="center">98</td><td align="center">90</td><td align="center">75</td><td align="center">15</td><td align="center">-</td></tr><tr><td align="center">106</td><td align="center">月  日</td><td align="center"></td><td align="center">105</td><td align="center">104</td><td align="center">102</td><td align="center">99</td><td align="center">91</td><td align="center">76</td><td align="center">16</td><td align="center">-</td></tr><tr><td align="center">107</td><td align="center">月  日</td><td align="center"></td><td align="center">106</td><td align="center">105</td><td align="center">103</td><td align="center">100</td><td align="center">92</td><td align="center">77</td><td align="center">17</td><td align="center">-</td></tr><tr><td align="center">108</td><td align="center">月  日</td><td align="center"></td><td align="center">107</td><td align="center">106</td><td align="center">104</td><td align="center">101</td><td align="center">93</td><td align="center">78</td><td align="center">18</td><td align="center">-</td></tr><tr><td align="center">109</td><td align="center">月  日</td><td align="center"></td><td align="center">108</td><td align="center">107</td><td align="center">105</td><td align="center">102</td><td align="center">94</td><td align="center">79</td><td align="center">19</td><td align="center">-</td></tr><tr><td align="center">110</td><td align="center">月  日</td><td align="center"></td><td align="center">109</td><td align="center">108</td><td align="center">106</td><td align="center">103</td><td align="center">95</td><td align="center">80</td><td align="center">20</td><td align="center">-</td></tr><tr><td align="center">111</td><td align="center">月  日</td><td align="center"></td><td align="center">110</td><td align="center">109</td><td align="center">107</td><td align="center">104</td><td align="center">96</td><td align="center">81</td><td align="center">21</td><td align="center">-</td></tr><tr><td align="center">112</td><td align="center">月  日</td><td align="center"></td><td align="center">111</td><td align="center">110</td><td align="center">108</td><td align="center">105</td><td align="center">97</td><td align="center">82</td><td align="center">22</td><td align="center">-</td></tr><tr><td align="center">113</td><td align="center">月  日</td><td align="center"></td><td align="center">112</td><td align="center">111</td><td align="center">109</td><td align="center">106</td><td align="center">98</td><td align="center">83</td><td align="center">23</td><td align="center">-</td></tr><tr><td align="center">114</td><td align="center">月  日</td><td align="center"></td><td align="center">113</td><td align="center">112</td><td align="center">110</td><td align="center">107</td><td align="center">99</td><td align="center">84</td><td align="center">24</td><td align="center">-</td></tr><tr><td align="center">115</td><td align="center">月  日</td><td align="center"></td><td align="center">114</td><td align="center">113</td><td align="center">111</td><td align="center">108</td><td align="center">100</td><td align="center">85</td><td align="center">25</td><td align="center">-</td></tr><tr><td align="center">116</td><td align="center">月  日</td><td align="center"></td><td align="center">115</td><td align="center">114</td><td align="center">112</td><td align="center">109</td><td align="center">101</td><td align="center">86</td><td align="center">26</td><td align="center">-</td></tr><tr><td align="center">117</td><td align="center">月  日</td><td align="center"></td><td align="center">116</td><td align="center">115</td><td align="center">113</td><td align="center">110</td><td align="center">102</td><td align="center">87</td><td align="center">27</td><td align="center">-</td></tr><tr><td align="center">118</td><td align="center">月  日</td><td align="center"></td><td align="center">117</td><td align="center">116</td><td align="center">114</td><td align="center">111</td><td align="center">103</td><td align="center">88</td><td align="center">28</td><td align="center">-</td></tr><tr><td align="center">119</td><td align="center">月  日</td><td align="center"></td><td align="center">118</td><td align="center">117</td><td align="center">115</td><td align="center">112</td><td align="center">104</td><td align="center">89</td><td align="center">29</td><td align="center">-</td></tr><tr><td align="center">120</td><td align="center">月  日</td><td align="center"></td><td align="center">119</td><td align="center">118</td><td align="center">116</td><td align="center">113</td><td align="center">105</td><td align="center">90</td><td align="center">30</td><td align="center">-</td></tr><tr><td align="center">121</td><td align="center">月  日</td><td align="center"></td><td align="center">120</td><td align="center">119</td><td align="center">117</td><td align="center">114</td><td align="center">106</td><td align="center">91</td><td align="center">31</td><td align="center">-</td></tr><tr><td align="center">122</td><td align="center">月  日</td><td align="center"></td><td align="center">121</td><td align="center">120</td><td align="center">118</td><td align="center">115</td><td align="center">107</td><td align="center">92</td><td align="center">32</td><td align="center">-</td></tr><tr><td align="center">123</td><td align="center">月  日</td><td align="center"></td><td align="center">122</td><td align="center">121</td><td align="center">119</td><td align="center">116</td><td align="center">108</td><td align="center">93</td><td align="center">33</td><td align="center">-</td></tr><tr><td align="center">124</td><td align="center">月  日</td><td align="center"></td><td align="center">123</td><td align="center">122</td><td align="center">120</td><td align="center">117</td><td align="center">109</td><td align="center">94</td><td align="center">34</td><td align="center">-</td></tr><tr><td align="center">125</td><td align="center">月  日</td><td align="center"></td><td align="center">124</td><td align="center">123</td><td align="center">121</td><td align="center">118</td><td align="center">110</td><td align="center">95</td><td align="center">35</td><td align="center">-</td></tr><tr><td align="center">126</td><td align="center">月  日</td><td align="center"></td><td align="center">125</td><td align="center">124</td><td align="center">122</td><td align="center">119</td><td align="center">111</td><td align="center">96</td><td align="center">36</td><td align="center">-</td></tr><tr><td align="center">127</td><td align="center">月  日</td><td align="center"></td><td align="center">126</td><td align="center">125</td><td align="center">123</td><td align="center">120</td><td align="center">112</td><td align="center">97</td><td align="center">37</td><td align="center">-</td></tr><tr><td align="center">128</td><td align="center">月  日</td><td align="center"></td><td align="center">127</td><td align="center">126</td><td align="center">124</td><td align="center">121</td><td align="center">113</td><td align="center">98</td><td align="center">38</td><td align="center">-</td></tr><tr><td align="center">129</td><td align="center">月  日</td><td align="center"></td><td align="center">128</td><td align="center">127</td><td align="center">125</td><td align="center">122</td><td align="center">114</td><td align="center">99</td><td align="center">39</td><td align="center">-</td></tr><tr><td align="center">130</td><td align="center">月  日</td><td align="center"></td><td align="center">129</td><td align="center">128</td><td align="center">126</td><td align="center">123</td><td align="center">115</td><td align="center">100</td><td align="center">40</td><td align="center">-</td></tr><tr><td align="center">131</td><td align="center">月  日</td><td align="center"></td><td align="center">130</td><td align="center">129</td><td align="center">127</td><td align="center">124</td><td align="center">116</td><td align="center">101</td><td align="center">41</td><td align="center">-</td></tr><tr><td align="center">132</td><td align="center">月  日</td><td align="center"></td><td align="center">131</td><td align="center">130</td><td align="center">128</td><td align="center">125</td><td align="center">117</td><td align="center">102</td><td align="center">42</td><td align="center">-</td></tr><tr><td align="center">133</td><td align="center">月  日</td><td align="center"></td><td align="center">132</td><td align="center">131</td><td align="center">129</td><td align="center">126</td><td align="center">118</td><td align="center">103</td><td align="center">43</td><td align="center">-</td></tr><tr><td align="center">134</td><td align="center">月  日</td><td align="center"></td><td align="center">133</td><td align="center">132</td><td align="center">130</td><td align="center">127</td><td align="center">119</td><td align="center">104</td><td align="center">44</td><td align="center">-</td></tr><tr><td align="center">135</td><td align="center">月  日</td><td align="center"></td><td align="center">134</td><td align="center">133</td><td align="center">131</td><td align="center">128</td><td align="center">120</td><td align="center">105</td><td align="center">45</td><td align="center">-</td></tr><tr><td align="center">136</td><td align="center">月  日</td><td align="center"></td><td align="center">135</td><td align="center">134</td><td align="center">132</td><td align="center">129</td><td align="center">121</td><td align="center">106</td><td align="center">46</td><td align="center">-</td></tr><tr><td align="center">137</td><td align="center">月  日</td><td align="center"></td><td align="center">136</td><td align="center">135</td><td align="center">133</td><td align="center">130</td><td align="center">122</td><td align="center">107</td><td align="center">47</td><td align="center">-</td></tr><tr><td align="center">138</td><td align="center">月  日</td><td align="center"></td><td align="center">137</td><td align="center">136</td><td align="center">134</td><td align="center">131</td><td align="center">123</td><td align="center">108</td><td align="center">48</td><td align="center">-</td></tr><tr><td align="center">139</td><td align="center">月  日</td><td align="center"></td><td align="center">138</td><td align="center">137</td><td align="center">135</td><td align="center">132</td><td align="center">124</td><td align="center">109</td><td align="center">49</td><td align="center">-</td></tr><tr><td align="center">140</td><td align="center">月  日</td><td align="center"></td><td align="center">139</td><td align="center">138</td><td align="center">136</td><td align="center">133</td><td align="center">125</td><td align="center">110</td><td align="center">50</td><td align="center">-</td></tr><tr><td align="center">141</td><td align="center">月  日</td><td align="center"></td><td align="center">140</td><td align="center">139</td><td align="center">137</td><td align="center">134</td><td align="center">126</td><td align="center">111</td><td align="center">51</td><td align="center">-</td></tr><tr><td align="center">142</td><td align="center">月  日</td><td align="center"></td><td align="center">141</td><td align="center">140</td><td align="center">138</td><td align="center">135</td><td align="center">127</td><td align="center">112</td><td align="center">52</td><td align="center">-</td></tr><tr><td align="center">143</td><td align="center">月  日</td><td align="center"></td><td align="center">142</td><td align="center">141</td><td align="center">139</td><td align="center">136</td><td align="center">128</td><td align="center">113</td><td align="center">53</td><td align="center">-</td></tr><tr><td align="center">144</td><td align="center">月  日</td><td align="center"></td><td align="center">143</td><td align="center">142</td><td align="center">140</td><td align="center">137</td><td align="center">129</td><td align="center">114</td><td align="center">54</td><td align="center">-</td></tr><tr><td align="center">145</td><td align="center">月  日</td><td align="center"></td><td align="center">144</td><td align="center">143</td><td align="center">141</td><td align="center">138</td><td align="center">130</td><td align="center">115</td><td align="center">55</td><td align="center">-</td></tr><tr><td align="center">146</td><td align="center">月  日</td><td align="center"></td><td align="center">145</td><td align="center">144</td><td align="center">142</td><td align="center">139</td><td align="center">131</td><td align="center">116</td><td align="center">56</td><td align="center">-</td></tr><tr><td align="center">147</td><td align="center">月  日</td><td align="center"></td><td align="center">146</td><td align="center">145</td><td align="center">143</td><td align="center">140</td><td align="center">132</td><td align="center">117</td><td align="center">57</td><td align="center">-</td></tr><tr><td align="center">148</td><td align="center">月  日</td><td align="center"></td><td align="center">147</td><td align="center">146</td><td align="center">144</td><td align="center">141</td><td align="center">133</td><td align="center">118</td><td align="center">58</td><td align="center">-</td></tr><tr><td align="center">149</td><td align="center">月  日</td><td align="center"></td><td align="center">148</td><td align="center">147</td><td align="center">145</td><td align="center">142</td><td align="center">134</td><td align="center">119</td><td align="center">59</td><td align="center">-</td></tr><tr><td align="center">150</td><td align="center">月  日</td><td align="center"></td><td align="center">149</td><td align="center">148</td><td align="center">146</td><td align="center">143</td><td align="center">135</td><td align="center">120</td><td align="center">60</td><td align="center">-</td></tr><tr><td align="center">151</td><td align="center">月  日</td><td align="center"></td><td align="center">150</td><td align="center">149</td><td align="center">147</td><td align="center">144</td><td align="center">136</td><td align="center">121</td><td align="center">61</td><td align="center">-</td></tr><tr><td align="center">152</td><td align="center">月  日</td><td align="center"></td><td align="center">151</td><td align="center">150</td><td align="center">148</td><td align="center">145</td><td align="center">137</td><td align="center">122</td><td align="center">62</td><td align="center">-</td></tr><tr><td align="center">153</td><td align="center">月  日</td><td align="center"></td><td align="center">152</td><td align="center">151</td><td align="center">149</td><td align="center">146</td><td align="center">138</td><td align="center">123</td><td align="center">63</td><td align="center">-</td></tr><tr><td align="center">154</td><td align="center">月  日</td><td align="center"></td><td align="center">153</td><td align="center">152</td><td align="center">150</td><td align="center">147</td><td align="center">139</td><td align="center">124</td><td align="center">64</td><td align="center">-</td></tr><tr><td align="center">155</td><td align="center">月  日</td><td align="center"></td><td align="center">154</td><td align="center">153</td><td align="center">151</td><td align="center">148</td><td align="center">140</td><td align="center">125</td><td align="center">65</td><td align="center">-</td></tr><tr><td align="center">156</td><td align="center">月  日</td><td align="center"></td><td align="center">155</td><td align="center">154</td><td align="center">152</td><td align="center">149</td><td align="center">141</td><td align="center">126</td><td align="center">66</td><td align="center">-</td></tr><tr><td align="center">157</td><td align="center">月  日</td><td align="center"></td><td align="center">156</td><td align="center">155</td><td align="center">153</td><td align="center">150</td><td align="center">142</td><td align="center">127</td><td align="center">67</td><td align="center">-</td></tr><tr><td align="center">158</td><td align="center">月  日</td><td align="center"></td><td align="center">157</td><td align="center">156</td><td align="center">154</td><td align="center">151</td><td align="center">143</td><td align="center">128</td><td align="center">68</td><td align="center">-</td></tr><tr><td align="center">159</td><td align="center">月  日</td><td align="center"></td><td align="center">158</td><td align="center">157</td><td align="center">155</td><td align="center">152</td><td align="center">144</td><td align="center">129</td><td align="center">69</td><td align="center">-</td></tr><tr><td align="center">160</td><td align="center">月  日</td><td align="center"></td><td align="center">159</td><td align="center">158</td><td align="center">156</td><td align="center">153</td><td align="center">145</td><td align="center">130</td><td align="center">70</td><td align="center">-</td></tr><tr><td align="center">161</td><td align="center">月  日</td><td align="center"></td><td align="center">160</td><td align="center">159</td><td align="center">157</td><td align="center">154</td><td align="center">146</td><td align="center">131</td><td align="center">71</td><td align="center">-</td></tr><tr><td align="center">162</td><td align="center">月  日</td><td align="center"></td><td align="center">161</td><td align="center">160</td><td align="center">158</td><td align="center">155</td><td align="center">147</td><td align="center">132</td><td align="center">72</td><td align="center">-</td></tr><tr><td align="center">163</td><td align="center">月  日</td><td align="center"></td><td align="center">162</td><td align="center">161</td><td align="center">159</td><td align="center">156</td><td align="center">148</td><td align="center">133</td><td align="center">73</td><td align="center">-</td></tr><tr><td align="center">164</td><td align="center">月  日</td><td align="center"></td><td align="center">163</td><td align="center">162</td><td align="center">160</td><td align="center">157</td><td align="center">149</td><td align="center">134</td><td align="center">74</td><td align="center">-</td></tr><tr><td align="center">165</td><td align="center">月  日</td><td align="center"></td><td align="center">164</td><td align="center">163</td><td align="center">161</td><td align="center">158</td><td align="center">150</td><td align="center">135</td><td align="center">75</td><td align="center">-</td></tr><tr><td align="center">166</td><td align="center">月  日</td><td align="center"></td><td align="center">165</td><td align="center">164</td><td align="center">162</td><td align="center">159</td><td align="center">151</td><td align="center">136</td><td align="center">76</td><td align="center">-</td></tr><tr><td align="center">167</td><td align="center">月  日</td><td align="center"></td><td align="center">166</td><td align="center">165</td><td align="center">163</td><td align="center">160</td><td align="center">152</td><td align="center">137</td><td align="center">77</td><td align="center">-</td></tr><tr><td align="center">168</td><td align="center">月  日</td><td align="center"></td><td align="center">167</td><td align="center">166</td><td align="center">164</td><td align="center">161</td><td align="center">153</td><td align="center">138</td><td align="center">78</td><td align="center">-</td></tr><tr><td align="center">169</td><td align="center">月  日</td><td align="center"></td><td align="center">168</td><td align="center">167</td><td align="center">165</td><td align="center">162</td><td align="center">154</td><td align="center">139</td><td align="center">79</td><td align="center">-</td></tr><tr><td align="center">170</td><td align="center">月  日</td><td align="center"></td><td align="center">169</td><td align="center">168</td><td align="center">166</td><td align="center">163</td><td align="center">155</td><td align="center">140</td><td align="center">80</td><td align="center">-</td></tr><tr><td align="center">171</td><td align="center">月  日</td><td align="center"></td><td align="center">170</td><td align="center">169</td><td align="center">167</td><td align="center">164</td><td align="center">156</td><td align="center">141</td><td align="center">81</td><td align="center">-</td></tr><tr><td align="center">172</td><td align="center">月  日</td><td align="center"></td><td align="center">171</td><td align="center">170</td><td align="center">168</td><td align="center">165</td><td align="center">157</td><td align="center">142</td><td align="center">82</td><td align="center">-</td></tr><tr><td align="center">173</td><td align="center">月  日</td><td align="center"></td><td align="center">172</td><td align="center">171</td><td align="center">169</td><td align="center">166</td><td align="center">158</td><td align="center">143</td><td align="center">83</td><td align="center">-</td></tr><tr><td align="center">174</td><td align="center">月  日</td><td align="center"></td><td align="center">173</td><td align="center">172</td><td align="center">170</td><td align="center">167</td><td align="center">159</td><td align="center">144</td><td align="center">84</td><td align="center">-</td></tr><tr><td align="center">175</td><td align="center">月  日</td><td align="center"></td><td align="center">174</td><td align="center">173</td><td align="center">171</td><td align="center">168</td><td align="center">160</td><td align="center">145</td><td align="center">85</td><td align="center">-</td></tr><tr><td align="center">176</td><td align="center">月  日</td><td align="center"></td><td align="center">175</td><td align="center">174</td><td align="center">172</td><td align="center">169</td><td align="center">161</td><td align="center">146</td><td align="center">86</td><td align="center">-</td></tr><tr><td align="center">177</td><td align="center">月  日</td><td align="center"></td><td align="center">176</td><td align="center">175</td><td align="center">173</td><td align="center">170</td><td align="center">162</td><td align="center">147</td><td align="center">87</td><td align="center">-</td></tr><tr><td align="center">178</td><td align="center">月  日</td><td align="center"></td><td align="center">177</td><td align="center">176</td><td align="center">174</td><td align="center">171</td><td align="center">163</td><td align="center">148</td><td align="center">88</td><td align="center">-</td></tr><tr><td align="center">179</td><td align="center">月  日</td><td align="center"></td><td align="center">178</td><td align="center">177</td><td align="center">175</td><td align="center">172</td><td align="center">164</td><td align="center">149</td><td align="center">89</td><td align="center">-</td></tr><tr><td align="center">180</td><td align="center">月  日</td><td align="center"></td><td align="center">179</td><td align="center">178</td><td align="center">176</td><td align="center">173</td><td align="center">165</td><td align="center">150</td><td align="center">90</td><td align="center">1</td></tr><tr><td align="center">181</td><td align="center">月  日</td><td align="center"></td><td align="center">180</td><td align="center">179</td><td align="center">177</td><td align="center">174</td><td align="center">166</td><td align="center">151</td><td align="center">91</td><td align="center">2</td></tr><tr><td align="center">182</td><td align="center">月  日</td><td align="center"></td><td align="center">181</td><td align="center">180</td><td align="center">178</td><td align="center">175</td><td align="center">167</td><td align="center">152</td><td align="center">92</td><td align="center">3</td></tr><tr><td align="center">183</td><td align="center">月  日</td><td align="center"></td><td align="center">182</td><td align="center">181</td><td align="center">179</td><td align="center">176</td><td align="center">168</td><td align="center">153</td><td align="center">93</td><td align="center">4</td></tr><tr><td align="center">184</td><td align="center">月  日</td><td align="center"></td><td align="center">183</td><td align="center">182</td><td align="center">180</td><td align="center">177</td><td align="center">169</td><td align="center">154</td><td align="center">94</td><td align="center">5</td></tr><tr><td align="center">185</td><td align="center">月  日</td><td align="center"></td><td align="center">184</td><td align="center">183</td><td align="center">181</td><td align="center">178</td><td align="center">170</td><td align="center">155</td><td align="center">95</td><td align="center">6</td></tr><tr><td align="center">186</td><td align="center">月  日</td><td align="center"></td><td align="center">185</td><td align="center">184</td><td align="center">182</td><td align="center">179</td><td align="center">171</td><td align="center">156</td><td align="center">96</td><td align="center">7</td></tr><tr><td align="center">187</td><td align="center">月  日</td><td align="center"></td><td align="center">186</td><td align="center">185</td><td align="center">183</td><td align="center">180</td><td align="center">172</td><td align="center">157</td><td align="center">97</td><td align="center">8</td></tr><tr><td align="center">188</td><td align="center">月  日</td><td align="center"></td><td align="center">187</td><td align="center">186</td><td align="center">184</td><td align="center">181</td><td align="center">173</td><td align="center">158</td><td align="center">98</td><td align="center">9</td></tr><tr><td align="center">189</td><td align="center">月  日</td><td align="center"></td><td align="center">188</td><td align="center">187</td><td align="center">185</td><td align="center">182</td><td align="center">174</td><td align="center">159</td><td align="center">99</td><td align="center">10</td></tr><tr><td align="center">190</td><td align="center">月  日</td><td align="center"></td><td align="center">189</td><td align="center">188</td><td align="center">186</td><td align="center">183</td><td align="center">175</td><td align="center">160</td><td align="center">100</td><td align="center">11</td></tr><tr><td align="center">191</td><td align="center">月  日</td><td align="center"></td><td align="center">190</td><td align="center">189</td><td align="center">187</td><td align="center">184</td><td align="center">176</td><td align="center">161</td><td align="center">101</td><td align="center">12</td></tr><tr><td align="center">192</td><td align="center">月  日</td><td align="center"></td><td align="center">191</td><td align="center">190</td><td align="center">188</td><td align="center">185</td><td align="center">177</td><td align="center">162</td><td align="center">102</td><td align="center">13</td></tr><tr><td align="center">193</td><td align="center">月  日</td><td align="center"></td><td align="center">192</td><td align="center">191</td><td align="center">189</td><td align="center">186</td><td align="center">178</td><td align="center">163</td><td align="center">103</td><td align="center">14</td></tr><tr><td align="center">194</td><td align="center">月  日</td><td align="center"></td><td align="center">193</td><td align="center">192</td><td align="center">190</td><td align="center">187</td><td align="center">179</td><td align="center">164</td><td align="center">104</td><td align="center">15</td></tr><tr><td align="center">195</td><td align="center">月  日</td><td align="center"></td><td align="center">194</td><td align="center">193</td><td align="center">191</td><td align="center">188</td><td align="center">180</td><td align="center">165</td><td align="center">105</td><td align="center">16</td></tr><tr><td align="center">196</td><td align="center">月  日</td><td align="center"></td><td align="center">195</td><td align="center">194</td><td align="center">192</td><td align="center">189</td><td align="center">181</td><td align="center">166</td><td align="center">106</td><td align="center">17</td></tr><tr><td align="center">197</td><td align="center">月  日</td><td align="center"></td><td align="center">196</td><td align="center">195</td><td align="center">193</td><td align="center">190</td><td align="center">182</td><td align="center">167</td><td align="center">107</td><td align="center">18</td></tr><tr><td align="center">198</td><td align="center">月  日</td><td align="center"></td><td align="center">197</td><td align="center">196</td><td align="center">194</td><td align="center">191</td><td align="center">183</td><td align="center">168</td><td align="center">108</td><td align="center">19</td></tr><tr><td align="center">199</td><td align="center">月  日</td><td align="center"></td><td align="center">198</td><td align="center">197</td><td align="center">195</td><td align="center">192</td><td align="center">184</td><td align="center">169</td><td align="center">109</td><td align="center">20</td></tr><tr><td align="center">200</td><td align="center">月  日</td><td align="center"></td><td align="center">199</td><td align="center">198</td><td align="center">196</td><td align="center">193</td><td align="center">185</td><td align="center">170</td><td align="center">110</td><td align="center">21</td></tr><tr><td align="center">201</td><td align="center">月  日</td><td align="center"></td><td align="center">200</td><td align="center">199</td><td align="center">197</td><td align="center">194</td><td align="center">186</td><td align="center">171</td><td align="center">111</td><td align="center">22</td></tr><tr><td align="center">202</td><td align="center">月  日</td><td align="center"></td><td align="center">201</td><td align="center">200</td><td align="center">198</td><td align="center">195</td><td align="center">187</td><td align="center">172</td><td align="center">112</td><td align="center">23</td></tr><tr><td align="center">203</td><td align="center">月  日</td><td align="center"></td><td align="center">202</td><td align="center">201</td><td align="center">199</td><td align="center">196</td><td align="center">188</td><td align="center">173</td><td align="center">113</td><td align="center">24</td></tr><tr><td align="center">204</td><td align="center">月  日</td><td align="center"></td><td align="center">203</td><td align="center">202</td><td align="center">200</td><td align="center">197</td><td align="center">189</td><td align="center">174</td><td align="center">114</td><td align="center">25</td></tr><tr><td align="center">205</td><td align="center">月  日</td><td align="center"></td><td align="center">204</td><td align="center">203</td><td align="center">201</td><td align="center">198</td><td align="center">190</td><td align="center">175</td><td align="center">115</td><td align="center">26</td></tr><tr><td align="center">206</td><td align="center">月  日</td><td align="center"></td><td align="center">205</td><td align="center">204</td><td align="center">202</td><td align="center">199</td><td align="center">191</td><td align="center">176</td><td align="center">116</td><td align="center">27</td></tr><tr><td align="center">207</td><td align="center">月  日</td><td align="center"></td><td align="center">206</td><td align="center">205</td><td align="center">203</td><td align="center">200</td><td align="center">192</td><td align="center">177</td><td align="center">117</td><td align="center">28</td></tr><tr><td align="center">208</td><td align="center">月  日</td><td align="center"></td><td align="center">207</td><td align="center">206</td><td align="center">204</td><td align="center">201</td><td align="center">193</td><td align="center">178</td><td align="center">118</td><td align="center">29</td></tr><tr><td align="center">209</td><td align="center">月  日</td><td align="center"></td><td align="center">208</td><td align="center">207</td><td align="center">205</td><td align="center">202</td><td align="center">194</td><td align="center">179</td><td align="center">119</td><td align="center">30</td></tr><tr><td align="center">210</td><td align="center">月  日</td><td align="center"></td><td align="center">209</td><td align="center">208</td><td align="center">206</td><td align="center">203</td><td align="center">195</td><td align="center">180</td><td align="center">120</td><td align="center">31</td></tr><tr><td align="center">211</td><td align="center">月  日</td><td align="center"></td><td align="center">210</td><td align="center">209</td><td align="center">207</td><td align="center">204</td><td align="center">196</td><td align="center">181</td><td align="center">121</td><td align="center">32</td></tr><tr><td align="center">212</td><td align="center">月  日</td><td align="center"></td><td align="center">211</td><td align="center">210</td><td align="center">208</td><td align="center">205</td><td align="center">197</td><td align="center">182</td><td align="center">122</td><td align="center">33</td></tr><tr><td align="center">213</td><td align="center">月  日</td><td align="center"></td><td align="center">212</td><td align="center">211</td><td align="center">209</td><td align="center">206</td><td align="center">198</td><td align="center">183</td><td align="center">123</td><td align="center">34</td></tr><tr><td align="center">214</td><td align="center">月  日</td><td align="center"></td><td align="center">213</td><td align="center">212</td><td align="center">210</td><td align="center">207</td><td align="center">199</td><td align="center">184</td><td align="center">124</td><td align="center">35</td></tr><tr><td align="center">215</td><td align="center">月  日</td><td align="center"></td><td align="center">214</td><td align="center">213</td><td align="center">211</td><td align="center">208</td><td align="center">200</td><td align="center">185</td><td align="center">125</td><td align="center">36</td></tr><tr><td align="center">216</td><td align="center">月  日</td><td align="center"></td><td align="center">215</td><td align="center">214</td><td align="center">212</td><td align="center">209</td><td align="center">201</td><td align="center">186</td><td align="center">126</td><td align="center">37</td></tr><tr><td align="center">217</td><td align="center">月  日</td><td align="center"></td><td align="center">216</td><td align="center">215</td><td align="center">213</td><td align="center">210</td><td align="center">202</td><td align="center">187</td><td align="center">127</td><td align="center">38</td></tr><tr><td align="center">218</td><td align="center">月  日</td><td align="center"></td><td align="center">217</td><td align="center">216</td><td align="center">214</td><td align="center">211</td><td align="center">203</td><td align="center">188</td><td align="center">128</td><td align="center">39</td></tr><tr><td align="center">219</td><td align="center">月  日</td><td align="center"></td><td align="center">218</td><td align="center">217</td><td align="center">215</td><td align="center">212</td><td align="center">204</td><td align="center">189</td><td align="center">129</td><td align="center">40</td></tr><tr><td align="center">220</td><td align="center">月  日</td><td align="center"></td><td align="center">219</td><td align="center">218</td><td align="center">216</td><td align="center">213</td><td align="center">205</td><td align="center">190</td><td align="center">130</td><td align="center">41</td></tr><tr><td align="center">221</td><td align="center">月  日</td><td align="center"></td><td align="center">220</td><td align="center">219</td><td align="center">217</td><td align="center">214</td><td align="center">206</td><td align="center">191</td><td align="center">131</td><td align="center">42</td></tr><tr><td align="center">222</td><td align="center">月  日</td><td align="center"></td><td align="center">221</td><td align="center">220</td><td align="center">218</td><td align="center">215</td><td align="center">207</td><td align="center">192</td><td align="center">132</td><td align="center">43</td></tr><tr><td align="center">223</td><td align="center">月  日</td><td align="center"></td><td align="center">222</td><td align="center">221</td><td align="center">219</td><td align="center">216</td><td align="center">208</td><td align="center">193</td><td align="center">133</td><td align="center">44</td></tr><tr><td align="center">224</td><td align="center">月  日</td><td align="center"></td><td align="center">223</td><td align="center">222</td><td align="center">220</td><td align="center">217</td><td align="center">209</td><td align="center">194</td><td align="center">134</td><td align="center">45</td></tr><tr><td align="center">225</td><td align="center">月  日</td><td align="center"></td><td align="center">224</td><td align="center">223</td><td align="center">221</td><td align="center">218</td><td align="center">210</td><td align="center">195</td><td align="center">135</td><td align="center">46</td></tr><tr><td align="center">226</td><td align="center">月  日</td><td align="center"></td><td align="center">225</td><td align="center">224</td><td align="center">222</td><td align="center">219</td><td align="center">211</td><td align="center">196</td><td align="center">136</td><td align="center">47</td></tr><tr><td align="center">227</td><td align="center">月  日</td><td align="center"></td><td align="center">226</td><td align="center">225</td><td align="center">223</td><td align="center">220</td><td align="center">212</td><td align="center">197</td><td align="center">137</td><td align="center">48</td></tr><tr><td align="center">228</td><td align="center">月  日</td><td align="center"></td><td align="center">227</td><td align="center">226</td><td align="center">224</td><td align="center">221</td><td align="center">213</td><td align="center">198</td><td align="center">138</td><td align="center">49</td></tr><tr><td align="center">229</td><td align="center">月  日</td><td align="center"></td><td align="center">228</td><td align="center">227</td><td align="center">225</td><td align="center">222</td><td align="center">214</td><td align="center">199</td><td align="center">139</td><td align="center">50</td></tr><tr><td align="center">230</td><td align="center">月  日</td><td align="center"></td><td align="center">229</td><td align="center">228</td><td align="center">226</td><td align="center">223</td><td align="center">215</td><td align="center">200</td><td align="center">140</td><td align="center">51</td></tr><tr><td align="center">231</td><td align="center">月  日</td><td align="center"></td><td align="center">230</td><td align="center">229</td><td align="center">227</td><td align="center">224</td><td align="center">216</td><td align="center">201</td><td align="center">141</td><td align="center">52</td></tr><tr><td align="center">232</td><td align="center">月  日</td><td align="center"></td><td align="center">231</td><td align="center">230</td><td align="center">228</td><td align="center">225</td><td align="center">217</td><td align="center">202</td><td align="center">142</td><td align="center">53</td></tr><tr><td align="center">233</td><td align="center">月  日</td><td align="center"></td><td align="center">232</td><td align="center">231</td><td align="center">229</td><td align="center">226</td><td align="center">218</td><td align="center">203</td><td align="center">143</td><td align="center">54</td></tr><tr><td align="center">234</td><td align="center">月  日</td><td align="center"></td><td align="center">233</td><td align="center">232</td><td align="center">230</td><td align="center">227</td><td align="center">219</td><td align="center">204</td><td align="center">144</td><td align="center">55</td></tr><tr><td align="center">235</td><td align="center">月  日</td><td align="center"></td><td align="center">234</td><td align="center">233</td><td align="center">231</td><td align="center">228</td><td align="center">220</td><td align="center">205</td><td align="center">145</td><td align="center">56</td></tr><tr><td align="center">236</td><td align="center">月  日</td><td align="center"></td><td align="center">235</td><td align="center">234</td><td align="center">232</td><td align="center">229</td><td align="center">221</td><td align="center">206</td><td align="center">146</td><td align="center">57</td></tr><tr><td align="center">237</td><td align="center">月  日</td><td align="center"></td><td align="center">236</td><td align="center">235</td><td align="center">233</td><td align="center">230</td><td align="center">222</td><td align="center">207</td><td align="center">147</td><td align="center">58</td></tr><tr><td align="center">238</td><td align="center">月  日</td><td align="center"></td><td align="center">237</td><td align="center">236</td><td align="center">234</td><td align="center">231</td><td align="center">223</td><td align="center">208</td><td align="center">148</td><td align="center">59</td></tr><tr><td align="center">239</td><td align="center">月  日</td><td align="center"></td><td align="center">238</td><td align="center">237</td><td align="center">235</td><td align="center">232</td><td align="center">224</td><td align="center">209</td><td align="center">149</td><td align="center">60</td></tr><tr><td align="center">240</td><td align="center">月  日</td><td align="center"></td><td align="center">239</td><td align="center">238</td><td align="center">236</td><td align="center">233</td><td align="center">225</td><td align="center">210</td><td align="center">150</td><td align="center">61</td></tr><tr><td align="center">241</td><td align="center">月  日</td><td align="center"></td><td align="center">240</td><td align="center">239</td><td align="center">237</td><td align="center">234</td><td align="center">226</td><td align="center">211</td><td align="center">151</td><td align="center">62</td></tr><tr><td align="center">242</td><td align="center">月  日</td><td align="center"></td><td align="center">241</td><td align="center">240</td><td align="center">238</td><td align="center">235</td><td align="center">227</td><td align="center">212</td><td align="center">152</td><td align="center">63</td></tr><tr><td align="center">243</td><td align="center">月  日</td><td align="center"></td><td align="center">242</td><td align="center">241</td><td align="center">239</td><td align="center">236</td><td align="center">228</td><td align="center">213</td><td align="center">153</td><td align="center">64</td></tr><tr><td align="center">244</td><td align="center">月  日</td><td align="center"></td><td align="center">243</td><td align="center">242</td><td align="center">240</td><td align="center">237</td><td align="center">229</td><td align="center">214</td><td align="center">154</td><td align="center">65</td></tr><tr><td align="center">245</td><td align="center">月  日</td><td align="center"></td><td align="center">244</td><td align="center">243</td><td align="center">241</td><td align="center">238</td><td align="center">230</td><td align="center">215</td><td align="center">155</td><td align="center">66</td></tr><tr><td align="center">246</td><td align="center">月  日</td><td align="center"></td><td align="center">245</td><td align="center">244</td><td align="center">242</td><td align="center">239</td><td align="center">231</td><td align="center">216</td><td align="center">156</td><td align="center">67</td></tr><tr><td align="center">247</td><td align="center">月  日</td><td align="center"></td><td align="center">246</td><td align="center">245</td><td align="center">243</td><td align="center">240</td><td align="center">232</td><td align="center">217</td><td align="center">157</td><td align="center">68</td></tr><tr><td align="center">248</td><td align="center">月  日</td><td align="center"></td><td align="center">247</td><td align="center">246</td><td align="center">244</td><td align="center">241</td><td align="center">233</td><td align="center">218</td><td align="center">158</td><td align="center">69</td></tr><tr><td align="center">249</td><td align="center">月  日</td><td align="center"></td><td align="center">248</td><td align="center">247</td><td align="center">245</td><td align="center">242</td><td align="center">234</td><td align="center">219</td><td align="center">159</td><td align="center">70</td></tr><tr><td align="center">250</td><td align="center">月  日</td><td align="center"></td><td align="center">249</td><td align="center">248</td><td align="center">246</td><td align="center">243</td><td align="center">235</td><td align="center">220</td><td align="center">160</td><td align="center">71</td></tr><tr><td align="center">251</td><td align="center">月  日</td><td align="center"></td><td align="center">250</td><td align="center">249</td><td align="center">247</td><td align="center">244</td><td align="center">236</td><td align="center">221</td><td align="center">161</td><td align="center">72</td></tr><tr><td align="center">252</td><td align="center">月  日</td><td align="center"></td><td align="center">251</td><td align="center">250</td><td align="center">248</td><td align="center">245</td><td align="center">237</td><td align="center">222</td><td align="center">162</td><td align="center">73</td></tr><tr><td align="center">253</td><td align="center">月  日</td><td align="center"></td><td align="center">252</td><td align="center">251</td><td align="center">249</td><td align="center">246</td><td align="center">238</td><td align="center">223</td><td align="center">163</td><td align="center">74</td></tr><tr><td align="center">254</td><td align="center">月  日</td><td align="center"></td><td align="center">253</td><td align="center">252</td><td align="center">250</td><td align="center">247</td><td align="center">239</td><td align="center">224</td><td align="center">164</td><td align="center">75</td></tr><tr><td align="center">255</td><td align="center">月  日</td><td align="center"></td><td align="center">254</td><td align="center">253</td><td align="center">251</td><td align="center">248</td><td align="center">240</td><td align="center">225</td><td align="center">165</td><td align="center">76</td></tr><tr><td align="center">256</td><td align="center">月  日</td><td align="center"></td><td align="center">255</td><td align="center">254</td><td align="center">252</td><td align="center">249</td><td align="center">241</td><td align="center">226</td><td align="center">166</td><td align="center">77</td></tr><tr><td align="center">257</td><td align="center">月  日</td><td align="center"></td><td align="center">256</td><td align="center">255</td><td align="center">253</td><td align="center">250</td><td align="center">242</td><td align="center">227</td><td align="center">167</td><td align="center">78</td></tr><tr><td align="center">258</td><td align="center">月  日</td><td align="center"></td><td align="center">257</td><td align="center">256</td><td align="center">254</td><td align="center">251</td><td align="center">243</td><td align="center">228</td><td align="center">168</td><td align="center">79</td></tr><tr><td align="center">259</td><td align="center">月  日</td><td align="center"></td><td align="center">258</td><td align="center">257</td><td align="center">255</td><td align="center">252</td><td align="center">244</td><td align="center">229</td><td align="center">169</td><td align="center">80</td></tr><tr><td align="center">260</td><td align="center">月  日</td><td align="center"></td><td align="center">259</td><td align="center">258</td><td align="center">256</td><td align="center">253</td><td align="center">245</td><td align="center">230</td><td align="center">170</td><td align="center">81</td></tr><tr><td align="center">261</td><td align="center">月  日</td><td align="center"></td><td align="center">260</td><td align="center">259</td><td align="center">257</td><td align="center">254</td><td align="center">246</td><td align="center">231</td><td align="center">171</td><td align="center">82</td></tr><tr><td align="center">262</td><td align="center">月  日</td><td align="center"></td><td align="center">261</td><td align="center">260</td><td align="center">258</td><td align="center">255</td><td align="center">247</td><td align="center">232</td><td align="center">172</td><td align="center">83</td></tr><tr><td align="center">263</td><td align="center">月  日</td><td align="center"></td><td align="center">262</td><td align="center">261</td><td align="center">259</td><td align="center">256</td><td align="center">248</td><td align="center">233</td><td align="center">173</td><td align="center">84</td></tr><tr><td align="center">264</td><td align="center">月  日</td><td align="center"></td><td align="center">263</td><td align="center">262</td><td align="center">260</td><td align="center">257</td><td align="center">249</td><td align="center">234</td><td align="center">174</td><td align="center">85</td></tr><tr><td align="center">265</td><td align="center">月  日</td><td align="center"></td><td align="center">264</td><td align="center">263</td><td align="center">261</td><td align="center">258</td><td align="center">250</td><td align="center">235</td><td align="center">175</td><td align="center">86</td></tr><tr><td align="center">266</td><td align="center">月  日</td><td align="center"></td><td align="center">265</td><td align="center">264</td><td align="center">262</td><td align="center">259</td><td align="center">251</td><td align="center">236</td><td align="center">176</td><td align="center">87</td></tr><tr><td align="center">267</td><td align="center">月  日</td><td align="center"></td><td align="center">266</td><td align="center">265</td><td align="center">263</td><td align="center">260</td><td align="center">252</td><td align="center">237</td><td align="center">177</td><td align="center">88</td></tr><tr><td align="center">268</td><td align="center">月  日</td><td align="center"></td><td align="center">267</td><td align="center">266</td><td align="center">264</td><td align="center">261</td><td align="center">253</td><td align="center">238</td><td align="center">178</td><td align="center">89</td></tr><tr><td align="center">269</td><td align="center">月  日</td><td align="center"></td><td align="center">268</td><td align="center">267</td><td align="center">265</td><td align="center">262</td><td align="center">254</td><td align="center">239</td><td align="center">179</td><td align="center">90</td></tr><tr><td align="center">270</td><td align="center">月  日</td><td align="center"></td><td align="center">269</td><td align="center">268</td><td align="center">266</td><td align="center">263</td><td align="center">255</td><td align="center">240</td><td align="center">180</td><td align="center">91</td></tr><tr><td align="center">271</td><td align="center">月  日</td><td align="center"></td><td align="center">270</td><td align="center">269</td><td align="center">267</td><td align="center">264</td><td align="center">256</td><td align="center">241</td><td align="center">181</td><td align="center">92</td></tr><tr><td align="center">272</td><td align="center">月  日</td><td align="center"></td><td align="center">271</td><td align="center">270</td><td align="center">268</td><td align="center">265</td><td align="center">257</td><td align="center">242</td><td align="center">182</td><td align="center">93</td></tr><tr><td align="center">273</td><td align="center">月  日</td><td align="center"></td><td align="center">272</td><td align="center">271</td><td align="center">269</td><td align="center">266</td><td align="center">258</td><td align="center">243</td><td align="center">183</td><td align="center">94</td></tr><tr><td align="center">274</td><td align="center">月  日</td><td align="center"></td><td align="center">273</td><td align="center">272</td><td align="center">270</td><td align="center">267</td><td align="center">259</td><td align="center">244</td><td align="center">184</td><td align="center">95</td></tr><tr><td align="center">275</td><td align="center">月  日</td><td align="center"></td><td align="center">274</td><td align="center">273</td><td align="center">271</td><td align="center">268</td><td align="center">260</td><td align="center">245</td><td align="center">185</td><td align="center">96</td></tr><tr><td align="center">276</td><td align="center">月  日</td><td align="center"></td><td align="center">275</td><td align="center">274</td><td align="center">272</td><td align="center">269</td><td align="center">261</td><td align="center">246</td><td align="center">186</td><td align="center">97</td></tr><tr><td align="center">277</td><td align="center">月  日</td><td align="center"></td><td align="center">276</td><td align="center">275</td><td align="center">273</td><td align="center">270</td><td align="center">262</td><td align="center">247</td><td align="center">187</td><td align="center">98</td></tr><tr><td align="center">278</td><td align="center">月  日</td><td align="center"></td><td align="center">277</td><td align="center">276</td><td align="center">274</td><td align="center">271</td><td align="center">263</td><td align="center">248</td><td align="center">188</td><td align="center">99</td></tr><tr><td align="center">279</td><td align="center">月  日</td><td align="center"></td><td align="center">278</td><td align="center">277</td><td align="center">275</td><td align="center">272</td><td align="center">264</td><td align="center">249</td><td align="center">189</td><td align="center">100</td></tr><tr><td align="center">280</td><td align="center">月  日</td><td align="center"></td><td align="center">279</td><td align="center">278</td><td align="center">276</td><td align="center">273</td><td align="center">265</td><td align="center">250</td><td align="center">190</td><td align="center">101</td></tr><tr><td align="center">281</td><td align="center">月  日</td><td align="center"></td><td align="center">280</td><td align="center">279</td><td align="center">277</td><td align="center">274</td><td align="center">266</td><td align="center">251</td><td align="center">191</td><td align="center">102</td></tr><tr><td align="center">282</td><td align="center">月  日</td><td align="center"></td><td align="center">281</td><td align="center">280</td><td align="center">278</td><td align="center">275</td><td align="center">267</td><td align="center">252</td><td align="center">192</td><td align="center">103</td></tr><tr><td align="center">283</td><td align="center">月  日</td><td align="center"></td><td align="center">282</td><td align="center">281</td><td align="center">279</td><td align="center">276</td><td align="center">268</td><td align="center">253</td><td align="center">193</td><td align="center">104</td></tr><tr><td align="center">284</td><td align="center">月  日</td><td align="center"></td><td align="center">283</td><td align="center">282</td><td align="center">280</td><td align="center">277</td><td align="center">269</td><td align="center">254</td><td align="center">194</td><td align="center">105</td></tr><tr><td align="center">285</td><td align="center">月  日</td><td align="center"></td><td align="center">284</td><td align="center">283</td><td align="center">281</td><td align="center">278</td><td align="center">270</td><td align="center">255</td><td align="center">195</td><td align="center">106</td></tr><tr><td align="center">286</td><td align="center">月  日</td><td align="center"></td><td align="center">285</td><td align="center">284</td><td align="center">282</td><td align="center">279</td><td align="center">271</td><td align="center">256</td><td align="center">196</td><td align="center">107</td></tr><tr><td align="center">287</td><td align="center">月  日</td><td align="center"></td><td align="center">286</td><td align="center">285</td><td align="center">283</td><td align="center">280</td><td align="center">272</td><td align="center">257</td><td align="center">197</td><td align="center">108</td></tr><tr><td align="center">288</td><td align="center">月  日</td><td align="center"></td><td align="center">287</td><td align="center">286</td><td align="center">284</td><td align="center">281</td><td align="center">273</td><td align="center">258</td><td align="center">198</td><td align="center">109</td></tr><tr><td align="center">289</td><td align="center">月  日</td><td align="center"></td><td align="center">288</td><td align="center">287</td><td align="center">285</td><td align="center">282</td><td align="center">274</td><td align="center">259</td><td align="center">199</td><td align="center">110</td></tr><tr><td align="center">290</td><td align="center">月  日</td><td align="center"></td><td align="center">289</td><td align="center">288</td><td align="center">286</td><td align="center">283</td><td align="center">275</td><td align="center">260</td><td align="center">200</td><td align="center">111</td></tr><tr><td align="center">291</td><td align="center">月  日</td><td align="center"></td><td align="center">290</td><td align="center">289</td><td align="center">287</td><td align="center">284</td><td align="center">276</td><td align="center">261</td><td align="center">201</td><td align="center">112</td></tr><tr><td align="center">292</td><td align="center">月  日</td><td align="center"></td><td align="center">291</td><td align="center">290</td><td align="center">288</td><td align="center">285</td><td align="center">277</td><td align="center">262</td><td align="center">202</td><td align="center">113</td></tr><tr><td align="center">293</td><td align="center">月  日</td><td align="center"></td><td align="center">292</td><td align="center">291</td><td align="center">289</td><td align="center">286</td><td align="center">278</td><td align="center">263</td><td align="center">203</td><td align="center">114</td></tr><tr><td align="center">294</td><td align="center">月  日</td><td align="center"></td><td align="center">293</td><td align="center">292</td><td align="center">290</td><td align="center">287</td><td align="center">279</td><td align="center">264</td><td align="center">204</td><td align="center">115</td></tr><tr><td align="center">295</td><td align="center">月  日</td><td align="center"></td><td align="center">294</td><td align="center">293</td><td align="center">291</td><td align="center">288</td><td align="center">280</td><td align="center">265</td><td align="center">205</td><td align="center">116</td></tr><tr><td align="center">296</td><td align="center">月  日</td><td align="center"></td><td align="center">295</td><td align="center">294</td><td align="center">292</td><td align="center">289</td><td align="center">281</td><td align="center">266</td><td align="center">206</td><td align="center">117</td></tr><tr><td align="center">297</td><td align="center">月  日</td><td align="center"></td><td align="center">296</td><td align="center">295</td><td align="center">293</td><td align="center">290</td><td align="center">282</td><td align="center">267</td><td align="center">207</td><td align="center">118</td></tr><tr><td align="center">298</td><td align="center">月  日</td><td align="center"></td><td align="center">297</td><td align="center">296</td><td align="center">294</td><td align="center">291</td><td align="center">283</td><td align="center">268</td><td align="center">208</td><td align="center">119</td></tr><tr><td align="center">299</td><td align="center">月  日</td><td align="center"></td><td align="center">298</td><td align="center">297</td><td align="center">295</td><td align="center">292</td><td align="center">284</td><td align="center">269</td><td align="center">209</td><td align="center">120</td></tr><tr><td align="center">300</td><td align="center">月  日</td><td align="center"></td><td align="center">299</td><td align="center">298</td><td align="center">296</td><td align="center">293</td><td align="center">285</td><td align="center">270</td><td align="center">210</td><td align="center">121</td></tr><tr><td align="center">301</td><td align="center">月  日</td><td align="center"></td><td align="center">300</td><td align="center">299</td><td align="center">297</td><td align="center">294</td><td align="center">286</td><td align="center">271</td><td align="center">211</td><td align="center">122</td></tr><tr><td align="center">302</td><td align="center">月  日</td><td align="center"></td><td align="center">301</td><td align="center">300</td><td align="center">298</td><td align="center">295</td><td align="center">287</td><td align="center">272</td><td align="center">212</td><td align="center">123</td></tr><tr><td align="center">303</td><td align="center">月  日</td><td align="center"></td><td align="center">302</td><td align="center">301</td><td align="center">299</td><td align="center">296</td><td align="center">288</td><td align="center">273</td><td align="center">213</td><td align="center">124</td></tr><tr><td align="center">304</td><td align="center">月  日</td><td align="center"></td><td align="center">303</td><td align="center">302</td><td align="center">300</td><td align="center">297</td><td align="center">289</td><td align="center">274</td><td align="center">214</td><td align="center">125</td></tr><tr><td align="center">305</td><td align="center">月  日</td><td align="center"></td><td align="center">304</td><td align="center">303</td><td align="center">301</td><td align="center">298</td><td align="center">290</td><td align="center">275</td><td align="center">215</td><td align="center">126</td></tr><tr><td align="center">306</td><td align="center">月  日</td><td align="center"></td><td align="center">305</td><td align="center">304</td><td align="center">302</td><td align="center">299</td><td align="center">291</td><td align="center">276</td><td align="center">216</td><td align="center">127</td></tr><tr><td align="center">307</td><td align="center">月  日</td><td align="center"></td><td align="center">306</td><td align="center">305</td><td align="center">303</td><td align="center">300</td><td align="center">292</td><td align="center">277</td><td align="center">217</td><td align="center">128</td></tr><tr><td align="center">308</td><td align="center">月  日</td><td align="center"></td><td align="center">307</td><td align="center">306</td><td align="center">304</td><td align="center">301</td><td align="center">293</td><td align="center">278</td><td align="center">218</td><td align="center">129</td></tr><tr><td align="center">309</td><td align="center">月  日</td><td align="center"></td><td align="center">308</td><td align="center">307</td><td align="center">305</td><td align="center">302</td><td align="center">294</td><td align="center">279</td><td align="center">219</td><td align="center">130</td></tr><tr><td align="center">310</td><td align="center">月  日</td><td align="center"></td><td align="center">309</td><td align="center">308</td><td align="center">306</td><td align="center">303</td><td align="center">295</td><td align="center">280</td><td align="center">220</td><td align="center">131</td></tr><tr><td align="center">311</td><td align="center">月  日</td><td align="center"></td><td align="center">310</td><td align="center">309</td><td align="center">307</td><td align="center">304</td><td align="center">296</td><td align="center">281</td><td align="center">221</td><td align="center">132</td></tr><tr><td align="center">312</td><td align="center">月  日</td><td align="center"></td><td align="center">311</td><td align="center">310</td><td align="center">308</td><td align="center">305</td><td align="center">297</td><td align="center">282</td><td align="center">222</td><td align="center">133</td></tr><tr><td align="center">313</td><td align="center">月  日</td><td align="center"></td><td align="center">312</td><td align="center">311</td><td align="center">309</td><td align="center">306</td><td align="center">298</td><td align="center">283</td><td align="center">223</td><td align="center">134</td></tr><tr><td align="center">314</td><td align="center">月  日</td><td align="center"></td><td align="center">313</td><td align="center">312</td><td align="center">310</td><td align="center">307</td><td align="center">299</td><td align="center">284</td><td align="center">224</td><td align="center">135</td></tr><tr><td align="center">315</td><td align="center">月  日</td><td align="center"></td><td align="center">314</td><td align="center">313</td><td align="center">311</td><td align="center">308</td><td align="center">300</td><td align="center">285</td><td align="center">225</td><td align="center">136</td></tr><tr><td align="center">316</td><td align="center">月  日</td><td align="center"></td><td align="center">315</td><td align="center">314</td><td align="center">312</td><td align="center">309</td><td align="center">301</td><td align="center">286</td><td align="center">226</td><td align="center">137</td></tr><tr><td align="center">317</td><td align="center">月  日</td><td align="center"></td><td align="center">316</td><td align="center">315</td><td align="center">313</td><td align="center">310</td><td align="center">302</td><td align="center">287</td><td align="center">227</td><td align="center">138</td></tr><tr><td align="center">318</td><td align="center">月  日</td><td align="center"></td><td align="center">317</td><td align="center">316</td><td align="center">314</td><td align="center">311</td><td align="center">303</td><td align="center">288</td><td align="center">228</td><td align="center">139</td></tr><tr><td align="center">319</td><td align="center">月  日</td><td align="center"></td><td align="center">318</td><td align="center">317</td><td align="center">315</td><td align="center">312</td><td align="center">304</td><td align="center">289</td><td align="center">229</td><td align="center">140</td></tr><tr><td align="center">320</td><td align="center">月  日</td><td align="center"></td><td align="center">319</td><td align="center">318</td><td align="center">316</td><td align="center">313</td><td align="center">305</td><td align="center">290</td><td align="center">230</td><td align="center">141</td></tr><tr><td align="center">321</td><td align="center">月  日</td><td align="center"></td><td align="center">320</td><td align="center">319</td><td align="center">317</td><td align="center">314</td><td align="center">306</td><td align="center">291</td><td align="center">231</td><td align="center">142</td></tr><tr><td align="center">322</td><td align="center">月  日</td><td align="center"></td><td align="center">321</td><td align="center">320</td><td align="center">318</td><td align="center">315</td><td align="center">307</td><td align="center">292</td><td align="center">232</td><td align="center">143</td></tr><tr><td align="center">323</td><td align="center">月  日</td><td align="center"></td><td align="center">322</td><td align="center">321</td><td align="center">319</td><td align="center">316</td><td align="center">308</td><td align="center">293</td><td align="center">233</td><td align="center">144</td></tr><tr><td align="center">324</td><td align="center">月  日</td><td align="center"></td><td align="center">323</td><td align="center">322</td><td align="center">320</td><td align="center">317</td><td align="center">309</td><td align="center">294</td><td align="center">234</td><td align="center">145</td></tr><tr><td align="center">325</td><td align="center">月  日</td><td align="center"></td><td align="center">324</td><td align="center">323</td><td align="center">321</td><td align="center">318</td><td align="center">310</td><td align="center">295</td><td align="center">235</td><td align="center">146</td></tr><tr><td align="center">326</td><td align="center">月  日</td><td align="center"></td><td align="center">325</td><td align="center">324</td><td align="center">322</td><td align="center">319</td><td align="center">311</td><td align="center">296</td><td align="center">236</td><td align="center">147</td></tr><tr><td align="center">327</td><td align="center">月  日</td><td align="center"></td><td align="center">326</td><td align="center">325</td><td align="center">323</td><td align="center">320</td><td align="center">312</td><td align="center">297</td><td align="center">237</td><td align="center">148</td></tr><tr><td align="center">328</td><td align="center">月  日</td><td align="center"></td><td align="center">327</td><td align="center">326</td><td align="center">324</td><td align="center">321</td><td align="center">313</td><td align="center">298</td><td align="center">238</td><td align="center">149</td></tr><tr><td align="center">329</td><td align="center">月  日</td><td align="center"></td><td align="center">328</td><td align="center">327</td><td align="center">325</td><td align="center">322</td><td align="center">314</td><td align="center">299</td><td align="center">239</td><td align="center">150</td></tr><tr><td align="center">330</td><td align="center">月  日</td><td align="center"></td><td align="center">329</td><td align="center">328</td><td align="center">326</td><td align="center">323</td><td align="center">315</td><td align="center">300</td><td align="center">240</td><td align="center">151</td></tr><tr><td align="center">331</td><td align="center">月  日</td><td align="center"></td><td align="center">330</td><td align="center">329</td><td align="center">327</td><td align="center">324</td><td align="center">316</td><td align="center">301</td><td align="center">241</td><td align="center">152</td></tr><tr><td align="center">332</td><td align="center">月  日</td><td align="center"></td><td align="center">331</td><td align="center">330</td><td align="center">328</td><td align="center">325</td><td align="center">317</td><td align="center">302</td><td align="center">242</td><td align="center">153</td></tr><tr><td align="center">333</td><td align="center">月  日</td><td align="center"></td><td align="center">332</td><td align="center">331</td><td align="center">329</td><td align="center">326</td><td align="center">318</td><td align="center">303</td><td align="center">243</td><td align="center">154</td></tr><tr><td align="center">334</td><td align="center">月  日</td><td align="center"></td><td align="center">333</td><td align="center">332</td><td align="center">330</td><td align="center">327</td><td align="center">319</td><td align="center">304</td><td align="center">244</td><td align="center">155</td></tr><tr><td align="center">335</td><td align="center">月  日</td><td align="center"></td><td align="center">334</td><td align="center">333</td><td align="center">331</td><td align="center">328</td><td align="center">320</td><td align="center">305</td><td align="center">245</td><td align="center">156</td></tr><tr><td align="center">336</td><td align="center">月  日</td><td align="center"></td><td align="center">335</td><td align="center">334</td><td align="center">332</td><td align="center">329</td><td align="center">321</td><td align="center">306</td><td align="center">246</td><td align="center">157</td></tr><tr><td align="center">337</td><td align="center">月  日</td><td align="center"></td><td align="center">336</td><td align="center">335</td><td align="center">333</td><td align="center">330</td><td align="center">322</td><td align="center">307</td><td align="center">247</td><td align="center">158</td></tr><tr><td align="center">338</td><td align="center">月  日</td><td align="center"></td><td align="center">337</td><td align="center">336</td><td align="center">334</td><td align="center">331</td><td align="center">323</td><td align="center">308</td><td align="center">248</td><td align="center">159</td></tr><tr><td align="center">339</td><td align="center">月  日</td><td align="center"></td><td align="center">338</td><td align="center">337</td><td align="center">335</td><td align="center">332</td><td align="center">324</td><td align="center">309</td><td align="center">249</td><td align="center">160</td></tr><tr><td align="center">340</td><td align="center">月  日</td><td align="center"></td><td align="center">339</td><td align="center">338</td><td align="center">336</td><td align="center">333</td><td align="center">325</td><td align="center">310</td><td align="center">250</td><td align="center">161</td></tr><tr><td align="center">341</td><td align="center">月  日</td><td align="center"></td><td align="center">340</td><td align="center">339</td><td align="center">337</td><td align="center">334</td><td align="center">326</td><td align="center">311</td><td align="center">251</td><td align="center">162</td></tr><tr><td align="center">342</td><td align="center">月  日</td><td align="center"></td><td align="center">341</td><td align="center">340</td><td align="center">338</td><td align="center">335</td><td align="center">327</td><td align="center">312</td><td align="center">252</td><td align="center">163</td></tr><tr><td align="center">343</td><td align="center">月  日</td><td align="center"></td><td align="center">342</td><td align="center">341</td><td align="center">339</td><td align="center">336</td><td align="center">328</td><td align="center">313</td><td align="center">253</td><td align="center">164</td></tr><tr><td align="center">344</td><td align="center">月  日</td><td align="center"></td><td align="center">343</td><td align="center">342</td><td align="center">340</td><td align="center">337</td><td align="center">329</td><td align="center">314</td><td align="center">254</td><td align="center">165</td></tr><tr><td align="center">345</td><td align="center">月  日</td><td align="center"></td><td align="center">344</td><td align="center">343</td><td align="center">341</td><td align="center">338</td><td align="center">330</td><td align="center">315</td><td align="center">255</td><td align="center">166</td></tr><tr><td align="center">346</td><td align="center">月  日</td><td align="center"></td><td align="center">345</td><td align="center">344</td><td align="center">342</td><td align="center">339</td><td align="center">331</td><td align="center">316</td><td align="center">256</td><td align="center">167</td></tr><tr><td align="center">347</td><td align="center">月  日</td><td align="center"></td><td align="center">346</td><td align="center">345</td><td align="center">343</td><td align="center">340</td><td align="center">332</td><td align="center">317</td><td align="center">257</td><td align="center">168</td></tr><tr><td align="center">348</td><td align="center">月  日</td><td align="center"></td><td align="center">347</td><td align="center">346</td><td align="center">344</td><td align="center">341</td><td align="center">333</td><td align="center">318</td><td align="center">258</td><td align="center">169</td></tr><tr><td align="center">349</td><td align="center">月  日</td><td align="center"></td><td align="center">348</td><td align="center">347</td><td align="center">345</td><td align="center">342</td><td align="center">334</td><td align="center">319</td><td align="center">259</td><td align="center">170</td></tr><tr><td align="center">350</td><td align="center">月  日</td><td align="center"></td><td align="center">349</td><td align="center">348</td><td align="center">346</td><td align="center">343</td><td align="center">335</td><td align="center">320</td><td align="center">260</td><td align="center">171</td></tr><tr><td align="center">351</td><td align="center">月  日</td><td align="center"></td><td align="center">350</td><td align="center">349</td><td align="center">347</td><td align="center">344</td><td align="center">336</td><td align="center">321</td><td align="center">261</td><td align="center">172</td></tr><tr><td align="center">352</td><td align="center">月  日</td><td align="center"></td><td align="center">351</td><td align="center">350</td><td align="center">348</td><td align="center">345</td><td align="center">337</td><td align="center">322</td><td align="center">262</td><td align="center">173</td></tr><tr><td align="center">353</td><td align="center">月  日</td><td align="center"></td><td align="center">352</td><td align="center">351</td><td align="center">349</td><td align="center">346</td><td align="center">338</td><td align="center">323</td><td align="center">263</td><td align="center">174</td></tr><tr><td align="center">354</td><td align="center">月  日</td><td align="center"></td><td align="center">353</td><td align="center">352</td><td align="center">350</td><td align="center">347</td><td align="center">339</td><td align="center">324</td><td align="center">264</td><td align="center">175</td></tr><tr><td align="center">355</td><td align="center">月  日</td><td align="center"></td><td align="center">354</td><td align="center">353</td><td align="center">351</td><td align="center">348</td><td align="center">340</td><td align="center">325</td><td align="center">265</td><td align="center">176</td></tr><tr><td align="center">356</td><td align="center">月  日</td><td align="center"></td><td align="center">355</td><td align="center">354</td><td align="center">352</td><td align="center">349</td><td align="center">341</td><td align="center">326</td><td align="center">266</td><td align="center">177</td></tr><tr><td align="center">357</td><td align="center">月  日</td><td align="center"></td><td align="center">356</td><td align="center">355</td><td align="center">353</td><td align="center">350</td><td align="center">342</td><td align="center">327</td><td align="center">267</td><td align="center">178</td></tr><tr><td align="center">358</td><td align="center">月  日</td><td align="center"></td><td align="center">357</td><td align="center">356</td><td align="center">354</td><td align="center">351</td><td align="center">343</td><td align="center">328</td><td align="center">268</td><td align="center">179</td></tr><tr><td align="center">359</td><td align="center">月  日</td><td align="center"></td><td align="center">358</td><td align="center">357</td><td align="center">355</td><td align="center">352</td><td align="center">344</td><td align="center">329</td><td align="center">269</td><td align="center">180</td></tr><tr><td align="center">360</td><td align="center">月  日</td><td align="center"></td><td align="center">359</td><td align="center">358</td><td align="center">356</td><td align="center">353</td><td align="center">345</td><td align="center">330</td><td align="center">270</td><td align="center">181</td></tr><tr><td align="center">361</td><td align="center">月  日</td><td align="center"></td><td align="center">360</td><td align="center">359</td><td align="center">357</td><td align="center">354</td><td align="center">346</td><td align="center">331</td><td align="center">271</td><td align="center">182</td></tr><tr><td align="center">362</td><td align="center">月  日</td><td align="center"></td><td align="center">361</td><td align="center">360</td><td align="center">358</td><td align="center">355</td><td align="center">347</td><td align="center">332</td><td align="center">272</td><td align="center">183</td></tr><tr><td align="center">363</td><td align="center">月  日</td><td align="center"></td><td align="center">362</td><td align="center">361</td><td align="center">359</td><td align="center">356</td><td align="center">348</td><td align="center">333</td><td align="center">273</td><td align="center">184</td></tr><tr><td align="center">364</td><td align="center">月  日</td><td align="center"></td><td align="center">363</td><td align="center">362</td><td align="center">360</td><td align="center">357</td><td align="center">349</td><td align="center">334</td><td align="center">274</td><td align="center">185</td></tr><tr><td align="center">365</td><td align="center">月  日</td><td align="center"></td><td align="center">364</td><td align="center">363</td><td align="center">361</td><td align="center">358</td><td align="center">350</td><td align="center">335</td><td align="center">275</td><td align="center">186</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习</tag>
      
      <tag>计划表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google搜索技巧</title>
    <link href="/blog/2024/03/Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7.html"/>
    <url>/blog/2024/03/Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7.html</url>
    
    <content type="html"><![CDATA[<h2 id="四阶段的智能化人机交互"><a href="#四阶段的智能化人机交互" class="headerlink" title="四阶段的智能化人机交互"></a>四阶段的智能化人机交互</h2><p><strong>第一个阶段</strong>，使用倒排索引解决匹配的效率问题，使用文档模型解决基本的相关性，使搜索引擎变得可用、可扩展，代表比如 Infoseek 。这一阶段只保证了基本的文字相关性，搜索的真正效果是无法保证的。</p><p><strong>第二个阶段</strong>，使用超链模型，比如 Google 的 PageRank 算法和百度的超链分析技术。解决信息的权威性问题，使搜索质量有了质的飞跃。从这一阶段开始，搜索引擎快速普及与并进入商业化，为 Google 和百度这样的公司带来了丰厚的利润。</p><p><strong>第三个阶段</strong>，一方面使用更复杂的规则和机器学习排序模型，综合考虑了用户的行为特征，如商品评论、点赞、收藏、购买等，使得搜索引擎的结果再次提升一个档次，这些在电商等垂直搜索上表现的会更加明显；另一方面，基于各种先进的自然语言处理技术，充分挖掘用户搜索行为日志，对 query 进行分析改写以召回更多更好的结果。</p><p><strong>第四个阶段</strong>，从「有框」搜索时代步入更加人工智能的「无框」搜索时代。人机交互方式也将更多的是问答式的自然语言加语音的方式，而搜索引擎也更像一个智能机器人，理解人的自然语言问题，提供更加直接有效的知识和答案。这一阶段目前尚处于起步阶段，Google、Amazon 以及一些优秀的创业公司都在进行积极的探索。</p><h2 id="谷歌搜索技巧"><a href="#谷歌搜索技巧" class="headerlink" title="谷歌搜索技巧"></a>谷歌搜索技巧</h2><table><thead><tr><th>搜索指令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>@</td><td>搜索社交媒体</td><td>@twitter</td></tr><tr><td>$</td><td>搜索特定价格</td><td>camera $400</td></tr><tr><td>#</td><td>搜索 # 标签</td><td>#throwbackthursday</td></tr><tr><td>-</td><td>从搜索结果中排除特定字词</td><td>马云语录 - 女人</td></tr><tr><td>“”</td><td>搜索完全匹配的结果</td><td>“tallest building”</td></tr><tr><td>..</td><td>在某个数字范围内执行搜索</td><td>camera $50..$100</td></tr><tr><td>OR（大写）</td><td>组合搜索</td><td>marathon OR race</td></tr><tr><td>site:</td><td>搜索特定网站</td><td>site:chongbuluo.com</td></tr><tr><td>related:</td><td>搜索相关网站</td><td>related:time.com</td></tr><tr><td>info:</td><td>获取网站详情</td><td>info:giffox.com</td></tr><tr><td>cache:</td><td>查看网站的 Google 缓存版本</td><td>cache:google.com</td></tr><tr><td>\</td><td>效用等同于 OR</td><td>apple\google, apple OR google</td></tr><tr><td>*</td><td>泛搜索，表征未知部分，只适用于英文</td><td>* is the mother of success</td></tr><tr><td>《》</td><td>只查询图书、影视作品，只适用于中文</td><td>《钢铁是怎样炼成的》</td></tr><tr><td>def:</td><td>查询关键词的定义</td><td>def:diversity &#x2F; google def:</td></tr><tr><td>inurl</td><td>查找在 URL 地址里有搜索关键词的页面</td><td>inurl:download</td></tr><tr><td>intitle</td><td>查找在网页标题里有搜索关键词的页面</td><td>intitle:</td></tr><tr><td>filetype</td><td>查找特定文件格式的结果</td><td>机器学习 filetype:csv</td></tr><tr><td>link:</td><td>查看网站的反向链接</td><td>link:chongbuluo.com</td></tr><tr><td>AROUND</td><td>搜索包含给点单词之间最大分隔数的网页</td><td>华为 AROUND (5) 必然</td></tr></tbody></table><p>（完）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://events.google.com/io/recap/">Recap - Google I&#x2F;O 2019</a></li><li><a href="https://youtu.be/BNHR6IQJGZs">How Search Works</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub搜索技巧</title>
    <link href="/blog/2024/03/GitHub%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7.html"/>
    <url>/blog/2024/03/GitHub%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7.html</url>
    
    <content type="html"><![CDATA[<h2 id="GitHub-搜索技巧"><a href="#GitHub-搜索技巧" class="headerlink" title="GitHub 搜索技巧"></a>GitHub 搜索技巧</h2><p>这里可以了解一些搜索语法，会对你的精准查询有所帮助。</p><h3 id="查询大于或小于另一个值的值"><a href="#查询大于或小于另一个值的值" class="headerlink" title="查询大于或小于另一个值的值"></a>查询大于或小于另一个值的值</h3><p>您可以使用 <code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，和 <code>&lt;=</code> 搜索是大于，大于或等于，小于和小于或等于另一个值的值。</p><table><thead><tr><th>匹配条件</th><th>举例</th></tr></thead><tbody><tr><td><code>&gt;</code> <em>n</em></td><td>cats<a href="https://github.com/search?utf8=%E2%9C%93&q=cats+stars:%3E1000&type=Repositories"> <strong>stars:&gt; 1000</strong></a> 匹配超过 1000 star 的包含 “cats” 关键字的仓库。</td></tr><tr><td><code>&gt;=</code> <em>n</em></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+topics:%3E=5&type=Repositories"><strong>cats topics:&gt; &#x3D; 5</strong></a> 匹配具有 5 个或更多主题的单词 “cats” 的存储库。</td></tr><tr><td><code>&lt;</code> <em>n</em></td><td>****<a href="https://github.com/search?utf8=%E2%9C%93&q=cats+size:%3C10000&type=Code"><strong>cats size:&lt;10000</strong></a> 匹配小于 10 KB 的文件中带有 “cats” 字样的代码。</td></tr><tr><td><code>&lt;=</code> <em>n</em></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+stars:%3C=50&type=Repositories"><strong>cats stars:&lt;&#x3D; 50</strong></a> 匹配具有 50 个或更少 star 的包含 “cats” 关键字的仓库。</td></tr></tbody></table><p>您还可以使用<a href="https://help.github.com/en/articles/understanding-the-search-syntax#query-for-values-between-a-range">范围查询</a>来搜索大于或等于，或小于或等于另一个值的值。</p><table><thead><tr><th>搜索语法</th><th>举例</th></tr></thead><tbody><tr><td><em>n</em> <code>..*</code></td><td>****<a href="https://github.com/search?utf8=%E2%9C%93&q=cats+stars:10..*&type=Repositories"><strong>cats stars:10 .. *</strong></a> 相当于 <code>stars:&gt;=10</code> 并匹配具有 10 个或更多星的 “猫” 一词的存储库。</td></tr><tr><td><code>*..</code> <em>n</em></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+stars:%22*..10%22&type=Repositories">cats <strong>stars:* .. 10</strong></a> 相当于 <code>stars:&lt;=10</code> 和匹配具有 10 个或更少恒星的单词 “cats” 的存储库。</td></tr></tbody></table><h3 id="查询范围之间的值"><a href="#查询范围之间的值" class="headerlink" title="查询范围之间的值"></a><a href="https://help.github.com/en/articles/understanding-the-search-syntax#query-for-values-between-a-range">查询范围之间的值</a></h3><p>您可以使用范围语法搜索范围内的值，其中第一个数字 <em>n</em> 是最低值，第二个数字是最高值。<em>n</em><code>..</code><em>n</em></p><table><thead><tr><th>询问</th><th>举例</th></tr></thead><tbody><tr><td><em>n</em> <code>..</code> <em>n</em></td><td>****<a href="https://github.com/search?utf8=%E2%9C%93&q=cats+stars:10..50&type=Repositories"><strong>cats stars:10..50</strong></a> 匹配存储库，单词 “cats”，有 10 到 50 颗星。</td></tr></tbody></table><h3 id="查询日期"><a href="#查询日期" class="headerlink" title="查询日期"></a><a href="https://help.github.com/en/articles/understanding-the-search-syntax#query-for-dates">查询日期</a></h3><p>您可以搜索日期，除另一个日期，或者那年秋天日期范围内较早或较晚的是，通过使用 <code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code>，和<a href="https://help.github.com/en/articles/understanding-the-search-syntax#query-for-values-between-a-range">范围查询</a>。日期格式必须遵循 ISO8601 标准，即 <code>YYYY-MM-DD</code>（年 - 月 - 日）。</p><table><thead><tr><th>询问</th><th>举例</th></tr></thead><tbody><tr><td><code>&gt;</code> <em>YYYY-MM-DD</em></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:%3E2016-04-29&type=Issues">cats <strong>created:&gt; 2016-04-29</strong></a> 匹配 2016 年 4 月 29 日之后创建的 “cats” 一词的问题。</td></tr><tr><td><code>&gt;=</code> <em>YYYY-MM-DD</em></td><td>****<a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:%3E=2017-04-01&type=Issues"><strong>cats created:&gt; &#x3D; 2017-04-01</strong></a> 匹配 2017 年 4 月 1 日或之后创建的 “cats” 一词的问题。</td></tr><tr><td><code>&lt;</code> <em>YYYY-MM-DD</em></td><td><a href="https://github.com/search?q=cats+pushed:%3C2012-07-05&type=Code&utf8=%E2%9C%93"><strong>cats pushed:&lt;2012-07-05</strong></a> 匹配代码与 2012 年 7 月 5 日之前推送到的存储库中的 “cats” 一词。</td></tr><tr><td><code>&lt;=</code> <em>YYYY-MM-DD</em></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:%3E=2017-04-01&type=Issues">cats <strong>created</strong></a><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:%3C=2012-07-04&type=Issues">:<strong>&lt;&#x3D; 2012-07-04</strong></a> 与 2012 年 7 月 4 日或之前创建的 “cats” 一词相匹配。</td></tr><tr><td><em>YYYY-MM-DD .. YYYY-MM-DD</em></td><td><a href="https://github.com/search?q=cats+pushed:%3C2012-07-05&type=Code&utf8=%E2%9C%93"><strong>cats pushed</strong></a><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+pushed:2016-04-30..2016-07-04&type=Repositories">:<strong>2016-04-30..2016-07-04</strong></a> 匹配 2016 年 4 月底到 7 月期间被推到 “cats” 字样的知识库。</td></tr><tr><td><em>YYYYYYYY-MM-DD</em><code>..*</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:2012-04-30..*&type=Issues"><strong>cats created</strong></a><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:2012-04-30..*&type=Issues">:<strong>2012-04-30 .. *</strong></a> 匹配 2012 年 4 月 30 日之后创建的包含 “cats” 字样的问题。</td></tr><tr><td><code>*..</code><em>YYYYYYYY-MM-DD</em></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:2012-04-30..*&type=Issues"><strong>cats created</strong></a><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:*..2012-07-04&type=Issues">:*** .. 2012-04-30**</a> 匹配 2012 年 7 月 4 日之前创建的包含 “cats” 字样的问题。</td></tr></tbody></table><p>您还可以 <code>THH:MM:SS+00:00</code> 在日期之后添加可选时间信息，以按小时，分钟和秒搜索。那是 <code>T</code>，然后是 <code>HH:MM:SS</code>（小时 - 分 - 秒）和 UTC 偏移（<code>+00:00</code>）。</p><table><thead><tr><th>询问</th><th>例</th></tr></thead><tbody><tr><td><code>YYYY - MM - DD T HH : MM : SS + 00 : 00</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:%3E=2017-04-01&type=Issues">cats <strong>created</strong></a><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:2017-01-01T01:00:00+07:00..2017-03-01T15:30:15+07:00&type=Issues">:<strong>2017-01-01T01：00：00 + 07：00..2017-03-01T15：30：15 + 07:00</strong></a> **** 匹配 2017 年 1 月 1 日凌晨 1 点之间创建的问题，UTC 偏移量为 <code>07:00</code>3 月 1 日，2017 年下午 3 点，UTC 偏移量为 <code>07:00</code>。</td></tr><tr><td><code>YYYY - MM - DD T HH : MM : SS Z</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:%3E=2017-04-01&type=Issues">cats <strong>created</strong></a><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+created:2016-03-21T14:11:00Z..2016-04-07T20:45:00Z&type=Issues">:<strong>2016-03-21T14：11：00Z..2016-04-07T20：45：00Z</strong></a> 匹配 2016 年 3 月 21 日下午 2:11 和 2106 年 4 月 7 日晚上 8:45 之间创建的问题。</td></tr></tbody></table><h3 id="排除某些结果"><a href="#排除某些结果" class="headerlink" title="排除某些结果"></a><a href="https://help.github.com/en/articles/understanding-the-search-syntax#exclude-certain-results">排除某些结果</a></h3><p>您可以使用 <code>NOT</code> 语法排除包含特定单词的结果。该 <code>NOT</code> 操作只能用于字符串的关键词。它不适用于数字或日期。</p><table><thead><tr><th>询问</th><th>例子</th></tr></thead><tbody><tr><td><code>NOT</code></td><td><a href="https://github.com/search?q=hello+NOT+world&type=Repositories">hello NOT world</a> 匹配有 “hello” 这个词而没有 “world” 这个词的仓库。</td></tr></tbody></table><h3 id="对带有空格的查询使用引号"><a href="#对带有空格的查询使用引号" class="headerlink" title="对带有空格的查询使用引号"></a>对带有空格的查询使用引号</h3><p>如果您的搜索查询包含空格，则需要用引号括起来。例如：</p><ul><li><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+NOT+%22hello+world%22&type=Repositories">cats NOT “hello world”</a> 匹配存储库的单词 “cats” 而不是 “hello world”。</li><li><a href="https://github.com/search?utf8=%E2%9C%93&q=build+label:%22bug+fix%22&type=Issues">构建标签：“bug fix”</a> 与 “build” 一词的问题相匹配，其标签为 “bug fix”。</li></ul><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运动类影视剧集清单</title>
    <link href="/blog/2024/03/%E8%BF%90%E5%8A%A8%E7%B1%BB%E5%BD%B1%E8%A7%86%E5%89%A7%E9%9B%86%E6%B8%85%E5%8D%95.html"/>
    <url>/blog/2024/03/%E8%BF%90%E5%8A%A8%E7%B1%BB%E5%BD%B1%E8%A7%86%E5%89%A7%E9%9B%86%E6%B8%85%E5%8D%95.html</url>
    
    <content type="html"><![CDATA[<h2 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h2><ul><li>强风吹拂</li><li>灌篮高手</li><li>网球王子</li><li>足球小将</li><li>黑子的篮球</li><li>排球少年</li><li>乒乓</li><li>青之芦苇</li><li>轻羽飞扬</li><li>流汗吧，健身少女</li></ul><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>清单</tag>
      
      <tag>运动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用软件清单</title>
    <link href="/blog/2024/03/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95.html"/>
    <url>/blog/2024/03/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95.html</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">名称</th><th align="center">用途</th><th>支持平台(Win、Linux)</th></tr></thead><tbody><tr><td align="center">bestTrace</td><td align="center">网络排查</td><td>Win</td></tr><tr><td align="center">ZoomIt</td><td align="center">windows工具集</td><td>Win</td></tr><tr><td align="center">powertoyes</td><td align="center">windows增强工具包</td><td>Win</td></tr><tr><td align="center">vagrant</td><td align="center">虚拟机管理</td><td>Win、Linux</td></tr><tr><td align="center">virtualbox</td><td align="center">虚拟机工具</td><td>Win、Linux</td></tr><tr><td align="center">filezilla pro</td><td align="center">sftp工具</td><td>Win、Linux</td></tr><tr><td align="center">tailscale</td><td align="center">组网工具</td><td>Win、Linux</td></tr><tr><td align="center">remnote</td><td align="center">双链笔记</td><td>Win、Linux</td></tr><tr><td align="center">gimp</td><td align="center">图像处理工具</td><td>Win、Linux</td></tr><tr><td align="center">gitui</td><td align="center">git终端工具</td><td>Win、Linux</td></tr><tr><td align="center">cryptomator</td><td align="center">文件加密同步网盘工具</td><td>Win、Linux</td></tr><tr><td align="center">7zip</td><td align="center">解压缩工具</td><td>Win、Linux</td></tr><tr><td align="center">potplayer</td><td align="center">音视频播放器</td><td>Win、Linux</td></tr><tr><td align="center">adguard</td><td align="center">广告拦截工具</td><td>Win、Linux</td></tr><tr><td align="center">mem reduct</td><td align="center">内存清理工具</td><td>Win</td></tr><tr><td align="center">小鹤双拼方案</td><td align="center">微软输入法自定义双拼方案</td><td>Win</td></tr><tr><td align="center">enpass</td><td align="center">密码管理工具</td><td>Win、Linux</td></tr><tr><td align="center">quicker</td><td align="center">快捷工具箱</td><td>Win</td></tr><tr><td align="center">everything</td><td align="center">快速搜索工具</td><td>Win</td></tr><tr><td align="center">百度网盘</td><td align="center">网络存储</td><td>Win、Linux</td></tr><tr><td align="center">typora</td><td align="center">markdown工具</td><td>Win、Linux</td></tr><tr><td align="center">vscode</td><td align="center">文本编辑器</td><td>Win、Linux</td></tr><tr><td align="center">thunderclient</td><td align="center">api测试(vscode 插件)</td><td>Win、Linux</td></tr><tr><td align="center">wps</td><td align="center">office工具</td><td>Win、Linux</td></tr><tr><td align="center">ventory</td><td align="center">u盘启动工具</td><td>Win、Linux</td></tr><tr><td align="center">node.js</td><td align="center">开发语言</td><td>Win、Linux</td></tr><tr><td align="center">git</td><td align="center">代码版本控制工具</td><td>Win、Linux</td></tr><tr><td align="center">java</td><td align="center">开发语言</td><td>Win、Linux</td></tr><tr><td align="center">idea</td><td align="center">集成开发环境</td><td>Win、Linux</td></tr><tr><td align="center">python</td><td align="center">开发语言</td><td>Win、Linux</td></tr><tr><td align="center">pycham</td><td align="center">集成开发环境</td><td>Win、Linux</td></tr><tr><td align="center">golang</td><td align="center">开发语言</td><td>Win、Linux</td></tr><tr><td align="center">goland</td><td align="center">集成开发环境</td><td>Win、Linux</td></tr><tr><td align="center">jprofiler</td><td align="center">JVM调优工具</td><td>Win、Linux</td></tr><tr><td align="center">anather redis desktop manager</td><td align="center">redis工具</td><td>Win、Linux</td></tr><tr><td align="center">EssentialPIM</td><td align="center">个人项目管理工具</td><td>Win</td></tr><tr><td align="center">winget脚本</td><td align="center">windows命令行下载工具</td><td>Win</td></tr><tr><td align="center">openhashTab</td><td align="center">查看文件的hash值</td><td>Win</td></tr><tr><td align="center">lnav</td><td align="center">日志查看工具</td><td>Linux</td></tr><tr><td align="center">白描</td><td align="center">ocr工具</td><td>Win</td></tr><tr><td align="center">fxsound</td><td align="center">声音增强</td><td>Win</td></tr><tr><td align="center">知犀</td><td align="center">思维导图工具</td><td>Win</td></tr><tr><td align="center">finalshell</td><td align="center">ssh工具</td><td>Win、Linux</td></tr><tr><td align="center">jdk</td><td align="center">java开发工具</td><td>Win、Linux</td></tr><tr><td align="center">maven</td><td align="center">java依赖管理工具</td><td>Win、Linux</td></tr><tr><td align="center">k6</td><td align="center">性能测试工具</td><td>Win、Linux</td></tr><tr><td align="center">k8s</td><td align="center">容器编排工具</td><td>Linux</td></tr><tr><td align="center">jq</td><td align="center">json处理工具</td><td>Win、Linux</td></tr></tbody></table><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>COCA 20000词根词汇练习</title>
    <link href="/blog/2024/03/COCA%2020000%E8%AF%8D%E6%B1%87%E5%A4%8D%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0.html"/>
    <url>/blog/2024/03/COCA%2020000%E8%AF%8D%E6%B1%87%E5%A4%8D%E4%B9%A0%E5%92%8C%E7%BB%83%E4%B9%A0.html</url>
    
    <content type="html"><![CDATA[<h2 id="cess、ceed、cede、gress、gred、grad"><a href="#cess、ceed、cede、gress、gred、grad" class="headerlink" title="cess、ceed、cede、gress、gred、grad"></a>cess、ceed、cede、gress、gred、grad</h2><p><img src="/blog/./assets/image-16770729768207360.jpg" alt="词汇复习课01 思维导图"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>多选:下列哪几组词根表示“走（to go）”？</li></ol><p>A. -cess；-ceed</p><p>B. -cede；-gress</p><p>C. -grade; -cret</p><p>D. -gred; -grad</p><details>  <summary>答案</summary>  ABD   解析：C选项-grade无此词根；-cret词根表示“增长；产生”；其他三个选项均表示“走”；因此答案为ABD。</details><ol start="2"><li>多选：“process” 的含义有 ________.</li></ol><p>A. 处理器 </p><p>B. 加工过的</p><p>C. 过程; 进程</p><p>D. 加工; 处理</p><details>  <summary>答案</summary>  CD  解析： pro（向前）+ cess（走）→（一步一步地）向前走→过程；程序（n.）；加工；处理 (v.)；A选项对应的词为processor；B选项对应的词为processed；因此答案为CD。</details><ol start="3"><li>下列表示“原料、要素、组成部分”的是 ________。</li></ol><p>A. ingredient</p><p>B. aggressor</p><p>C. procession</p><p>D. accessory</p><details>  <summary>答案</summary> A 解析：B选项意思是“侵略者；挑衅者”；C选项意思为“队伍，行列；一列，一排；列队行进”；D选项的含义为“附件、配件、从犯”。因此答案选A。</details>4. “aggressive” 的含义是 ________。<p>A. 加工过的；处理的</p><p>B. 侵略性的；激进的</p><p>C. 进步的；先进的</p><p>D. 过分的；过多的</p><details>  <summary>答案</summary> B 解析：A选项对应的词为processed；B选项ag（加强语气）+gress（=go：走）+ive（形容词后缀）→强行走进去的→侵略性的、激进的；C选项对应的词为progressive；D选项对应的词为excessive；因此答案为B。 </details><ol start="5"><li>下列选项中表示“法律诉讼”的短语是 ________。</li></ol><p>A. legal procedures</p><p>B. legal preceding</p><p>C. legal proceedings</p><p>D. legal proceeds</p><details>  <summary>答案</summary> C 解析：A选项为法律程序；B选项无此表达；preceding为领先的；在前的；D选项无此表达；proceeds为收入；收益；实收款项；因此答案选C。</details><ol start="6"><li>下列表示 “接近、进入；使用、获取”含义的一词是 ________。</li></ol><p>A. aggress</p><p>B. access</p><p>C. excess</p><p>D. process</p><details>  <summary>答案</summary> B 解析：A选项表示“侵略”; B选项ac（加强语气）+cess（走）→走过去→接近、进入；获取、使用；C选项表示过量；超过；D选项表示过程、进程；处理；加工。因此答案选B。</details><ol start="7"><li>后缀“-ive”的含义不包括下列哪个选项？</li></ol><p>A. 形容词后缀，表“多；大”</p><p>B. 形容词后缀，表“…的“</p><p>C. 名词后缀，表“人”或“物”</p><p>D. 动词后缀，表一种动作</p><details>  <summary>答案</summary> D 解析：-ive不做动词后缀；其他三个选项均是-ive的含义。因此答案选D。</details><ol start="8"><li>请将短语补充完整：数据处理data ________。</li></ol><p>A. behavior </p><p>B. procedure</p><p>C. proceed</p><p>D. processing</p><details>  <summary>答案</summary> D 解析：选项A表示“行为”；选项B proceeds表示 “程序；步骤”；选项C表示 “v. 前进；继续进行；开始”; 选项D表示“处理；加工”。选项D符合题意，因此答案选D。</details><ol start="9"><li>A(n) ________ is a student at a university who has not yet taken a first degree .</li></ol><p>A. graduate </p><p>B. graduation</p><p>C. graduated</p><p>D. undergraduate</p><details>  <summary>答案</summary> D 解析：题干部分a student at a university who has not yet taken a first degree 表示“大学里尚未取得学士学位的学生”；A 选项：大学毕业生；B选项为动词graduate 的名词形式；表示毕业；C选项为动词graduate 的过去分词形式；表示毕了业的；D选项为大学本科生；大学肄业生under（下、未达到）+graduate（本科毕业）→还未本科毕业生→大学本科生；因此选D。</details><ol start="10"><li>You need a password to get ________ to the computer system. 使用这个计算机系统需要密码。</li></ol><p>A. access</p><p>B. proceeds</p><p>C. graduate</p><p>D. precedent</p><details>  <summary>答案</summary> A 解析：选项A access= ac（加强语气）+cess（走）→走过去→接近，进入；获取，使用；选项B proceeds表示 “n.实收款项；收入，收益”；选项C表示 “v. 毕业；n.（本科）毕业生”; 选项D表示“n. 先例；前例；a. 先前的”。选项A符合题意，因此答案选A。</details><h2 id="sub、sup、suc、sus"><a href="#sub、sup、suc、sus" class="headerlink" title="sub、sup、suc、sus"></a>sub、sup、suc、sus</h2><p><img src="/blog/./assets/image-16770860629263360.jpg" alt="词汇复习课02 思维导图"></p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><ol><li>多选:前缀sub-, sup-, suc-, sus-的功能包括哪几项？</li></ol><p>A. 下，向下</p><p>B. 从下往上</p><p>C. 亚于，次于</p><p>D. 后，后面</p><details>  <summary>答案</summary>ABCD 解析：前缀sub-, sup-, suc-, sus-的具体功能包括：（1）下，向下；（2）从下往上（3）亚于，次于（4）后，后面。因此答案选ABCD。</details><ol start="2"><li>多选：“successor” 的含义为 ________.</li></ol><p>A. 继承者 </p><p>B. 成功者</p><p>C. 后续的事物</p><p>D. 继承权</p><details>  <summary>答案</summary>AC解析： success（继承、接任）+or（名词后缀;表人）→继承人; 继任者；B选项对应的词为successful people/men；D选项对应的词为succession；因此答案为AC。</details><ol start="3"><li>She saw books as a ________, not a luxury. 她视书籍为必需品而非奢侈品。</li></ol><p>A. necessary</p><p>B. necessity</p><p>C. necessarily</p><p>D. necessitate</p><details>  <summary>答案</summary>B解析：A选项表示必要的；必然的；必需的；B选项表示需要；必需品；必然性；C选项表示必要地；必定地，必然地；D选项为动词，表示使成为必需，需要；迫使。选项B符合题意，因此答案选B。</details><ol start="4"><li>前缀de-的含义是________？</li></ol><p>A. 向上</p><p>B. 向下</p><p>C. 高</p><p>D. 走</p><details>  <summary>答案</summary>B解析： up-表示“向上”；de-表示“向下”；-anc表示“以前/老”；“高” “-cess、-ceed、-cede、-gress、-gred、-grad” 全部表示“走”。因此答案选B。</details><ol start="5"><li>“degrade” 的含义<strong>不</strong>包括 ________。</li></ol><p>A. 使……丢脸</p><p>B. 使……降级</p><p>C. 贬低</p><p>D. 退位</p><details>  <summary>答案</summary>D解析：de（向下）+grade（级别）→级别向下→降级，引申出贬低；使……丢脸D选项对应的词为concession；因此答案为D。 </details><ol start="6"><li>下列选项中表示“国会；会议；代表大会”含义的词是 ________。</li></ol><p>A. congressman</p><p>B. ancestry</p><p>C. congress</p><p>D. ancestor </p><details>  <summary>答案</summary>C解析：A选项为国会议员；众议院议员；B选项表示祖先；血统；C选项con（共同、一起）+gress（走）→走到一起→开会（代表大会；国会）；D选项表示祖先;祖宗；因此答案选C。</details><ol start="7"><li>多选：“concede” 一词的含义是 ________。</li></ol><p>A. 让步；退让</p><p>B. 承认</p><p>C. 特许权</p><p>D. 就任</p><details>  <summary>答案</summary>AB解析：con（共同；一起）+ced (走) + e →一起走的人，每人各往回走一步→让步；退让；C选项对应的词为concession；D选项对应的词为accede。因此答案选AB。</details><ol start="8"><li>后缀“-ate; -ite; -ute”的含义不包括下列哪个选项？</li></ol><p>A. 用作动词后缀；表示“使”或不翻译</p><p>B. 用作形容词后缀；</p><p>C. 多数情况下为名词后缀</p><p>D. 可用作名词后缀，表“人”或“物”</p><details>  <summary>答案</summary>C解析：后缀“-ate; -ite; -ute”极少数情况下，可做名词后缀。因此答案选C。</details><ol start="9"><li>“When a member of a royal family <strong>accedes</strong> to the throne, they become king or queen.”加粗部分的含义是________？</li></ol><p>A. 同意</p><p>B. 加入</p><p>C. 就任</p><p>D. 退位</p><details>  <summary>答案</summary>C解析：ac- (=to; 表方向) + cede （走）→朝…走去（字面意思）→就任；就任（根据不同语境决定）。根据此句表达的情景，该词此时应翻译为“就任”。因此答案选C。</details><ol start="10"><li>表示“离题、岔道”含义的一词是________？</li></ol><p>A. regress</p><p>B. digress</p><p>C. ingress</p><p>D. congress</p><details>  <summary>答案</summary>B解析：A选项re-（返回）+gress（走）→往回走→逆行，倒退；B选项di-（=dis; 分开）+gress（走）→分开走→离题；岔道；C选项in-（向内）+gress（走）→向内走→进入；入口；D选项con（共同、一起）+gress（走）→走到一起→开会（代表大会；国会）。因此答案选B。</details>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>英语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语</tag>
      
      <tag>词汇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>少吃或不吃的食物</title>
    <link href="/blog/2024/03/%E5%B0%91%E5%90%83%E6%88%96%E4%B8%8D%E5%90%83%E7%9A%84%E9%A3%9F%E7%89%A9.html"/>
    <url>/blog/2024/03/%E5%B0%91%E5%90%83%E6%88%96%E4%B8%8D%E5%90%83%E7%9A%84%E9%A3%9F%E7%89%A9.html</url>
    
    <content type="html"><![CDATA[<p>以下食物并不是完全禁止摄入，而是要减少摄入量和摄入次数。</p><h2 id="含酒精类"><a href="#含酒精类" class="headerlink" title="含酒精类"></a>含酒精类</h2><ul><li>酒类</li><li>腐乳</li></ul><h2 id="食用油-含Omega6"><a href="#食用油-含Omega6" class="headerlink" title="食用油(含Omega6)"></a>食用油(含Omega6)</h2><ul><li>棕榈油</li><li>葡萄籽油</li><li>葵花籽油</li><li>小麦胚芽油</li><li>玉米油</li><li>大豆油</li><li>芝麻油</li><li>花生油</li><li>火鸡脂肪</li><li>鸡油</li><li>鸭油</li><li>猪油</li></ul><h2 id="肉类-含Omega6"><a href="#肉类-含Omega6" class="headerlink" title="肉类(含Omega6)"></a>肉类(含Omega6)</h2><ul><li>五花肉</li><li>培根</li><li>蛋黄</li><li>肌肉</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="包装食品"><a href="#包装食品" class="headerlink" title="包装食品"></a>包装食品</h2><ul><li>蛋黄酱</li><li></li></ul><h2 id="糖类"><a href="#糖类" class="headerlink" title="糖类"></a>糖类</h2><ul><li>糖果类</li></ul><h2 id="盐类"><a href="#盐类" class="headerlink" title="盐类"></a>盐类</h2><ul><li>腌制类</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://mp.weixin.qq.com/s/xdaLhyD7vHWEnPDBdRx6HA">如何饲养好一只「大脑」</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>健康</category>
      
    </categories>
    
    
    <tags>
      
      <tag>食物</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>健康食物清单</title>
    <link href="/blog/2024/03/%E5%81%A5%E5%BA%B7%E9%A3%9F%E7%89%A9%E6%B8%85%E5%8D%95.html"/>
    <url>/blog/2024/03/%E5%81%A5%E5%BA%B7%E9%A3%9F%E7%89%A9%E6%B8%85%E5%8D%95.html</url>
    
    <content type="html"><![CDATA[<h2 id="膳食指南"><a href="#膳食指南" class="headerlink" title="膳食指南"></a>膳食指南</h2><p>《中国居民膳食指南》建议，<strong>正常成年人每日需要2200毫克钠。</strong>而当钠摄入越多体内潴留的水分就越多，易使血压就升高，<strong>当伴随水肿的出现，产生脑血管意外或心力衰竭的可能性往往会增加。</strong></p><p>最后需要注意的是，<strong>超加工食物摄入更多，也意味着营养素缺乏。</strong></p><p>大脑对重口味的成瘾，也在于超加工食物摄入过量。区分这种超加工食物，有通用的NOVA分类系统，区分食物加工程度，具体如下：</p><p><img src="/blog/./assets/f7bbacfe080a291e714f35488173334c.jpg" alt="NOVA分类系统"></p><h2 id="五星系列"><a href="#五星系列" class="headerlink" title="五星系列"></a>五星系列</h2><p>没有经过加工或最少加工的食品，主要指自然界中天然存在的动物、植物等的可食用部位，以及经过干燥、研磨、煮沸、巴氏灭菌、冷藏冷冻等工业处理的没有加工过的食品，比如水、新鲜蔬果、豆类、谷物、新鲜或冷冻的肉类、没有添加糖或盐的坚果等。</p><h3 id="饮用水"><a href="#饮用水" class="headerlink" title="饮用水"></a>饮用水</h3><ul><li>山泉水</li><li>过滤水</li></ul><h3 id="新鲜蔬果"><a href="#新鲜蔬果" class="headerlink" title="新鲜蔬果"></a>新鲜蔬果</h3><ul><li>西红柿</li><li>黄瓜</li><li>苹果</li><li>香蕉</li><li>西兰花</li><li>蓝莓</li></ul><h3 id="主食类"><a href="#主食类" class="headerlink" title="主食类"></a>主食类</h3><ul><li>燕麦</li></ul><h3 id="肉类蛋白"><a href="#肉类蛋白" class="headerlink" title="肉类蛋白"></a>肉类蛋白</h3><ul><li>鸡蛋</li><li>鸭蛋</li><li>鹌鹑蛋</li></ul><h3 id="坚果"><a href="#坚果" class="headerlink" title="坚果"></a>坚果</h3><ul><li>杏仁</li><li>核桃</li><li>亚麻籽</li></ul><h2 id="四星系列"><a href="#四星系列" class="headerlink" title="四星系列"></a>四星系列</h2><p>少加工食物。</p><h3 id="包装类食品"><a href="#包装类食品" class="headerlink" title="包装类食品"></a>包装类食品</h3><p>主要是经过加工处理过的视频，尽量买加工工序少的食品。</p><ul><li>即食燕麦</li><li>牛奶</li><li>豆腐</li><li>坚果</li><li>橄榄油</li><li>沙丁鱼罐头</li><li>金枪鱼罐头</li></ul><h3 id="桂格经典原味麦片"><a href="#桂格经典原味麦片" class="headerlink" title="桂格经典原味麦片"></a>桂格经典原味麦片</h3><p><strong>配料</strong> ：燕麦</p><table><thead><tr><th>项目</th><th>每100克</th><th>营养素参考值%</th></tr></thead><tbody><tr><td>能量</td><td>1575千焦</td><td>19%</td></tr><tr><td>蛋白质</td><td>11.0克</td><td>18%</td></tr><tr><td>脂肪</td><td>9.3克</td><td>16%</td></tr><tr><td>- 饱和脂肪酸</td><td>1.9克</td><td>10%</td></tr><tr><td>碳水化合物</td><td>55.7克</td><td>19%</td></tr><tr><td>膳食纤维</td><td>12.1克</td><td>48%</td></tr><tr><td>钠</td><td>8毫克</td><td>0%</td></tr><tr><td>维生素B1</td><td>0.26毫克</td><td>19%</td></tr><tr><td>镁</td><td>120毫克</td><td>40%</td></tr><tr><td>铁</td><td>2.3毫克</td><td>15%</td></tr><tr><td>锌</td><td>2.00毫克</td><td>13%</td></tr></tbody></table><h3 id="桂格五黑燕麦片"><a href="#桂格五黑燕麦片" class="headerlink" title="桂格五黑燕麦片"></a>桂格五黑燕麦片</h3><p><strong>配料</strong>:黑小麦、燕麦、黑米片、黑豆片、黑麦、黑芝麻。</p><p><strong>平均添加量</strong>:黑小麦33.5%,燕麦29%,黑米片25.8%,黑豆片6.3%,黑麦1.5%,黑芝麻1%。</p><table><thead><tr><th>项目</th><th>每100克</th><th>营养素参考值%</th></tr></thead><tbody><tr><td>能量</td><td>1492千焦</td><td>18%</td></tr><tr><td>蛋白质</td><td>12.0克</td><td>20%</td></tr><tr><td>脂肪</td><td>7.2克</td><td>12%</td></tr><tr><td>- 饱和脂肪酸</td><td>1.9克</td><td>10%</td></tr><tr><td>碳水化合物</td><td>55.4克</td><td>18%</td></tr><tr><td>膳食纤维</td><td>10.0克</td><td>40%</td></tr><tr><td>钠</td><td>8毫克</td><td>0%</td></tr><tr><td>烟酸(烟酰胺)</td><td>2.10毫克</td><td>15%</td></tr><tr><td>磷</td><td>210毫克</td><td>30%</td></tr><tr><td>钾</td><td>300毫克</td><td>15%</td></tr><tr><td>镁</td><td>90毫克</td><td>30%</td></tr><tr><td>铁</td><td>2.3毫克</td><td>15%</td></tr></tbody></table><h3 id="桂格五红燕麦片"><a href="#桂格五红燕麦片" class="headerlink" title="桂格五红燕麦片"></a>桂格五红燕麦片</h3><p><strong>配料</strong>:燕麦、营养谷蔬粉(冲调谷物制品)、红豆、红米、枸杞(经辐照处理)、桂圆肉丁(桂圆肉、葵花籽油)、红枣粉。<br><strong>平均添加量</strong>:燕麦76.5%,红豆6.8%,红米5.5%,枸杞0.7%,桂圆肉0.5%,红枣粉0.5%。</p><table><thead><tr><th>项目</th><th>每100克</th><th>营养素参考值%</th></tr></thead><tbody><tr><td>能量</td><td>1544千焦</td><td>18%</td></tr><tr><td>蛋白质</td><td>10.1克</td><td>17%</td></tr><tr><td>脂肪</td><td>8.4克</td><td>14%</td></tr><tr><td>- 饱和脂肪酸</td><td>2.1克</td><td>11%</td></tr><tr><td>碳水化合物</td><td>58.1克</td><td>19%</td></tr><tr><td>膳食纤维</td><td>9.2克</td><td>37%</td></tr><tr><td>钠</td><td>53毫克</td><td>3%</td></tr><tr><td>镁</td><td>90毫克</td><td>30%</td></tr><tr><td>铁</td><td>2.3毫克</td><td>15%</td></tr></tbody></table><h3 id="桂格五白燕麦片"><a href="#桂格五白燕麦片" class="headerlink" title="桂格五白燕麦片"></a>桂格五白燕麦片</h3><p><strong>配料</strong>:燕麦、茯苓大米片(冲调谷物制品)、椰子粉、白芸豆、薏苡仁、山药、烟酸(烟酰胺)、锌(硫酸锌)。<br><strong>平均添加量</strong>:燕麦73%,茯苓大米片10.0%,椰子粉9.3%,白芸豆5.0%,薏苡仁1.5%,山药1.1%。</p><table><thead><tr><th>项目</th><th>每100克</th><th>营养素参考值%</th></tr></thead><tbody><tr><td>能量</td><td>1624千焦</td><td>19%</td></tr><tr><td>蛋白质</td><td>11.0克</td><td>18%</td></tr><tr><td>脂肪</td><td>12.5克</td><td>21%</td></tr><tr><td>- 饱和脂肪酸</td><td>6.8克</td><td>34%</td></tr><tr><td>碳水化合物</td><td>53.0克</td><td>18%</td></tr><tr><td>膳食纤维</td><td>9.2克</td><td>37%</td></tr><tr><td>钠</td><td>20毫克</td><td>1%</td></tr><tr><td>烟酰胺</td><td>10.00毫克</td><td>71%</td></tr><tr><td>镁</td><td>90毫克</td><td>30%</td></tr><tr><td>铁</td><td>2.3毫克</td><td>15%</td></tr><tr><td>锌</td><td>9.00毫克</td><td>60%</td></tr></tbody></table><h2 id="三星系列"><a href="#三星系列" class="headerlink" title="三星系列"></a>三星系列</h2><p>原因见营养成本表<strong>加粗</strong>部分。</p><h3 id="桂格玉米鸡肉燕麦片"><a href="#桂格玉米鸡肉燕麦片" class="headerlink" title="桂格玉米鸡肉燕麦片"></a>桂格玉米鸡肉燕麦片</h3><p><strong>配料</strong>:燕麦片、桂格高纤谷物粉(冲调谷物制品)、青裸片、冻干玉米粒、海苔、 鸡胸肉粒、羽衣甘蓝粉、白芸豆粉、魔芋粉、食用盐、白胡椒粉(经辐照处理)。 </p><p><strong>平均添加量</strong>:青裸片5.5%，冻干玉米粒2.25%，海苔0.78%，鸡胸肉粒0.5%，魔 芋粉0.2%，羽衣甘蓝粉0.15%，白芸豆粉0.1%。 </p><p><strong>燕麦片添加量</strong>:不低于50%。</p><table><thead><tr><th>项目</th><th>每100克</th><th>营养素参考值%</th></tr></thead><tbody><tr><td>能量</td><td>1484千焦</td><td>18%</td></tr><tr><td>蛋白质</td><td>9.0克</td><td>15%</td></tr><tr><td>脂肪</td><td>9.9克</td><td>17%</td></tr><tr><td>- 饱和脂肪酸</td><td>2.0克</td><td>10%</td></tr><tr><td>碳水化合物</td><td>48.3克</td><td>16%</td></tr><tr><td><strong>- 糖</strong></td><td>2.6克</td><td></td></tr><tr><td>膳食纤维</td><td>18.0克</td><td>72%</td></tr><tr><td>钠</td><td>4.80毫克</td><td>24%</td></tr><tr><td>维生素Br</td><td>0.16毫克</td><td>11%</td></tr><tr><td>磷</td><td>198毫克</td><td>28%</td></tr><tr><td>钾</td><td>249毫克</td><td>12%</td></tr><tr><td>镁</td><td>78毫克</td><td>26%</td></tr><tr><td>铁</td><td>2.3毫克</td><td>15%</td></tr></tbody></table><h3 id="桂格贝贝南瓜燕麦片"><a href="#桂格贝贝南瓜燕麦片" class="headerlink" title="桂格贝贝南瓜燕麦片"></a>桂格贝贝南瓜燕麦片</h3><p><strong>配料</strong>:燕麦片、桂格高纤谷物粉(冲调谷物制品)、魔芋南瓜麦片、南瓜粉、蔓越莓干、冻千贝贝南瓜丁、白芸豆粉、赤藓糖醇。</p><p><strong>平均添加量</strong>:蔓越莓干3.6%，冻千贝贝南瓜丁2.55%，白芸豆粉0.2%，魔芋0.08%。</p><p><strong>燕麦片添加量</strong>:不低于50%。</p><table><thead><tr><th>项目</th><th>每100克</th><th>营养素参考值%</th></tr></thead><tbody><tr><td>能量</td><td>1503千焦</td><td>18%</td></tr><tr><td>蛋白质</td><td>7.3克</td><td>12%</td></tr><tr><td>脂肪</td><td>9.4克</td><td>16%</td></tr><tr><td>- 饱和脂肪酸</td><td>1.8克</td><td>9%</td></tr><tr><td>碳水化合物</td><td>53 克</td><td>18%</td></tr><tr><td><strong>- 糖</strong></td><td>10.4克</td><td></td></tr><tr><td>膳食纤维</td><td>16.3克</td><td>65%</td></tr><tr><td>钠</td><td>20毫克</td><td>1%</td></tr><tr><td>维生素Br</td><td>0.15毫克</td><td>11%</td></tr><tr><td>磷</td><td>160毫克</td><td>23%</td></tr><tr><td>钾</td><td>238毫克</td><td>12%</td></tr><tr><td>镁</td><td>65毫克</td><td>22%</td></tr><tr><td>铁</td><td>1.9毫克</td><td>13%</td></tr></tbody></table><h3 id="桂格五润燕麦片"><a href="#桂格五润燕麦片" class="headerlink" title="桂格五润燕麦片"></a>桂格五润燕麦片</h3><p><strong>配料</strong>:燕麦片、桂格高纤谷物粉(冲调谷物制品)、猴头菇山药麦片、橘皮红豆米片(冲调谷物制品)、赤小豆片、营养粉(红豆粉,橘皮粉,茯苓粉)、橙皮丁。<br><strong>平均添加量</strong>:燕麦片53%,猴头菇山药麦片8.7%,赤小豆片6%,橘皮粉0.65%,茯苓粉0.04%。</p><table><thead><tr><th>项目</th><th>每100克</th><th>营养素参考值%</th></tr></thead><tbody><tr><td>能量</td><td>1434千焦</td><td>17%</td></tr><tr><td>蛋白质</td><td>9.0克</td><td>15%</td></tr><tr><td>脂肪</td><td>7.0克</td><td>12%</td></tr><tr><td>- 饱和脂肪酸</td><td>1.6克</td><td>8%</td></tr><tr><td>碳水化合物</td><td>52.6克</td><td>18%</td></tr><tr><td>- 糖</td><td>6.5克</td><td></td></tr><tr><td>膳食纤维</td><td>16.0克</td><td>64%</td></tr><tr><td>钠</td><td>8毫克</td><td>0%</td></tr><tr><td>维生素B1</td><td>0.17毫克</td><td>12%</td></tr><tr><td>镁</td><td>90毫克</td><td>30%</td></tr><tr><td>铁</td><td>2.3毫克</td><td>15%</td></tr></tbody></table><h2 id="二星系列"><a href="#二星系列" class="headerlink" title="二星系列"></a>二星系列</h2><p>原因见营养成本表<strong>加粗</strong>部分。</p><h3 id="优形新奥尔良味沙拉鸡胸肉"><a href="#优形新奥尔良味沙拉鸡胸肉" class="headerlink" title="优形新奥尔良味沙拉鸡胸肉"></a>优形新奥尔良味沙拉鸡胸肉</h3><table><thead><tr><th>项目</th><th>每100克</th><th>NRV%</th></tr></thead><tbody><tr><td>能量</td><td>501千焦</td><td>6%</td></tr><tr><td>蛋白质</td><td>24.0克</td><td>40%</td></tr><tr><td>脂肪</td><td>1.6克</td><td>3%</td></tr><tr><td>碳水化合物</td><td>2.0克</td><td>1%</td></tr><tr><td><strong>钠</strong></td><td>596毫克</td><td>30%</td></tr></tbody></table><h2 id="一星系列"><a href="#一星系列" class="headerlink" title="一星系列"></a>一星系列</h2><h3 id="补剂"><a href="#补剂" class="headerlink" title="补剂"></a>补剂</h3><p>主要是用来补充营养元素的。</p><ul><li>复合维生素</li><li>高纯度Omega3</li><li>蛋白粉</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://mp.weixin.qq.com/s/xdaLhyD7vHWEnPDBdRx6HA">如何饲养好一只「大脑」</a></li></ul><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>健康</category>
      
    </categories>
    
    
    <tags>
      
      <tag>食物</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git客户端工具GitUi安装及使用</title>
    <link href="/blog/2024/03/Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7GitUi%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8.html"/>
    <url>/blog/2024/03/Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7GitUi%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="GitUi介绍"><a href="#GitUi介绍" class="headerlink" title="GitUi介绍"></a>GitUi介绍</h2><blockquote><p>GitUI provides you with the comfort of a git GUI but right in your terminal.<br>GitUI是一个Git GUI客户端，但是它直接在终端中运行。</p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p>快速而直观的纯键盘操作控制<br>提供了一个针对高效用户优化的流线型界面，所有操作都可以通过键盘快捷键高效完成，从而最大程度减少对鼠标或触控板的依赖。</p></li><li><p>基于上下文的帮助<br>无需记忆大量热键，应用会根据当前操作场景自动提供相关帮助信息。</p></li><li><p>查看、提交与修订变更<br>（包含钩子功能：pre-commit, commit-msg, post-commit, prepare-commit-msg）：能够查看工作区状态，提交版本更新，并在必要时修订已提交的变更，同时支持预提交和提交后的各种脚本钩子功能。</p></li><li><p>暂存、取消暂存、还原与重置文件、块和行<br>可以灵活管理暂存区，实现文件部分或全部内容的暂存、取消暂存，以及回滚到某个历史版本的状态。</p></li><li><p>储藏功能<br>（保存、弹出、应用、丢弃及检查）：支持临时存储工作区未提交的变化，并能在之后随时恢复或应用这些变化。</p></li><li><p>向远程仓库推送与从远程仓库拉取<br>进行版本同步操作，包括将本地分支的变更推送到远程仓库，以及从远程仓库获取最新的提交。</p></li><li><p>分支列表管理<br>（创建、重命名、删除、检出、处理远程分支）：提供全面的分支管理功能，包括新建、改名、删除分支，切换分支以及与远程分支的交互。</p></li><li><p>浏览与搜索提交日志、比较已提交的差异<br>允许用户查看项目的历史提交记录，搜索特定提交，并能可视化比较不同提交之间的差异。</p></li><li><p>响应式终端用户界面<br>界面设计为适应不同终端尺寸和分辨率，确保良好的用户体验。</p></li><li><p>异步 Git API 实现流畅控制<br>通过异步处理 Git 操作来提升应用性能，使得用户操作更加流畅无阻。</p></li><li><p>子模块支持<br>内置对 Git 子模块的支持，能够方便地管理和跟踪项目中的嵌套 Git 仓库。</p></li><li><p>GPG 提交签名<br>支持使用 GPG 对提交进行数字签名以保证提交者的身份验证和数据完整性，但同时也指出在某些情况下可能存在问题或限制。</p></li></ul><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>进入GitUi的下载地址，根据操作系统选择对应的安装包进行安装。<br><a href="https://github.com/extrawurst/gitui/releases">GitUi下载</a></p><p>以Windows为例：<br><img src="/blog/./assets/image-16768202869359616.png" alt="gitui制品包"></p><p>下载gitui.msi文件，双击安装即可。安装完成后新建一个终端，进入一个Git仓库目录，在命令行中输入<code>gitui</code>打开GitUi界面。<br><img src="/blog/./assets/image-16768202914071552.png" alt="gitui界面"></p><h3 id="GitUi常用快捷键"><a href="#GitUi常用快捷键" class="headerlink" title="GitUi常用快捷键"></a>GitUi常用快捷键</h3><p>GItUi默认的快捷键是基于键盘上下左右键的，可以通过<code>F1</code>键查看快捷键列表。你可以自定义快捷键，具体操作可以参考<a href="https://github.com/extrawurst/gitui/blob/master/KEY_CONFIG.md">GitUi文档</a>。</p><p>这里将GitUi快捷键修改为Vim风格为例：</p><p>下载<a href="https://raw.githubusercontent.com/extrawurst/gitui/master/vim_style_key_config.ron">vim_style_key_config.ron</a>文件修改名称为<code>key_bindings.ron</code>。</p><p>打开资源管理器目录，在地址栏输入<code>%appdata%\gitui</code>，找到<code>key_bindings.ron</code>文件，将文件复制到<code>%appdata%\gitui</code>目录下。</p><p><img src="/blog/./assets/image-16768202949673984.png" alt="key_bindings.ron"></p><p>配置完成后，在GitUi中按<code>F1</code>键查看快捷键列表，可以看到快捷键已经修改为Vim风格。</p><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h3><p>在GitUi中，可以通过<code>I</code>键进入编辑模式，此时可以编辑文件。默认的编辑器为<code>vi</code>，但在Windows下，可能会出现<code>vi</code>命令无法使用的情况。</p><p><img src="/blog/./assets/image-16768202733110272.png" alt="vi命令报错"></p><p>需要手动指定编辑器。可以通过设置<code>GIT_EDITOR</code>、 <code>VISUAL</code>或 <code>EDITOR</code>环境变量的方式生效。</p><p>设置临时环境变量:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">set</span> EDITOR=nvim<br></code></pre></td></tr></table></figure><p>设置永久环境变量:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">setx EDITOR nvim<br></code></pre></td></tr></table></figure><p>设置完环境变量后，新建一个终端，进入一个Git仓库目录，在命令行中输入<code>gitui</code>打开GitUi界面。再次编辑文件，可以看到编辑器已经切换为<code>nvim</code>。</p><h3 id="提交到暂存区"><a href="#提交到暂存区" class="headerlink" title="提交到暂存区"></a>提交到暂存区</h3><p>当修改了一个已经被Git追踪的文件，该文件处于”modified”（已修改）状态。如果想要将这些更改包含在下一次提交中，需要先将它们添加到暂存区域（也称为索引），此时文件就进入了”staged”状态。在GitUi中，可以通过<code>回车</code>键将选中的文件添加到暂存区，通过<code>a</code>键将所有文件文件添加到暂存区。对应的Git命令为<code>git add &lt;file&gt;</code>。</p><p><img src="/blog/./assets/image-16768202668049408.png" alt="暂存区"></p><h3 id="提交本地历史"><a href="#提交本地历史" class="headerlink" title="提交本地历史"></a>提交本地历史</h3><p>在GitUi中，可以通过<code>c</code>键提交本地历史，此时会弹出提交信息输入框，输入提交信息后，可以通过<code>ctrl+d</code>键提交，也可以通过<code>esc</code>键取消提交。对应的Git命令为<code>git commit -m &lt;message&gt;</code>。<br><img src="/blog/./assets/image-16768202776347648.png" alt="commit"></p><h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><p>在GitUi中，可以通过数字<code>2</code>键查看提交日志，此时会切换到log栏，可以数据<code>1</code>键回到Status栏。对应的Git命令为<code>git log</code>。</p><p><img src="/blog/./assets/image-16768202814080000.png" alt="Log"></p><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p>在GitUi中，可以通过<code>p</code>键推送到远程仓库。对应的Git命令为<code>git push &lt;remote&gt; &lt;branch&gt;</code>。</p><p>在推送的时候可能会遇到认证失败的问题。</p><p><img src="/blog/./assets/image-20240331120735204.png" alt="push failed"></p><p>需要配置ssh代理。参考配置<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent">Adding your SSH key to the ssh-agent</a>。</p><p>步骤：</p><ol><li>打开命令行窗口，执行下面的命令生成ssh key。</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;<br></code></pre></td></tr></table></figure><ol start="2"><li>以管理员身份运行powershell,并执行下面的命令。</li></ol><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ps1"><span class="hljs-comment"># start the ssh-agent in the background</span><br><span class="hljs-built_in">Get-Service</span> <span class="hljs-literal">-Name</span> ssh<span class="hljs-literal">-agent</span> | <span class="hljs-built_in">Set-Service</span> <span class="hljs-literal">-StartupType</span> Manual<br><span class="hljs-built_in">Start-Service</span> ssh<span class="hljs-literal">-agent</span><br></code></pre></td></tr></table></figure><ol start="3"><li>新建一个普通命令行窗口，并执行下面的命令。</li></ol><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ps1">ssh<span class="hljs-literal">-add</span> c:/Users/YOU/.ssh/id_ed25519<br></code></pre></td></tr></table></figure><ol start="4"><li>新建一个命令行窗口，打开GitUi，通过<code>p</code>键推送到远程仓库。</li></ol><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>GitUi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技能证书合集</title>
    <link href="/blog/2024/03/%E6%8A%80%E8%83%BD%E8%AF%81%E4%B9%A6%E5%90%88%E9%9B%86.html"/>
    <url>/blog/2024/03/%E6%8A%80%E8%83%BD%E8%AF%81%E4%B9%A6%E5%90%88%E9%9B%86.html</url>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes管理员"><a href="#Kubernetes管理员" class="headerlink" title="Kubernetes管理员"></a>Kubernetes管理员</h2><p><img src="/blog/./assets/CKA.png" alt="CKA"></p><h2 id="Kubernetes应用开发者"><a href="#Kubernetes应用开发者" class="headerlink" title="Kubernetes应用开发者"></a>Kubernetes应用开发者</h2><p><img src="/blog/./assets/CKAD.png" alt="CKAD"></p><h2 id="Kubernetes安全专家"><a href="#Kubernetes安全专家" class="headerlink" title="Kubernetes安全专家"></a>Kubernetes安全专家</h2><p><img src="/blog/./assets/CKS.png" alt="CKS"></p><h2 id="Prometheus工程师"><a href="#Prometheus工程师" class="headerlink" title="Prometheus工程师"></a>Prometheus工程师</h2><p><img src="/blog/./assets/PCA.png" alt="PCA"></p><h2 id="红帽系统管理员"><a href="#红帽系统管理员" class="headerlink" title="红帽系统管理员"></a>红帽系统管理员</h2><p><img src="/blog/./assets/RHCSA.png" alt="RHCSA"></p><h2 id="红帽系统工程师"><a href="#红帽系统工程师" class="headerlink" title="红帽系统工程师"></a>红帽系统工程师</h2><p><img src="/blog/./assets/RHCE.png" alt="RHCE"></p><h2 id="MeterSphere持续测试工程师"><a href="#MeterSphere持续测试工程师" class="headerlink" title="MeterSphere持续测试工程师"></a>MeterSphere持续测试工程师</h2><p><img src="/blog/./assets/MeterSphere.png" alt="MeterSphere"></p><h2 id="数据分析L1"><a href="#数据分析L1" class="headerlink" title="数据分析L1"></a>数据分析L1</h2><p><img src="/blog/./assets/Data_Science-L1.png" alt="Data Science -L1"></p><h2 id="WPS文字专家"><a href="#WPS文字专家" class="headerlink" title="WPS文字专家"></a>WPS文字专家</h2><p><img src="/blog/./assets/WPS%E6%96%87%E5%AD%97.jpg" alt="WPS文字"></p><h2 id="WPS演示专家"><a href="#WPS演示专家" class="headerlink" title="WPS演示专家"></a>WPS演示专家</h2><p><img src="/blog/./assets/WPS%E6%BC%94%E7%A4%BA.jpg" alt="WPS演示"></p><h2 id="WPS表格专家"><a href="#WPS表格专家" class="headerlink" title="WPS表格专家"></a>WPS表格专家</h2><p><img src="/blog/./assets/WPS%E8%A1%A8%E6%A0%BC.jpg" alt="WPS表格"></p><h2 id="WPS大师"><a href="#WPS大师" class="headerlink" title="WPS大师"></a>WPS大师</h2><p><img src="/blog/./assets/WPS%E5%A4%A7%E5%B8%88.jpg" alt="WPS大师"></p><h2 id="阿里巴巴编码规范"><a href="#阿里巴巴编码规范" class="headerlink" title="阿里巴巴编码规范"></a>阿里巴巴编码规范</h2><p><img src="/blog/./assets/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83.jpg" alt="阿里巴巴编码规范"></p><h2 id="函数计算的功能与使用入门"><a href="#函数计算的功能与使用入门" class="headerlink" title="函数计算的功能与使用入门"></a>函数计算的功能与使用入门</h2><p><img src="/blog/./assets/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E7%9A%84%E5%8A%9F%E8%83%BD%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.png" alt="函数计算的功能与使用入门"></p><h2 id="函数计算入门和实战"><a href="#函数计算入门和实战" class="headerlink" title="函数计算入门和实战"></a>函数计算入门和实战</h2><p><img src="/blog/./assets/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E5%85%A5%E9%97%A8%E5%92%8C%E5%AE%9E%E6%88%98.png" alt="函数计算入门和实战"></p><h2 id="Serverless应用快速体验"><a href="#Serverless应用快速体验" class="headerlink" title="Serverless应用快速体验"></a>Serverless应用快速体验</h2><p><img src="/blog/./assets/Serverless%E5%BA%94%E7%94%A8%E5%BF%AB%E9%80%9F%E4%BD%93%E9%AA%8C.png" alt="Serverless应用快速体验"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Kubernates</tag>
      
      <tag>Prometheus</tag>
      
      <tag>Word</tag>
      
      <tag>Excel</tag>
      
      <tag>PPT</tag>
      
      <tag>Metersphere</tag>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cookie、Session、Token的区别</title>
    <link href="/blog/2023/11/Cookie%E3%80%81Session%E3%80%81Token%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <url>/blog/2023/11/Cookie%E3%80%81Session%E3%80%81Token%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    
    <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>Cookie、Session和Token是用于身份验证和用户状态管理的不同机制。它们在Web应用程序中的使用有一些关键区别：</p><ol><li><p>Cookie（HTTP Cookie）：</p><ul><li>Cookie是一种客户端存储数据的机制，通常是一个小的文本文件，Key和Value的字符串格式。</li><li>服务器可以通过HTTP响应的<code>Set-Cookie</code>头将Cookie发送给客户端浏览器，然后浏览器将Cookie保存并在后续请求中自动包含在<code>Cookie</code>头中。</li><li>Cookie通常用于跟踪用户会话、存储用户首选项和其他客户端相关的数据。</li><li>Cookie可以设置过期时间，可以是会话级别的（浏览器关闭后失效）或持久的（在指定过期日期之前有效）。</li><li>Cookie是与域名绑定的，无法跨域访问，但可以在一级域名和二级域名之间共享。同时，浏览器对每个域名下的Cookie数量有限制（单个Cookei大小4KB）。跨域数据共享通常需要使用其他机制，如CORS。这些规则和限制有助于确保用户隐私和安全。</li></ul></li><li><p>Session（会话）：</p><ul><li>会话是服务器端的机制，用于跟踪和管理用户状态。</li><li>会话通常使用Cookie或URL参数来维护一个唯一的会话标识符（Session ID），该标识符关联到服务器端存储的用户数据。</li><li>会话允许服务器存储和检索与特定用户相关的数据，以保持用户的身份认证状态和其他用户特定的信息。</li><li>会话数据通常存储在服务器内存、数据库或分布式缓存中，因此对于服务器来说是可控的。</li><li>Session和Cookie是协同工作的。Session存储在服务器端，但Session ID 存储在客户端的Cookie中，通过Session ID，服务器可以识别和恢复与特定用户相关的会话数据。</li></ul></li><li><p>Token（令牌）：</p><ul><li><p>令牌通常是一串长字符串，用于身份验证和授权。</p></li><li><p>令牌通常使用一种独立于会话状态的机制来实现，如JSON Web Tokens（JWT）。</p></li><li><p>令牌通常包含有关用户身份的信息，可以包括用户ID、权限、过期时间等。</p></li><li><p>令牌通常在客户端和服务器之间传递，并用于授权访问受保护的资源，如API端点。</p></li></ul></li></ol><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th></th><th align="center">Cookie</th><th align="center">Session</th><th align="center">Token</th></tr></thead><tbody><tr><td>数据存储</td><td align="center">客户端存储</td><td align="center">服务器端生成</td><td align="center">服务器端生成</td></tr><tr><td>认证授权</td><td align="center">保存用户数据</td><td align="center">跟踪用户状态和保存用户数据</td><td align="center">身份验证和授权</td></tr><tr><td>跨域支持</td><td align="center">不支持</td><td align="center">不支持</td><td align="center">支持</td></tr></tbody></table><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cookie</tag>
      
      <tag>Session</tag>
      
      <tag>Token</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot可以直接运行Jar的原理</title>
    <link href="/blog/2023/11/SpringBoot%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8CJar%E7%9A%84%E5%8E%9F%E7%90%86.html"/>
    <url>/blog/2023/11/SpringBoot%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8CJar%E7%9A%84%E5%8E%9F%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot可以直接运行Jar的原理"><a href="#SpringBoot可以直接运行Jar的原理" class="headerlink" title="SpringBoot可以直接运行Jar的原理"></a>SpringBoot可以直接运行Jar的原理</h2><p>Spring Boot的Jar包可以直接运行，主要是因为它内置了嵌入式的Servlet容器（例如Tomcat、Jetty或Undertow），并且使用了可执行的JAR文件格式，这使得应用程序可以作为独立的Java进程运行。</p><p>那么Spring Boot如何创建可执行的Jar文件以及如何启动应用程序：</p><ol><li><p>Spring Boot Maven插件：<code>spring-boot-maven-plugin</code>是用于将Spring Boot应用程序打包成可执行的Jar文件的插件。它允许你执行<code>mvn clean install</code> 或 <code>mvn package</code> 命令来创建一个包含应用程序代码和依赖项的Jar文件。</p></li><li><p>Fat Jar：生成的Jar文件通常被称为”Fat Jar”，因为它包含了应用程序的代码和所有依赖的Jar文件。这使得Jar文件可以独立运行，无需额外的类路径配置。</p></li><li><p>Manifest文件：在生成的Fat Jar中，通常包含一个特殊的Manifest文件，其中包含了应用程序的启动类信息。这是因为Java命令需要知道应用程序的入口点，而Manifest文件指定了启动类。</p></li><li><p>JarLauncher：Spring Boot的Fat Jar中通常包含了一个名为<code>JarLauncher</code>的类，它负责创建一个<code>LaunchedURLClassLoader</code>来加载应用程序的依赖Jar，然后以一个新线程启动应用程序的Main函数。这个过程使得应用程序可以在独立的Java进程中运行。</p></li></ol><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>服务框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Jar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTPS的原理</title>
    <link href="/blog/2023/11/HTTPS%E7%9A%84%E5%8E%9F%E7%90%86.html"/>
    <url>/blog/2023/11/HTTPS%E7%9A%84%E5%8E%9F%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<h2 id="HTTPS的原理"><a href="#HTTPS的原理" class="headerlink" title="HTTPS的原理"></a>HTTPS的原理</h2><p>HTTPS（Hypertext Transfer Protocol Secure）是一种用于安全传输数据的通信协议，它基于HTTP协议，并通过加密和认证机制提供了数据保护和隐私保护。HTTPS的工作原理可以概括为以下几个步骤：</p><ol><li><p>握手阶段（Handshake Phase）：</p><ul><li>客户端向服务器发送一个加密连接请求，即HTTPS请求。</li><li>服务器会响应客户端的请求，并发送一个包含公钥、加密方法和证书的信息。</li><li>客户端验证服务器的证书是否有效，通常是通过证书颁发机构（Certificate Authority，CA）的数字签名进行验证。</li><li>客户端生成一个随机的对称密钥(随机码KEY），用于在通信中加密和解密数据，然后使用服务器的公钥对该密钥进行加密，将其发送给服务器。</li></ul></li><li><p>密钥交换阶段（Key Exchange Phase）：</p><ul><li>服务器使用自己的私钥解密客户端发送过来的加密的对称密钥。</li><li>现在，客户端和服务器都拥有了相同的对称密钥，用于在通信中进行加密和解密操作。</li></ul></li><li><p>安全通信阶段（Secure Communication Phase）：</p><ul><li>客户端和服务器使用共享的对称密钥对数据进行加密和解密。这意味着数据在传输过程中会被加密，从而保护了数据的隐私和完整性。</li></ul></li></ol><p>通过这些步骤，HTTPS实现了以下关键原理：</p><ul><li><p><strong>数据加密</strong>：HTTPS使用对称密钥加密来保护数据的机密性，只有具有正确密钥的双方才能解密和理解数据。这使得窃听者难以解密传输的数据。</p></li><li><p><strong>身份认证</strong>：服务器的证书由可信的证书颁发机构签发，这意味着客户端可以验证服务器的身份。这有助于防止中间人攻击，确保客户端正在与正确的服务器通信。</p></li><li><p><strong>数据完整性</strong>：HTTPS还提供了数据完整性，确保传输的数据在传输过程中没有被篡改。这是通过在数据上应用消息认证码（MAC）来实现的。</p></li></ul><p>总之，HTTPS通过加密、认证和数据完整性保护了数据的隐私和安全，使得网站和应用程序能够安全地进行敏感信息的传输，如登录凭据、支付信息等。这使得用户能够信任网站，并减少了潜在的安全威胁。</p><p><img src="/blog/./assets/image-20231104222418466.png" alt="HTTPS原理"></p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>HTTPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用SSH本地端口转发调试远程环境</title>
    <link href="/blog/2023/11/%E4%BD%BF%E7%94%A8SSH%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E8%B0%83%E8%AF%95%E8%BF%9C%E7%A8%8B%E7%8E%AF%E5%A2%83.html"/>
    <url>/blog/2023/11/%E4%BD%BF%E7%94%A8SSH%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E8%B0%83%E8%AF%95%E8%BF%9C%E7%A8%8B%E7%8E%AF%E5%A2%83.html</url>
    
    <content type="html"><![CDATA[<h2 id="本地开发环境配置"><a href="#本地开发环境配置" class="headerlink" title="本地开发环境配置"></a>本地开发环境配置</h2><p>SSH -L是SSH命令中的一个选项，用于在SSH连接中设置本地端口转发。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ssh -L <span class="hljs-selector-attr">[本地地址:]</span>本地端口:目标地址:目标端口 用户@远程主机<br></code></pre></td></tr></table></figure><ul><li><p><code>[本地地址:]本地端口</code>：这是本地端口转发的设置。你可以选择性地指定本地地址（通常是”localhost”或”127.0.0.1”），然后指定一个本地端口。这个本地端口将会被SSH客户端监听，用于接收来自本地系统的连接。</p></li><li><p><code>目标地址:目标端口</code>：这是你希望将本地连接转发到的远程目标地址和端口。当本地端口接收到连接时，SSH客户端将会将这些连接转发到目标地址和端口上。</p></li><li><p><code>用户@远程主机</code>：SSH连接的目标远程主机和用户。</p></li></ul><p>SSH -L选项允许你在本地系统和远程系统之间创建一个安全的通道，以便将本地端口上的流量转发到远程主机的指定端口。这对于访问受限制的资源或者建立安全的连接非常有用，例如在本地计算机上运行一个服务，但需要通过SSH连接到远程服务器来访问该服务。</p><p>例如，以下是一个使用SSH -L进行本地端口转发的示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -L <span class="hljs-number">8081</span>:example.com:<span class="hljs-number">8080</span> user@remote-server<br></code></pre></td></tr></table></figure><p>这将会在本地主机上的端口8081上创建一个监听，当有连接时，它将把连接转发到远程服务器example.com的端口8080上。这样，你可以通过访问本地主机的端口8080来访问远程服务器上的8080端口Web服务。</p><p><img src="/blog/./assets/image-20231104094159914.png" alt="SSH本地端口转发"></p><h2 id="线上预发环境配置"><a href="#线上预发环境配置" class="headerlink" title="线上预发环境配置"></a>线上预发环境配置</h2><p><img src="/blog/./assets/image-20231104095120831.png" alt="预发环境java配置参数"></p><p>通过IDEA工具生成的配置参数做为JVM选项设置到线上的机器中。其中：</p><p><code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8080</code> 是一个Java虚拟机（JVM）调试选项，用于启用Java远程调试协议（JDWP）的调试代理，并指定了监听的端口号为8080。这个选项的各个部分的含义如下：</p><ul><li><p><code>-agentlib:jdwp</code>：这部分表示要启用JDWP调试代理库。</p></li><li><p><code>transport=dt_socket</code>：这部分指定了JDWP调试代理的通信传输协议，这里使用的是Socket通信。</p></li><li><p><code>server=y</code>：这部分表示JDWP代理将作为服务器运行，等待调试器连接。</p></li><li><p><code>suspend=n</code>：这部分表示应用程序在启动时不会挂起，即不会等待调试器连接。</p></li><li><p><code>address=*:8080</code>：这部分指定了JDWP代理监听的地址和端口。在这个示例中，<code>*</code> 表示监听所有可用的网络接口，而 <code>8080</code> 是监听的端口号。这意味着JDWP代理将在所有网络接口上的8080端口上等待调试器连接。</p></li></ul><p>这个选项用于启用Java应用程序的远程调试功能，允许你连接到正在运行的Java应用程序，以进行代码调试、观察变量和跟踪应用程序的执行。确保在使用这个选项时谨慎操作，只应该在开发和调试阶段使用。不要在生产环境中启用JDWP调试代理，以避免潜在的安全漏洞。</p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Debug</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ConcurrentHashMap的键和值都不能为空</title>
    <link href="/blog/2023/11/ConcurrentHashMap%E7%9A%84%E9%94%AE%E5%92%8C%E5%80%BC%E9%83%BD%E4%B8%8D%E8%83%BD%E4%B8%BA%E7%A9%BA.html"/>
    <url>/blog/2023/11/ConcurrentHashMap%E7%9A%84%E9%94%AE%E5%92%8C%E5%80%BC%E9%83%BD%E4%B8%8D%E8%83%BD%E4%B8%BA%E7%A9%BA.html</url>
    
    <content type="html"><![CDATA[<h2 id="ConcurrentHashMap的键和值都不能为空"><a href="#ConcurrentHashMap的键和值都不能为空" class="headerlink" title="ConcurrentHashMap的键和值都不能为空"></a>ConcurrentHashMap的键和值都不能为空</h2><p>查看源码，在 put 方法里面，如果 key 或者 value 为空，则抛出空指针异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> spread(key.hashCode());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这是为了避免在多线程环境下出现歧义问题。</p><h3 id="key不能为null的原因"><a href="#key不能为null的原因" class="headerlink" title="key不能为null的原因"></a>key不能为null的原因</h3><p>线程 t1 调用 containsKey 方法判断 key 是否存在，假设当前这个 key 不存在，本来应该返回 false。</p><p>但是在 T1 线程返回之前，正好有一个 T2 线程插入了这个 key，但是 value 为 null。</p><p>这就导致原本 T1 线程返回的结果有可能是 true，有可能是 false，取决于 T1 和 T2 线程的执行顺序。</p><p><img src="/blog/./assets/image-20231103162609717.png" alt="image-20231103162609717"></p><h3 id="value不能为null的原因"><a href="#value不能为null的原因" class="headerlink" title="value不能为null的原因"></a>value不能为null的原因</h3><p>到底是插入的 null值，还是集合中不存在才返回的 null值。这就产生了歧义问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> ConcurrentHashMap 又是一个线程安全的集合，所以自然就不允许 key 或者 value 为 null。</p><p>而 HashMap 中是允许存 null 的，因为它不需要考虑到线程安全性问题。</p><p>ConcurrentHashMap 的作者 Doug Lea对于 ConcurrentHashMap 不允许插入 null 值的回答。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">The main reason that nulls aren&#x27;t allowed in ConcurrentMaps<br><br>(ConcurrentHashMaps, ConcurrentSkipListMaps) is that ambiguities that may<br>be just barely tolerable in non-concurrent maps can&#x27;t be accommodated. The<br>main one is that if map.get(key) returns null, you can&#x27;t detect whether the key<br>explicitly maps to null vs the key isn&#x27;t mapped.In a non-concurrent map, you<br>can check this via map.contains(key),but in a concurrent one, the map might<br>have changed between calls. <br><br>Further digressing: I personally think that allowingnulls in Maps (also Sets) is an<br>open invitation for programsto contain errors that remain undetected untilthey<br>break at just the wrong time. (Whether to allow nulls evenin non-concurrent<br>Maps/Sets is one of the few design issues surroundingCollections that Josh<br>Bloch and I have long disagreed about.)<br><br>It is very difficult to check for null keys and valuesin my entire application . Would it be easier to declare somewherestatic final Object NULL = new<br>Object();and replace all use of nulls in uses of maps with NULL?<br>-Dougv<br></code></pre></td></tr></table></figure><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>ConcurrentHashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/blog/2023/11/%E6%A0%88.html"/>
    <url>/blog/2023/11/%E6%A0%88.html</url>
    
    <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈这种数据结构，在计算机中有着广泛地运用，比如编程语言中函数的调用、操作系统中从用户态到内核态寄存器的保存、网络消息的处理等都会用到栈。</p><p>栈是先进后出（LIFO）顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>t.push(<span class="hljs-string">&#x27;a&#x27;</span>);<br>t.push(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-comment">// 这里得到栈顶元素&#x27;b&#x27;</span><br>t.peek(); <br><span class="hljs-comment">// 这里将栈顶元素&#x27;b&#x27;弹出</span><br>t.pop();  <br><span class="hljs-comment">// 此时栈顶元素为&#x27;a&#x27;</span><br>t.peek(); <br><span class="hljs-comment">// 这里将栈顶元素&#x27;a&#x27;弹出</span><br>t.pop();  <br></code></pre></td></tr></table></figure><p>对应的代码动画演示：</p><p><img src="/blog/./assets/Cgp9HWA4jJaAMKH7ADCb3Og8L1Q358.gif" alt="栈动画演示"></p><h2 id="判断字符括号是否合法"><a href="#判断字符括号是否合法" class="headerlink" title="判断字符括号是否合法"></a>判断字符括号是否合法</h2><p>【题目】字符串中只有字符’(‘和’)’。合法字符串需要括号可以配对。比如：<br>输入：”()”<br>输出：true<br>解释：()，()()，(())是合法的。)(，()(，(()是非法的。<br>请你实现一个函数，来判断给定的字符串是否合法。<br>boolean isValid(String s);</p><p>通过四步分析法：</p><ol><li><p>模拟：模拟题目的运行。</p></li><li><p>规律：尝试总结出题目的一般规律和特点。</p></li><li><p>匹配：找到符合这些特点的数据结构与算法。</p></li><li><p>边界：考虑特殊情况。</p></li></ol><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p>首先我们以字符串 s &#x3D; “()()(())”，进行模拟，如下动图所示：</p><p><img src="/blog/./assets/CioPOWA4jh2AHCJwACmFB7AcuZA768.gif" alt="括号匹配动画演示"></p><h3 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h3><ul><li>每个左括号’(‘或者右括号’)’都完成配对，才是合法的。</li><li>配对可以通过消除法来消掉合法的括号，如果最后没有任何字符了，那么就是合法字符串。</li><li>奇数长度的字符串总是非法的。</li></ul><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><p>可以用栈来进行消除法的模拟。</p><h3 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h3><p>找到问题匹配的算法或者数据结构之后，并不是马上写代码，而是要考虑一些边界问题，也就是一些特殊情况：</p><ul><li><p>字符串为空</p></li><li><p>字符串只有 1 个或者奇数个</p></li><li><p>字符串是”(((())))”嵌套很多层的是否可以处理</p></li></ul><p><img src="/blog/./assets/Cgp9HWA4kDOANTojAGASkY8p8QQ593.gif" alt="栈模拟消除"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.length() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (s.length() % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    Stack&lt;Character&gt; t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Character&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>            <span class="hljs-comment">// 如果是&#x27;(&#x27;，那么压栈</span><br>            t.push(c);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>            <span class="hljs-comment">// 如果是&#x27;)&#x27;，那么就尝试弹栈</span><br>            <span class="hljs-keyword">if</span> (t.empty()) &#123;<br>                <span class="hljs-comment">// 如果弹栈失败，那么返回false</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            t.pop();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> t.empty();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>每个字符只入栈一次，出栈一次，所以时间复杂度为 $O(N)$，而空间复杂度为 $O(N)$，因为最差情况下可能会把整个字符串都入栈。<br>我们还需要从两个角度进行深度思考：</p><h4 id="深度，比如这种解法还可以怎么优化呢？"><a href="#深度，比如这种解法还可以怎么优化呢？" class="headerlink" title="深度，比如这种解法还可以怎么优化呢？"></a>深度，比如这种解法还可以怎么优化呢？</h4><p>栈中元素都相同时，实际上没有必要使用栈，只需要记录栈中元素个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid2</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.length() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s.length() % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">leftBraceNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>            ++leftBraceNumber;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (leftBraceNumber &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            --leftBraceNumber;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> leftBraceNumber == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="广度，比如这种解法具有普适性吗？"><a href="#广度，比如这种解法具有普适性吗？" class="headerlink" title="广度，比如这种解法具有普适性吗？"></a>广度，比如这种解法具有普适性吗？</h4><p>拓展：给出一个仅包含字符’(‘,’)’,’{‘,’}’,’[‘和’]’,的字符串，判断给出的字符串是否是合法的括号序列<br>括号必须以正确的顺序关闭，”()”和”()[]{}”都是合法的括号序列，但”(]”和”([)]”不合法。</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">Stack&lt;Character&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>    <span class="hljs-comment">// 根据字符类型，执行不同的操作</span><br>    <span class="hljs-keyword">switch</span> (s.charAt(i)) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>            <span class="hljs-comment">// 将该左括号入栈，表示待匹配</span><br>            stk.push(s.charAt(i));<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>            <span class="hljs-comment">// 检查堆栈是否为空，或者堆栈顶部的字符不是左括号 &#x27;(&#x27;</span><br>            <span class="hljs-keyword">if</span> (stk.empty() || stk.peek() != <span class="hljs-string">&#x27;(&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 括号不匹配，返回 false</span><br>            stk.pop();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>            <span class="hljs-keyword">if</span> (stk.empty() || stk.peek() != <span class="hljs-string">&#x27;[&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            stk.pop();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>            <span class="hljs-keyword">if</span> (stk.empty() || stk.peek() != <span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            stk.pop();<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 如果所有字符都遍历完并且堆栈为空，表示括号匹配成功，返回 true，否则返回 false</span><br><span class="hljs-keyword">return</span> stk.empty();<br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用HashMap存储括号的对应关系</span><br>Map&lt;Character, Character&gt; bracketPairs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>bracketPairs.put(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>);<br>bracketPairs.put(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>);<br>bracketPairs.put(<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>);<br><br>Stack&lt;Character&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(i);<br>    <span class="hljs-comment">// 如果字符是右括号</span><br>    <span class="hljs-keyword">if</span> (bracketPairs.containsKey(c)) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">topElement</span> <span class="hljs-operator">=</span> stk.empty() ? <span class="hljs-string">&#x27;#&#x27;</span> : stk.pop();<br>        <span class="hljs-keyword">if</span> (topElement != bracketPairs.get(c)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果字符是左括号，直接入栈</span><br>        stk.push(c);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 最后只需检查堆栈是否为空即可</span><br><span class="hljs-keyword">return</span> stk.isEmpty();<br></code></pre></td></tr></table></figure><h2 id="大鱼吃小鱼"><a href="#大鱼吃小鱼" class="headerlink" title="大鱼吃小鱼"></a>大鱼吃小鱼</h2><p>【题目】在水中有许多鱼，可以认为这些鱼停放在 x 轴上。再给定两个数组 Size，Dir，Size[i] 表示第 i 条鱼的大小，Dir[i] 表示鱼的方向 （0 表示向左游，1 表示向右游）。这两个数组分别表示鱼的大小和游动的方向，并且两个数组的长度相等。鱼的行为符合以下几个条件:</p><p>所有的鱼都同时开始游动，每次按照鱼的方向，都游动一个单位距离；</p><p>当方向相对时，大鱼会吃掉小鱼；</p><p>鱼的大小都不一样。</p><p>输入：Size &#x3D; [4, 2, 5, 3, 1], Dir &#x3D; [1, 1, 0, 0, 0]<br>输出：3<br>请完成以下接口来计算还剩下几条鱼？<br>int solution(int[] Size, int[] Dir);</p><h3 id="模拟-1"><a href="#模拟-1" class="headerlink" title="模拟"></a>模拟</h3><p>Size &#x3D; [4, 3, 2, 1, 5], Dir &#x3D; [0, 1, 0, 0, 0]</p><pre><code class=" mermaid">timeline    title  大鱼吃小鱼    初始 : [4, 3, 2, 1, 5]    第一次 : [4, 3, 1, 5]    第二次 : [4, 3, 5]    第三次 : [4, 5]</code></pre><h3 id="规律-1"><a href="#规律-1" class="headerlink" title="规律"></a>规律</h3><p>通过模拟，可以发现如下规律:</p><ul><li><p>如果两条鱼相对而游时，那么较小的鱼会被吃掉；</p></li><li><p>其他情况没有鱼被吃掉。</p></li></ul><h3 id="匹配-1"><a href="#匹配-1" class="headerlink" title="匹配"></a>匹配</h3><p>我们发现，活下来的鱼的行为就是一个栈。每当有新的鱼要进来的时候，就会与栈顶的鱼进行比较。那么我们匹配到的算法就是栈了。</p><h3 id="边界-1"><a href="#边界-1" class="headerlink" title="边界"></a>边界</h3><ul><li><p>所有的鱼都朝着一个方向游；</p></li><li><p>一条鱼吃掉了其他的所有鱼。</p></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">solution</span><span class="hljs-params">(<span class="hljs-type">int</span>[] fishSize, <span class="hljs-type">int</span>[] fishDirection)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">fishNumber</span> <span class="hljs-operator">=</span> fishSize.length;<br>    <span class="hljs-keyword">if</span> (fishNumber &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> fishNumber; <span class="hljs-comment">// 如果只有一个或没有鱼，直接返回鱼的数量，不需要模拟碰撞</span><br>    &#125;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 定义常量来表示鱼的方向，0 表示向左游</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 1 表示向右游</span><br><br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;(); <span class="hljs-comment">// 创建一个栈来模拟鱼的相遇和碰撞情况</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; fishNumber; i++) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">curFishDirection</span> <span class="hljs-operator">=</span> fishDirection[i]; <span class="hljs-comment">// 获取当前鱼的方向</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">curFishSize</span> <span class="hljs-operator">=</span> fishSize[i]; <span class="hljs-comment">// 获取当前鱼的大小</span><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">hasEat</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 标志当前鱼是否已经吃掉了其他鱼</span><br><br>        <span class="hljs-keyword">while</span> (!stack.empty() &amp;&amp; fishDirection[stack.peek()] == right &amp;&amp; curFishDirection == left) &#123;<br>            <span class="hljs-comment">// 如果栈不为空，栈顶鱼的方向是向右游，当前鱼的方向是向左游，它们可能相遇</span><br>            <span class="hljs-keyword">if</span> (fishSize[stack.peek()] &gt; curFishSize) &#123;<br>                hasEat = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 如果栈顶鱼的大小大于当前鱼，当前鱼被吃掉</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            stack.pop(); <span class="hljs-comment">// 否则栈顶鱼被吃掉，从栈中弹出</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (!hasEat) &#123;<br>            stack.push(i); <span class="hljs-comment">// 如果当前鱼没有被吃掉，将其加入栈中</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> stack.size(); <span class="hljs-comment">// 返回栈中剩下的鱼的数量，它们是不会被吃掉的鱼</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>每只鱼只入栈一次，出栈一次，所以时间复杂度 为 $O(N)$，而空间复杂度为 $O(N)$，因为最差情况下可能把所有的鱼都入栈。</p><p><strong>在线题库</strong></p><ul><li><a href="https://app.codility.com/programmers/lessons/7-stacks_and_queues/fish/start/">7-stacks_and_queues&#x2F;fish</a></li></ul><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>单调栈就是指栈中的元素必须是按照升序排列的栈，或者是降序排列的栈。对于这两种排序方式的栈，升序排列的栈称为递增栈，降序排列的栈称为递减栈。</p><h3 id="找出数组中右边比我小的元素"><a href="#找出数组中右边比我小的元素" class="headerlink" title="找出数组中右边比我小的元素"></a>找出数组中右边比我小的元素</h3><p>【题目】一个整数数组 A，找到每个元素：右边第一个比我小的下标位置，没有则用 -1 表示。<br>输入：[5, 2]<br>输出：[1, -1]<br>解释：因为元素 5 的右边离我最近且比我小的位置应该是 A[1]，最后一个元素 2 右边没有比 2 小的元素，所以应该输出 -1。<br>接口：int[] findRightSmall(int[] A);</p><h3 id="模拟-2"><a href="#模拟-2" class="headerlink" title="模拟"></a>模拟</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[1, 2, 4, 9, 4, 0, 5]</span><br></code></pre></td></tr></table></figure><h3 id="规律-2"><a href="#规律-2" class="headerlink" title="规律"></a>规律</h3><ul><li><p>小的数要与大的数配对</p></li><li><p>小的数会消除大的数</p></li></ul><h3 id="匹配-2"><a href="#匹配-2" class="headerlink" title="匹配"></a>匹配</h3><p>单调栈</p><p>图示：</p><p><img src="/blog/./assets/Cgp9HWA4qkaALlpRAHsvPijzTIg101.gif" alt="递增栈动画演示"></p><ol><li>首先将 A[0] &#x3D; 1 的下标 0 入栈。</li><li>将 A[1] &#x3D; 2 的下标 1 入栈。满足单调栈。</li><li>将 A[2] &#x3D; 4 的下标 2 入栈。满足单调栈。</li><li>将 A[3] &#x3D; 9 的下标 3 入栈。满足单调栈。</li><li>将 A[4] &#x3D; 4 的下标 4 入栈时，不满足单调性，需要将 A[3] &#x3D; 9 从栈中弹出去。下标 4 将栈中下标 3 弹出栈，记录 A[3] 右边更小的是 index &#x3D; 4。</li><li>将 A[5] &#x3D; 0 的下标 5 入栈时，不满足单调性，需要将 A[4] &#x3D; 4 从栈中弹出去。下标 5 将下标 4 弹出栈，记录 A[4] 右边更小的是 index &#x3D; 5。A[5] &#x3D; 0 会将栈中的下标 0, 1, 2 都弹出栈，因此也需要记录相应下标右边比其小的下标为 5，再将 A[5] &#x3D; 0 的下标 5 放入栈中。</li><li>将 A[6] &#x3D; 5 的下标 6 放入栈中。满足单调性。</li><li>此时，再也没有元素要入栈了，那么栈中的元素右边没有比其更小的元素。因此设置为 -1.</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] findRightSmall(<span class="hljs-type">int</span>[] A) &#123;<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[A.length]; <span class="hljs-comment">// 创建一个数组来存储结果，初始值为0</span><br><br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;(); <span class="hljs-comment">// 创建一个栈，用于跟踪元素的索引</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; A.length; i++) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> A[i]; <span class="hljs-comment">// 获取当前数组元素的值</span><br>        <span class="hljs-keyword">while</span> (!stack.empty() &amp;&amp; A[stack.peek()] &gt; x) &#123;<br>            <span class="hljs-comment">// 当栈不为空且栈顶元素的值大于当前元素的值时，表示找到了右边第一个比当前元素小的元素</span><br>            ans[stack.peek()] = i; <span class="hljs-comment">// 更新结果数组，将栈顶元素对应的位置设置为当前索引 i</span><br>            stack.pop(); <span class="hljs-comment">// 弹出栈顶元素，因为它已经找到了右边第一个比它小的元素</span><br>        &#125;<br>        stack.push(i); <span class="hljs-comment">// 将当前索引 i 压入栈，以便后续比较</span><br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (!stack.empty()) &#123;<br>        <span class="hljs-comment">// 处理剩下的栈中元素，它们没有右边比自己小的元素</span><br>        ans[stack.peek()] = -<span class="hljs-number">1</span>; <span class="hljs-comment">// 将结果数组中对应位置设置为 -1</span><br>        stack.pop(); <span class="hljs-comment">// 弹出栈顶元素</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans; <span class="hljs-comment">// 返回包含每个元素右边第一个比它小的元素索引的结果数组</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>每个元素只入栈一次，出栈一次，所以时间复杂度为$O(N)$，而空间复杂度为$O(N)$，因为最差情况可能会把所有的元素都入栈。</p><h2 id="字典序最小的-k-个数的子序列"><a href="#字典序最小的-k-个数的子序列" class="headerlink" title="字典序最小的 k 个数的子序列"></a>字典序最小的 k 个数的子序列</h2><h3 id="模拟-3"><a href="#模拟-3" class="headerlink" title="模拟"></a>模拟</h3><h3 id="规律-3"><a href="#规律-3" class="headerlink" title="规律"></a>规律</h3><h3 id="匹配-3"><a href="#匹配-3" class="headerlink" title="匹配"></a>匹配</h3><h3 id="边界-2"><a href="#边界-2" class="headerlink" title="边界"></a>边界</h3><ul><li>假设数组右边有一个最小的数，这个最小的数会把左边的数全部都消掉，然后递增栈里面就只剩下这 1 个数了。这跟题意有点不符合，题意需要的是找到 k &#x3D; 2 个出来。<ul><li>解决：当剩下的数字个数与栈中的元素刚好能凑够 k 个数时，就不能再消除了，代码如下 :rightLeftNumber + stack.size() &#x3D;&#x3D; k</li></ul></li><li>如果数组是一个升序的数组，那么此时所有的元素都会被压栈。栈中的数目有可能远远超出 k 个。<ul><li>解决：只需要把栈中的多出来的数字弹出来即可。</li></ul></li></ul><h2 id="栈总结"><a href="#栈总结" class="headerlink" title="栈总结"></a>栈总结</h2><p><img src="/blog/./assets/CioPOWA4q6qASB-UAADhj7uzOwg933.png" alt="栈zsj"></p><p>(完)</p><p><strong>在线题库</strong></p><ul><li><a href="https://www.nowcoder.com/practice/37548e94a270412c8b9fb85643c8ccc2">有效括号序列</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Git在终端中文乱码的问题</title>
    <link href="/blog/2023/11/%E8%A7%A3%E5%86%B3Git%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <url>/blog/2023/11/%E8%A7%A3%E5%86%B3Git%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<h2 id="解决Git在命令行中文显示乱码"><a href="#解决Git在命令行中文显示乱码" class="headerlink" title="解决Git在命令行中文显示乱码"></a>解决Git在命令行中文显示乱码</h2><p>将git配置文件 <code>core.quotepath</code>项设置为<code>false</code>。<code>quotepath</code>表示引用路径，加上<code>--global</code>表示全局配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.quotepath <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis大Key怎么处理</title>
    <link href="/blog/2023/11/Redis%E5%A4%A7Key%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86.html"/>
    <url>/blog/2023/11/Redis%E5%A4%A7Key%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<h2 id="什么是大Key"><a href="#什么是大Key" class="headerlink" title="什么是大Key"></a>什么是大Key</h2><p>BigKey称为大Key，通常以Key对应Value的存储大小，或者Key对应Value的数量来进行综合判断。对于大Key也没有严格的定义区分，针对String与非String结构，给出如下定义：</p><ul><li>String：String类型的 Key 对应的 Value 超过 10KB</li><li>非String结构（Hash，Set，ZSet，List）：Value的数量达到10000个，或者Vaule的总大小为100KB</li><li>集群中Key的总数超过1亿</li></ul><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><ol><li>数据结构设置不合理，例如集合中元素唯一时，应该使用Set替换List；</li><li>针对业务缺少预估性，没有预见Value动态增长；</li><li>Key没有设置过期时间，把缓存当成垃圾桶，一直再往里面扔，但是从不处理</li></ol><h2 id="存在危害"><a href="#存在危害" class="headerlink" title="存在危害"></a>存在危害</h2><ul><li>数据倾斜</li></ul><p>redis数据倾斜分为<strong>数据访问倾斜和数据量倾</strong>斜，会导致该Key所在的数据分片节点CPU使用率、带宽使用率升高，从而影响该分片上所有Key的处理。</p><p><strong>数据访问倾斜</strong>：某节点中key的QPS高于其他节点中的Key</p><p><strong>数据量倾斜</strong>：某节点中key的大小高于其他节点中的Key</p><ul><li>网络传输延迟</li></ul><p>当有大key时，单次操作时间延长，导致网络阻塞。</p><ul><li>慢查询</li></ul><p>严重影响 QPS 、TP99 等指标，对大Key进行的慢操作会导致后续的命令被阻塞，从而导致一系列慢查询。</p><ul><li>CPU压力</li></ul><p>内存中数据量过大，就会造成CPU负载过高。单个分片cpu占用率过高，其他分片无法拥有cpu资源，从而被影响。</p><ul><li>持久化备份</li></ul><p>大 key 对持久化也有些影响。fork 操作会拷贝父进程的页表项，如果过大，会占用更多页表，主线程阻塞拷贝需要一定的时间。</p><h2 id="检测大Key"><a href="#检测大Key" class="headerlink" title="检测大Key"></a>检测大Key</h2><ul><li><p>redis-cli –bigkeys</p><p>执行redis-cli的–bigkeys选项</p></li><li><p>redis-rdb-tools</p></li></ul><p>​<a href="https://github.com/sripathikrishnan/redis-rdb-tools">https://github.com/sripathikrishnan/redis-rdb-tools</a></p><h2 id="应对策略"><a href="#应对策略" class="headerlink" title="应对策略"></a>应对策略</h2><ul><li>设置过期时间，尽量过期时间分散，防止大Key同一时间过期</li><li>把大Key分割成小key来处理，比如存储为String类型的JSON，可以删除不使用的Filed；</li></ul><p>例如对象为{“userName”:”张三”,”ciyt”:”北京”}，如果只需要用到userName属性，那就定义新对象，只具有userName属性{“userName”:”张三”}，精简缓存中数据。</p><ul><li>搭建redist集群，把key分配到不同的hash slot槽所在的分片上</li><li>采用压缩算法，利用时间换空间，进行序列化与反序列化。同时也存在缓存数据识别性低的缺点</li><li>在业务上进行干预，设置阈值。比如用户购物车的商品数量，或者领券的数量，不能无限的增大；</li></ul><h2 id="删除大Key"><a href="#删除大Key" class="headerlink" title="删除大Key"></a>删除大Key</h2><h3 id="DEL命令"><a href="#DEL命令" class="headerlink" title="DEL命令"></a>DEL命令</h3><ul><li>redis &lt; 4.0 版本时，在主线程中同步删除，删除大Key会阻塞主线程。</li><li>4.0 版本 &lt; redis&lt; 6.0 版本：引入lazy-free，手动开启lazy-free时，有4个选项可以控制，分别对应不同场景下，是否开启异步释放内存机制：<ul><li>lazyfree-lazy-expire：key在过期删除时尝试异步释放内存</li><li>lazyfree-lazy-eviction：内存达到maxmemory并设置了淘汰策略时尝试异步释放内存</li><li>lazyfree-lazy-server-del：执行RENAME&#x2F;MOVE等命令或需要覆盖一个key时，删除旧key尝试异步释放内存</li><li>replica-lazy-flush：主从全量同步，从库清空数据库时异步释放内存</li></ul></li></ul><p>开启lazy-free后，Redis在释放一个key的内存时，首先会评估代价，如果释放内存的代价很小，那么就直接在主线程中操作了，没必要放到异步线程中执行</p><p>redis &gt;&#x3D; 6.0 版本：引入lazyfree-lazy-user-del，只要开启了，del直接可以异步删除key，不会阻塞主线程。</p><h3 id="SCAN命令"><a href="#SCAN命令" class="headerlink" title="SCAN命令"></a>SCAN命令</h3><p>SCAN命令可以帮助在不阻塞主线程的情况下逐步遍历大量的键，以及避免对数据库的阻塞。</p><h3 id="UNLINK命令"><a href="#UNLINK命令" class="headerlink" title="UNLINK命令"></a>UNLINK命令</h3><p>Redis 4.0 提供了 lazy delete (unlink命令) </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>当Hash&#x2F;Set底层采用哈希表存储（非ziplist&#x2F;int编码存储）时，并且元素数量超过64个</li><li>当ZSet底层采用跳表存储（非ziplist编码存储）时，并且元素数量超过64个</li><li>当List链表节点数量超过64个（注意，不是元素数量，而是链表节点的数量，List的实现是在每个节点包含了若干个元素的数据，这些元素采用ziplist存储）</li><li>refcount &#x3D;&#x3D; 1 就是在没有引用这个Key时</li></ul><p>只有以上这些情况，在删除key释放内存时，才会真正放到异步线程中执行，其他情况一律还是在主线程操作。也就是说String（不管内存占用多大）、List（少量元素）、Set（int编码存储）、Hash&#x2F;ZSet（ziplist编码存储）这些情况下的key在释放内存时，依旧在主线程中操作。</p><p><strong>参考链接</strong></p><ul><li><a href="https://mp.weixin.qq.com/s/L9ozOPivbM1SjhoTfjHgaw">浅析Redis大Key</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript经典算法题</title>
    <link href="/blog/2023/11/Javascript%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE.html"/>
    <url>/blog/2023/11/Javascript%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE.html</url>
    
    <content type="html"><![CDATA[<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值 target 的那<strong>两个</strong>整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">nums, target</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.<span class="hljs-property">length</span>; j++) &#123;<br>      <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>        <span class="hljs-keyword">return</span> [i, j]<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = twoSum;<br></code></pre></td></tr></table></figure><h2 id="二维数组中查找数字"><a href="#二维数组中查找数字" class="headerlink" title="二维数组中查找数字"></a>二维数组中查找数字</h2><p>在一个 <code>n * m</code> 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>示例：</p><p>现有矩阵 matrix 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>],<br>  [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>],<br>  [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>],<br>  [<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">24</span>],<br>  [<span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">30</span>],<br>];<br></code></pre></td></tr></table></figure><p>给定 <code>target = 5</code>，返回 true。 给定 <code>target = 20</code>，返回 false。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">findNumberIn2DArray</span>(<span class="hljs-params">matrix, target</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; matrix.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (matrix[i].<span class="hljs-title function_">indexOf</span>(target) !== -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = findNumberIn2DArray;<br><br></code></pre></td></tr></table></figure><h2 id="找出数组中重复的数字"><a href="#找出数组中重复的数字" class="headerlink" title="找出数组中重复的数字"></a>找出数组中重复的数字</h2><p>新建一个 <code>findRepeatNumber.js</code> 文件，在文件里写一个名为 <code>findRepeatNumber</code> 的函数。找出数组中重复的数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">findRepeatNumber</span>(<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-comment">// 补充代码</span><br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = findRepeatNumber;<br></code></pre></td></tr></table></figure><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">findRepeatNumber</span>(<span class="hljs-params">nums</span>) &#123;<br>    <span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(nums)<br>    <span class="hljs-keyword">return</span> nums.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> !set.<span class="hljs-title function_">delete</span>(x))<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = findRepeatNumber<br></code></pre></td></tr></table></figure><h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">replaceSpace</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;%20&quot;</span>);<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = replaceSpace;<br><br></code></pre></td></tr></table></figure><p>(完)</p><p><strong>在线题库</strong></p><ul><li><a href="https://www.lanqiao.cn/problems/2495/learning/">两数之和</a></li><li><a href="https://www.lanqiao.cn/problems/2497/learning">二维数组中查找数字</a></li><li><a href="https://www.lanqiao.cn/problems/2494/learning/">数组中重复的数字 </a></li><li><a href="https://www.lanqiao.cn/problems/2494/learning/">替换空格</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于顺序存储（数组）实现List集合</title>
    <link href="/blog/2023/10/%E5%9F%BA%E4%BA%8E%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%BA%BF%E6%80%A7%E8%A1%A8.html"/>
    <url>/blog/2023/10/%E5%9F%BA%E4%BA%8E%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%BA%BF%E6%80%A7%E8%A1%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>使用顺序存储来实现线性表。</p><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线性表（列表）的接口定义</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyList</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Iterator</span>&lt;T&gt; &#123;<br>  <span class="hljs-comment">/**新增一个元素*/</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T element)</span>;<br><br>  <span class="hljs-comment">/**删除相同元素*/</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(T element)</span>;<br><br>  <span class="hljs-comment">/**根据索引删除元素*/</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 将指定索引位置的元素替换成新元素</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> index</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> newElement</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> index, T newElement)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当前列表中是否含有target这个元素</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> target</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(T target)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 返回指定索引处的元素</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> index</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  T <span class="hljs-title function_">at</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查找element的索引，如果没有返回-1</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> element</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(T element)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用顺序存储（数组）方式来实现列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayList</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyList</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">private</span> T[] elements;<span class="hljs-comment">//真正存储元素的底层结构</span><br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//元素个数</span><br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//容量</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>    <span class="hljs-built_in">this</span>.capacity = capacity;<br><br>    elements = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyArrayList</span><span class="hljs-params">()</span> &#123;<br>    elements = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T element)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size == capacity) &#123;<span class="hljs-comment">//扩容</span><br>      capacity *= <span class="hljs-number">2</span>;<span class="hljs-comment">//增加一倍的容量</span><br>      T[] newArr = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[capacity];<span class="hljs-comment">//新建一个数组</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        newArr[i] = elements[i];<br>      &#125;<br>      elements = newArr;<span class="hljs-comment">//把旧的那个柜子扔掉</span><br>    &#125;<br>    elements[size++] = element;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(T element)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> indexOf(element);<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) &#123;<br>      delete(index);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index; i &lt; size - <span class="hljs-number">1</span>; i++) &#123;<br>      elements[i] = elements[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    elements[size - <span class="hljs-number">1</span>] = <span class="hljs-literal">null</span>;<br>    size--;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> index, T newElement)</span> &#123;<br>    elements[index] = newElement;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(T target)</span> &#123;<br>    <span class="hljs-keyword">return</span> indexOf(target) &gt;= <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">at</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">return</span> elements[index];<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(T element)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>      <span class="hljs-keyword">if</span> (elements[i].equals(element)) &#123;<br>        <span class="hljs-keyword">return</span> i;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>      sb.append(elements[i] + (i == size - <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot; , &quot;</span>));<br>    &#125;<br>    sb.append(<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> sb.toString();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构入门</title>
    <link href="/blog/2023/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"/>
    <url>/blog/2023/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</url>
    
    <content type="html"><![CDATA[<h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><ul><li><p>集合</p><ul><li>元素罗列在一起</li></ul></li><li><p>线性结构</p><ul><li>元素前后相继（一一对应）</li></ul></li><li><p>树形结构</p><ul><li>元素存在一对多的关系</li></ul></li><li><p>图结构或网状结构</p><ul><li>元素之间存在多对多关系</li></ul></li></ul><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><ul><li>顺序存储<ul><li>地址连续，用数组</li></ul></li><li>链式存储<ul><li>地址不连续，用指针（引用，面向对象）</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux操作练习题目</title>
    <link href="/blog/2023/10/Linux%E6%93%8D%E4%BD%9C%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE.html"/>
    <url>/blog/2023/10/Linux%E6%93%8D%E4%BD%9C%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE.html</url>
    
    <content type="html"><![CDATA[<h2 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h2><p>遍历&#x2F;test&#x2F;目录下的txt文件做一个备份，备份的文件名增加一个年月日的后缀，比如将a.txt备份为a.txt20231020</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-20</span><br> <br>suffix=`<span class="hljs-built_in">date</span> +%Y%m%d`<br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> `find ./test -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.txt&quot;</span>`<br><span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;start backup<span class="hljs-variable">$f</span>&quot;</span><br>  <span class="hljs-built_in">cp</span> <span class="hljs-variable">$&#123;f&#125;</span> <span class="hljs-variable">$&#123;f&#125;</span>_<span class="hljs-variable">$&#123;suffix&#125;</span><br><span class="hljs-keyword">done</span> <br></code></pre></td></tr></table></figure><h2 id="打印正方形"><a href="#打印正方形" class="headerlink" title="打印正方形"></a>打印正方形</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-21</span><br> <br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;please input a number: &quot;</span> count<br>num=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$count</span> |sed <span class="hljs-string">&#x27;s/[0-9]//g&#x27;</span>`<br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$num</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入一个纯数字&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br> <br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> <span class="hljs-variable">$count</span>`<br><span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> <span class="hljs-variable">$count</span>`<br>  <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$n</span> -lt <span class="hljs-variable">$count</span> ]<br>    <span class="hljs-keyword">then</span> <br>      <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;* &quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span>  <span class="hljs-string">&quot;*&quot;</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="创建多个用户并保存记录"><a href="#创建多个用户并保存记录" class="headerlink" title="创建多个用户并保存记录"></a>创建多个用户并保存记录</h2><ol><li>创建10个用户，并给他们设置随机密码，密码记录到一个文件里，文件名userinfo.txt。</li><li>用户从user00到user09。</li><li>密码要求：包含大小写字母以及数字，密码长度15位。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-22</span><br><br><span class="hljs-comment"># 判断文件是否已经存在</span><br><span class="hljs-keyword">if</span> [ -f /tmp/userinfo.txt ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">rm</span> -rf /tmp/userinfo.txt;<br><span class="hljs-keyword">fi</span> <br>   <br><span class="hljs-comment"># seq队列</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> -w 0 09`<br><span class="hljs-keyword">do</span> <br>  <span class="hljs-comment"># 生成不包含特殊符号的密码</span><br>  pass=$(openssl rand -<span class="hljs-built_in">base64</span> 15)<br>   <br><span class="hljs-comment"># 检查用户是否已经存在</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> <span class="hljs-string">&quot;user_<span class="hljs-variable">$&#123;i&#125;</span>&quot;</span> &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;用户 user_<span class="hljs-variable">$&#123;i&#125;</span> 已存在.&quot;</span> &gt;&gt; /tmp/userinfo.txt<br><span class="hljs-keyword">else</span><br>  useradd user_<span class="hljs-variable">$&#123;i&#125;</span> &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;p&#125;</span>&quot;</span> | passwd --stdin user_<span class="hljs-variable">$&#123;i&#125;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;user_<span class="hljs-variable">$&#123;i&#125;</span> <span class="hljs-variable">$&#123;pass&#125;</span>&quot;</span> &gt;&gt; /tmp/userinfo.txt<br><span class="hljs-keyword">fi</span> <br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="Linux判断磁盘分区读写是否正常"><a href="#Linux判断磁盘分区读写是否正常" class="headerlink" title="Linux判断磁盘分区读写是否正常"></a>Linux判断磁盘分区读写是否正常</h2><p>判断磁盘分区读写是否正常，并打印信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-23</span><br><br><span class="hljs-keyword">for</span> mount_p <span class="hljs-keyword">in</span> `<span class="hljs-built_in">df</span> -h | sed <span class="hljs-string">&#x27;1d&#x27;</span> | grep -v <span class="hljs-string">&#x27;tmpfs&#x27;</span>  |awk <span class="hljs-string">&#x27;&#123;print $NF&#125;&#x27;</span>`;<span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">touch</span> <span class="hljs-variable">$mount_p</span>/testfile &amp;&amp; <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$mount_p</span>/testfile<br>  <span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span><br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$mount_p</span> 读写有问题&quot;</span> <br>  <span class="hljs-keyword">else</span> <br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$mount_p</span> 读写正常&quot;</span> <br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="修改目录下的文件权限和属组"><a href="#修改目录下的文件权限和属组" class="headerlink" title="修改目录下的文件权限和属组"></a>修改目录下的文件权限和属组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-24</span><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> `find <span class="hljs-built_in">test</span>`<br><span class="hljs-keyword">do</span><br><span class="hljs-comment"># 查看文件权限</span><br>f_p=`<span class="hljs-built_in">stat</span> -c %a <span class="hljs-variable">$f</span>`<br><span class="hljs-comment"># 查看文件所有者</span><br>f_u=`<span class="hljs-built_in">stat</span> -c %U <span class="hljs-variable">$f</span>`<br><span class="hljs-comment"># 查看文件所属组</span><br>f_g=`<span class="hljs-built_in">stat</span> -c %G <span class="hljs-variable">$f</span>`<br><br>  <span class="hljs-comment"># 判断是否为目o</span><br>  <span class="hljs-keyword">if</span> [ -d <span class="hljs-variable">$f</span> ];<span class="hljs-keyword">then</span><br>    [ <span class="hljs-variable">$f_p</span> != <span class="hljs-string">&#x27;755&#x27;</span> ] &amp;&amp; <span class="hljs-built_in">chmod</span> 755 <span class="hljs-variable">$f</span><br>  <span class="hljs-keyword">else</span><br>    [ <span class="hljs-variable">$f_p</span> != <span class="hljs-string">&#x27;644&#x27;</span> ] &amp;&amp; <span class="hljs-built_in">chmod</span> 644 <span class="hljs-variable">$f</span><br>  <span class="hljs-keyword">fi</span><br>  <br>  <span class="hljs-comment"># 修改文件的属主和属组</span><br>  [ <span class="hljs-variable">$f_u</span> != <span class="hljs-string">&#x27;www&#x27;</span> ] &amp;&amp; <span class="hljs-built_in">chown</span>  www <span class="hljs-variable">$f</span><br>  [ <span class="hljs-variable">$f_g</span> != <span class="hljs-string">&#x27;root&#x27;</span> ] &amp;&amp; <span class="hljs-built_in">chown</span> :root <span class="hljs-variable">$f</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="判断输入的日期是否符合要求"><a href="#判断输入的日期是否符合要求" class="headerlink" title="判断输入的日期是否符合要求"></a>判断输入的日期是否符合要求</h2><p>判断用户输入的日期，要求符合<code>yyyymmdd</code>的格式，并输出校验结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#/bin/bash</span><br><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-29</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -ne 1 ] || [ <span class="hljs-variable">$&#123;#1&#125;</span> -ne 8 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: bash <span class="hljs-variable">$0</span> yyyymmdd&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span> <br><br>mydate=<span class="hljs-variable">$1</span><br>year=<span class="hljs-variable">$&#123;mydate:0:4&#125;</span><br>month=<span class="hljs-variable">$&#123;mydate:4:2&#125;</span><br>day=<span class="hljs-variable">$&#123;mydate:6:2&#125;</span><br><br><span class="hljs-comment"># 将正确和错误的输出都不打印出来</span><br><span class="hljs-keyword">if</span> cal <span class="hljs-string">&quot;<span class="hljs-variable">$day</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$month</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$year</span>&quot;</span> &gt;/dev/null 2&gt;/dev/null<br><span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The data is OK. The date is <span class="hljs-variable">$&#123;year&#125;</span>年<span class="hljs-variable">$&#123;month&#125;</span>月<span class="hljs-variable">$&#123;day&#125;</span>日&quot;</span><br><span class="hljs-keyword">else</span> <br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The data is Error.&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="去掉文件的空行"><a href="#去掉文件的空行" class="headerlink" title="去掉文件的空行"></a>去掉文件的空行</h2><p>写一个 bash脚本以去掉一个文本文件nowcoder.txt中的空行<br>示例:<br>假设nowcoder.txt 内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">abc<br><br><span class="hljs-number">567</span><br><br><br>aaa<br>bbb<br><br><br><br>ccc<br></code></pre></td></tr></table></figure><p>你的脚本应当输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">abc<br><span class="hljs-number">567</span><br>aaa<br>bbb<br>ccc<br></code></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 方法 1</span><br>sed -n <span class="hljs-string">&#x27;/^$/!p&#x27;</span> nowcoder.txt<br><br><span class="hljs-comment"># 方法2</span><br>awk -n <span class="hljs-string">&#x27;&#123;if ($0 != &quot;&quot;) print $0&#125;&#x27;</span> nowcoder.txt<br><br><span class="hljs-comment"># 方法 3</span><br>awk <span class="hljs-string">&#x27;!/^$/ &#123;print $0&#125;&#x27;</span> nowcoder.txt<br><br><span class="hljs-comment"># 方法 4</span><br>grep -v <span class="hljs-string">&#x27;^$&#x27;</span> nowcoder.txt<br><br><br><br><span class="hljs-comment">## 备份目录并创建软链接</span><br><br>1. 有一个目录/tmp/data/,该目录下有数百个子目录。<br>2. 需要将老文件（365天前的）挪到另外一个目录/tmp/data1下，还需要做软链接。<br>3. 要确保老文件成功挪到/tmp/data1下之后才能做软链接，需要有日志。<br><br>```sh<br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-25</span><br><br><span class="hljs-function"><span class="hljs-title">main</span></span>()&#123;<br><span class="hljs-built_in">cd</span> /tmp/data<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span>`<br><span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$dir</span><br>  <span class="hljs-keyword">for</span> old_data <span class="hljs-keyword">in</span> `find <span class="hljs-variable">$dir</span> -maxdepth 1 -<span class="hljs-built_in">type</span> d -mtime +365`<br>  <span class="hljs-keyword">do</span><br>     rsync -aR <span class="hljs-variable">$old_data</span>  /tmp/data1/<br>     <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>       <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$old_data</span> &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/tmp/<span class="hljs-variable">$old_data</span> 移动成功&quot;</span><br>       <span class="hljs-built_in">ln</span> -s /tmp/data1/<span class="hljs-variable">$old_data</span> /tmp/data/<span class="hljs-variable">$old_data</span> &amp;&amp; \<br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/tmp/data/<span class="hljs-variable">$old_data</span> 创建软链成功&quot;</span><br>     <span class="hljs-keyword">else</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/tmp/<span class="hljs-variable">$old_data</span> 未移动成功&quot;</span><br>     <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br>&#125;<br><br>main &amp;&gt; /tmp/move_old_data_`<span class="hljs-built_in">date</span> +%F`.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h2 id="打印字母数小于8的单词"><a href="#打印字母数小于8的单词" class="headerlink" title="打印字母数小于8的单词"></a>打印字母数小于8的单词</h2><p>写一个bash脚本以统计一个文本文件nowcoder.txt中字母数小于8的单词。<br>示例:<br>假设 nowcoder.txt 内容如下：</p><p>how they are implemented and applied in computer</p><p>你的脚本应当输出：<br>how<br>they<br>are</p><p>and</p><p>applied</p><p>in</p><p>说明:<br>不用担心你输出的空格以及换行的问题</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 方法 1</span><br>awk -F <span class="hljs-string">&quot; &quot;</span> <span class="hljs-string">&#x27;&#123;for(i=1;i&lt;=NF;i++) &#123; if(length($i) &lt; 8) &#123; print($i) &#125;&#125;&#125;&#x27;</span> nowcoder.txt<br><br><span class="hljs-comment"># 方法 2</span><br>words=$(<span class="hljs-built_in">cat</span> nowcoder.txt)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;words[*]&#125;</span>; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;#i&#125;</span> -lt 8 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;i&#125;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 方法 3</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">cat</span> nowcoder.txt); <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;#i&#125;</span> -lt 8 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;i&#125;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="打印文件的最后5行"><a href="#打印文件的最后5行" class="headerlink" title="打印文件的最后5行"></a>打印文件的最后5行</h2><p>查看日志的时候，经常会从文件的末尾往前查看，请你写一个bash shell脚本以输出一个文本文件nowcoder.txt中的最后5行。<br>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">100</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;a + b:&quot;</span> &lt;&lt; a + b &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>你的脚本应当输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">100</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;a + b:&quot;</span> &lt;&lt; a + b &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方法1</span><br>end=$(<span class="hljs-built_in">wc</span> -l &lt; nowcoder.txt)<br>start=$(( end - <span class="hljs-number">5</span> + <span class="hljs-number">1</span>))<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$start</span> -lt 1 ]]; <span class="hljs-keyword">then</span><br>start=1<br><span class="hljs-keyword">fi</span><br>sed -n <span class="hljs-string">&quot;<span class="hljs-variable">$start</span>,<span class="hljs-variable">$end</span> p&quot;</span> nowcoder.txt<br><br><span class="hljs-comment"># 方法 2</span><br><span class="hljs-built_in">tail</span> -n 5 nowcoder.txt<br><br><span class="hljs-comment"># 方法 3</span><br><span class="hljs-built_in">tac</span> nowcoder.txt | <span class="hljs-built_in">head</span> -n 5 | <span class="hljs-built_in">tac</span><br><br><span class="hljs-comment"># 方法 4</span><br>awk <span class="hljs-string">&#x27;BEGIN &#123;</span><br><span class="hljs-string">s=1</span><br><span class="hljs-string">&#125; &#123;</span><br><span class="hljs-string">lines[s]=$0;</span><br><span class="hljs-string">s++</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">END &#123;</span><br><span class="hljs-string">    for(i=NR-4; i&lt;=NR; i++) &#123;</span><br><span class="hljs-string">        print(lines[i])</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;&#x27;</span> nowcoder.txt<br><br><span class="hljs-comment"># 方法 5</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">count_lines</span></span>() &#123;<br>number=0<br>filename=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> p;<br>        <span class="hljs-keyword">do</span><br>            number=$((number + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">done</span> &lt; <span class="hljs-variable">$filename</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$number</span><br>&#125;<br><span class="hljs-comment"># 获取文件的行数</span><br>end=`count_lines nowcoder.txt`<br>start=$((end - <span class="hljs-number">5</span> + <span class="hljs-number">1</span>))<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$start</span> -lt 1 ]]; <span class="hljs-keyword">then</span><br>start=1<br><span class="hljs-keyword">fi</span><br>sed -n <span class="hljs-string">&quot;<span class="hljs-variable">$start</span>,<span class="hljs-variable">$end</span> p&quot;</span> nowcoder.txt<br></code></pre></td></tr></table></figure><h2 id="打印空行的行号"><a href="#打印空行的行号" class="headerlink" title="打印空行的行号"></a>打印空行的行号</h2><p>编写一个shell脚本以输出一个文本文件nowcoder.txt中空行的行号（空行可能连续，从1开始输出）</p><p>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">a<br>b<br><br>c<br><br>d<br><br>e<br><br><br>f<br></code></pre></td></tr></table></figure><p>你的脚本应当输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">3</span><br><span class="hljs-number">5</span><br><span class="hljs-number">7</span><br><span class="hljs-number">9</span><br><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 方法 1</span><br>awk -n <span class="hljs-string">&#x27;/^$/ &#123;print NR&#125;&#x27;</span> nowcoder.txt<br><br><span class="hljs-comment"># 方法 2</span><br>sed -n <span class="hljs-string">&#x27;/^$/=&#x27;</span> nowcoder.txt<br><br><span class="hljs-comment"># 方法 3</span><br>i=1<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line; <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$line</span> =~ ^$ ]]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">fi</span><br>i=$((i+<span class="hljs-number">1</span>))<br><span class="hljs-keyword">done</span>&lt;<span class="hljs-variable">$1</span><br></code></pre></td></tr></table></figure><h2 id="抽奖程序给人员分配唯一的数字"><a href="#抽奖程序给人员分配唯一的数字" class="headerlink" title="抽奖程序给人员分配唯一的数字"></a>抽奖程序给人员分配唯一的数字</h2><ol><li>多人抽签游戏，给人员分配<code>1-99</code>的随机整数。</li><li>相同名字的如果之前分配过随机数，则和之前一致。</li><li>已经分配过的数字不能重复分配。</li><li>循环执行，直到<kbd>Ctrl-C</kbd>键终止运行。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-30</span><br><br>&lt;&lt;<span class="hljs-string">&#x27;COMMENT&#x27;</span><br>1. 多人抽签游戏，给人员分配1-99的随机整数。<br>2. 相同名字的如果之前分配过随机数，则和之前一致。<br>3. 已经分配过的数字不能重复分配。<br>4. 循环执行，直到&lt;kbd&gt;Ctrl-C&lt;/kbd&gt;键终止运行。<br>COMMENT<br><br><span class="hljs-comment"># 生成1-99的数字，并校验已生成的数字</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">create_number</span></span>()&#123;<br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br>  num=$((RANDOM%<span class="hljs-number">99</span>+<span class="hljs-number">1</span>))<br>  n=$(awk -F <span class="hljs-string">&#x27;:&#x27;</span> -v NUMBER=<span class="hljs-string">&quot;<span class="hljs-variable">$num</span>&quot;</span> <span class="hljs-string">&#x27;$2 == NUMBER&#x27;</span> /tmp/name.log | <span class="hljs-built_in">wc</span> -l)<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span> -gt 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">continue</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$num</span>&quot;</span><br>    <span class="hljs-built_in">break</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br>&#125;<br><br><br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;Please input a name:&quot;</span> name<br>  <span class="hljs-comment"># 若抽奖名单不存在，则根据名称生成数字并保存名单</span><br>  <span class="hljs-keyword">if</span> [ ! -f /tmp/name.log ];<span class="hljs-keyword">then</span><br>  num=$((RANDOM%<span class="hljs-number">99</span>+<span class="hljs-number">1</span>))<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Your number is: <span class="hljs-variable">$num</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$name</span>:<span class="hljs-variable">$num</span>&quot;</span> &gt; /tmp/name.log<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-comment"># 抽奖名单已存在，判断名称是否存在，存在直接打印抽奖名字和数字;不存在则创建名单。</span><br>    n=$(awk -F <span class="hljs-string">&#x27;:&#x27;</span> -v NAME=<span class="hljs-string">&quot;<span class="hljs-variable">$name</span>&quot;</span> <span class="hljs-string">&#x27;$1 == NAME&#x27;</span> /tmp/name.log | <span class="hljs-built_in">wc</span> -l)<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span> -gt 0 ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The name already exist.&quot;</span><br>      awk -F <span class="hljs-string">&#x27;:&#x27;</span> -v NAME=<span class="hljs-string">&quot;<span class="hljs-variable">$name</span>&quot;</span> <span class="hljs-string">&#x27;$1 == NAME&#x27;</span> /tmp/name.log<br>      <span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">else</span><br>      number=$(create_number)<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Your number is: <span class="hljs-variable">$number</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$name</span>:<span class="hljs-variable">$number</span>&quot;</span> &gt;&gt; /tmp/name.log<br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="机器存活状态检测"><a href="#机器存活状态检测" class="headerlink" title="机器存活状态检测"></a>机器存活状态检测</h2><p>给定一批服务器IP，判断机器是否存活。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-24</span><br> <br><span class="hljs-comment"># 服务器IP列表</span><br>IPS=(baidu.com qq.com)<br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;IPS[@]&#125;</span><br><span class="hljs-keyword">do</span><br>n=`ping -c5 <span class="hljs-variable">$IP</span> | grep <span class="hljs-string">&quot;packet&quot;</span> |awk -F <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> |awk <span class="hljs-string">&#x27;&#123;print $NF&#125;&#x27;</span>`<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span> ];<span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行失败&quot;</span><br><span class="hljs-built_in">exit</span> <br><span class="hljs-keyword">else</span><br>  n1=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$n</span>|sed <span class="hljs-string">&#x27;s/[0-9]//g&#x27;</span>`<br>  <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$n1</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行失败了&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$n</span> -ge 20 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;机器<span class="hljs-variable">$&#123;IP&#125;</span>宕机，丢包率是<span class="hljs-variable">$&#123;n&#125;</span>%&quot;</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;机器<span class="hljs-variable">$&#123;IP&#125;</span>正常，丢包率是<span class="hljs-variable">$&#123;n&#125;</span>%&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="查找指定目录5分钟内有修改的文件"><a href="#查找指定目录5分钟内有修改的文件" class="headerlink" title="查找指定目录5分钟内有修改的文件"></a>查找指定目录5分钟内有修改的文件</h2><ol><li>使用脚本查找指定目录5分钟内有修改的文件并重定向文件列表到一个文件中。</li><li>如果重定向的文件列表内容不为空，则修改文件名称为时间格式的名称。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-26</span><br><br><span class="hljs-built_in">date</span>=`<span class="hljs-built_in">date</span> +%Y%m%d%H%M`<br>base_dir=/opt<br><br>find <span class="hljs-variable">$base_dir</span> -<span class="hljs-built_in">type</span> f -mmin -5 &gt; /tmp/newf.txt<br><br><span class="hljs-keyword">if</span> [ -s /tmp/newf.txt ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">mv</span> /tmp/newf.txt /tmp/<span class="hljs-variable">$&#123;date&#125;</span>.txt<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="检查进程和端口服务是否正常"><a href="#检查进程和端口服务是否正常" class="headerlink" title="检查进程和端口服务是否正常"></a>检查进程和端口服务是否正常</h2><ol><li>检查进程服务是否存在</li><li>检查进程端口是否存在</li><li>当2者都存活时，判定服务正常。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-31</span><br><br><span class="hljs-comment"># 定义一个函数，用于检查必需的工具是否已安装</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">check_tools</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> ! <span class="hljs-built_in">which</span> pgrep &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;没有安装pgrep命令&quot;</span><br>        <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-keyword">if</span> ! <span class="hljs-built_in">which</span> ss &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;没有安装ss命令&quot;</span><br>        <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 定义一个函数，用于检查特定进程是否在运行</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">check_ps</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> pgrep <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">return</span> 0  <span class="hljs-comment"># 进程存在，返回0表示真</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">return</span> 1  <span class="hljs-comment"># 进程不存在，返回1表示假</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 定义一个函数，用于检查特定端口是否在监听</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">check_port</span></span>()&#123;<br>    port_num=$(ss -lnp | grep -c <span class="hljs-string">&quot;:<span class="hljs-variable">$1</span> &quot;</span>)<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$port_num</span>&quot;</span> -ne 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">return</span> 0  <span class="hljs-comment"># 端口在监听，返回0表示真</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">return</span> 1  <span class="hljs-comment"># 端口不在监听，返回1表示假</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 定义一个函数，用于检查特定服务（进程和端口）</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">check_srv</span></span>()&#123;<br>    check_ps <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; check_port <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br>    <span class="hljs-keyword">if</span> check_ps <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; check_port <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span>; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>服务正常&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>服务不正常&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 调用函数检查必需工具是否已安装</span><br>check_tools<br><br><span class="hljs-comment"># 分别检查指定服务的状态</span><br>check_srv nginx 443<br>check_srv mysql 3306<br>check_srv redis 6379<br>check_srv java 8080<br></code></pre></td></tr></table></figure><h2 id="监控站点状态"><a href="#监控站点状态" class="headerlink" title="监控站点状态"></a>监控站点状态</h2><ol><li>写一个脚本监控网站的可用性，访问网站放回<code>2xx</code>，<code>3xx</code>状态码则代表可正常访问，其他状态码为不可正常访问。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-28</span><br><br>code=$(curl --connect-timeout 3 -I <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> 2&gt;/dev/null |grep  <span class="hljs-string">&#x27;HTTP&#x27;</span> |awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$code</span>&quot;</span> |grep -qE <span class="hljs-string">&#x27;^2[0-9][0-9]|3[0-9][0-9]&#x27;</span>;<span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>可正常访问&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>不可正常访问&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="监控系统负载并定时记录状态信息"><a href="#监控系统负载并定时记录状态信息" class="headerlink" title="监控系统负载并定时记录状态信息"></a>监控系统负载并定时记录状态信息</h2><ol><li>监控系统负载，如果系统负载超过10，需要记录系统状态信息。</li><li>要求每隔20s监控一次。</li><li>系统状态信息需要保存到&#x2F;opt&#x2F;logs&#x2F;下面，保留一个月。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-25</span><br><br><span class="hljs-comment"># 如果/opt/logs目录不存在则创建目录</span><br>[ -d /opt/logs ] || <span class="hljs-built_in">mkdir</span> -p /opt/logs<br><br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br>  <span class="hljs-comment"># 获取系统1分钟的负责，只保留最前面的值。</span><br>  load=`<span class="hljs-built_in">uptime</span> |awk -F <span class="hljs-string">&#x27;average:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> |<span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27;,&#x27;</span> -f1 |sed <span class="hljs-string">&#x27;s/ //g&#x27;</span> |<span class="hljs-built_in">cut</span> -d. -f1`<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$load</span> -gt 0 ];<span class="hljs-keyword">then</span><br>  top -bn1 | <span class="hljs-built_in">head</span> -n 100 &gt; /opt/logs/top.`<span class="hljs-built_in">date</span> +%s`<br>  vmstat 1 10 &gt; /opt/logs/vmstat.`<span class="hljs-built_in">date</span> +%s`<br>  ss -an &gt; /opt/logs/ss.`<span class="hljs-built_in">date</span> +%s`<br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">sleep</span> 20<br>  find /opt/logs \( -name <span class="hljs-string">&quot;top*&quot;</span> -o -name <span class="hljs-string">&quot;vmstat*&quot;</span> -o -name <span class="hljs-string">&quot;ss*&quot;</span> \) -mtime +30 |xargs <span class="hljs-built_in">rm</span> -rf <br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="监控网卡流量"><a href="#监控网卡流量" class="headerlink" title="监控网卡流量"></a>监控网卡流量</h2><p>监控<code>eth0</code>的网卡流量，如果接收量和请求量都为<code>0</code>,则重启网卡。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023/11/01</span><br><br><span class="hljs-comment"># 设置系统语言为英文</span><br>LANG=en<br><br><span class="hljs-comment"># 检查是否已经安装了sar命令</span><br><span class="hljs-keyword">if</span> ! <span class="hljs-built_in">command</span> -v sar &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sar 没有安装在系统中。&quot;</span><br>    <span class="hljs-comment"># 获取系统包管理器类型</span><br>    <span class="hljs-keyword">if</span> [ -x <span class="hljs-string">&quot;<span class="hljs-subst">$(command -v apt-get)</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-comment"># 使用apt安装sar命令</span><br>        sudo apt-get update<br>        sudo apt-get install sysstat<br>    <span class="hljs-keyword">elif</span> [ -x <span class="hljs-string">&quot;<span class="hljs-subst">$(command -v yum)</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-comment"># 使用yum安装sar命令</span><br>        sudo yum install sysstat<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;无法确定系统包管理器类型。请手动安装sar命令。&quot;</span><br>        <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># 检查安装结果</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> -v sar &amp;&gt;/dev/null; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sar 已成功安装在系统中。&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sar 安装失败，请手动安装。&quot;</span><br>        <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><br><span class="hljs-comment"># 使用sar命令获取网络设备性能统计信息，每秒输出1次，共输出60次，然后筛选eth0的信息并将其保存到文件</span><br>sar -n DEV 1 60 | grep eth0 &gt; /tmp/eth0.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 从保存的性能统计信息文件中提取平均接收流量数据（第5列），并移除小数点</span><br>n1=$(grep -i average /tmp/eth0.<span class="hljs-built_in">log</span> | awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span> | sed <span class="hljs-string">&#x27;s/\.//g&#x27;</span>)<br><br><span class="hljs-comment"># 从保存的性能统计信息文件中提取平均发送流量数据（第6列），并移除小数点</span><br>n2=$(grep -i average /tmp/eth0.<span class="hljs-built_in">log</span> | awk <span class="hljs-string">&#x27;&#123;print $6&#125;&#x27;</span> | sed <span class="hljs-string">&#x27;s/\.//g&#x27;</span>)<br><br><span class="hljs-comment"># 删除临时文件，清理残留的性能统计信息</span><br><span class="hljs-built_in">rm</span> -f /tmp/eth0.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 检查接收流量和发送流量是否都为零</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$n1</span>&quot;</span> == <span class="hljs-string">&quot;000&quot;</span> ] &amp;&amp; [ <span class="hljs-string">&quot;<span class="hljs-variable">$n2</span>&quot;</span> == <span class="hljs-string">&quot;000&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-comment"># 如果接收和发送流量都为零，显示消息并重启eth0网卡</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;eth0网卡没有流量，需要重启网卡&quot;</span><br>  ifdown eth0 &amp;&amp; ifup eth0<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="统计文件的行数"><a href="#统计文件的行数" class="headerlink" title="统计文件的行数"></a>统计文件的行数</h2><ol><li>编写一个<code>shell</code>脚本以输出一个文本文件<code>nowcoder.txt</code>中的行数<br>示例:<br>假设<code>nowcoder.txt</code>内容如下：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">100</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;a + b:&quot;</span> &lt;&lt; a + b &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>你的脚本应当输出：<br>9</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方法 1</span><br><span class="hljs-built_in">wc</span> -l nowcoder.txt | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br><span class="hljs-comment"># 方法 2-1</span><br><span class="hljs-built_in">cat</span> nowcoder.txt | <span class="hljs-built_in">wc</span> -l<br><span class="hljs-comment"># 方法 2-2</span><br><span class="hljs-built_in">wc</span> -l &lt; nowcoder.txt<br><br><span class="hljs-comment"># 方法 3-1</span><br><span class="hljs-built_in">cat</span> -n nowcoder.txt | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="hljs-built_in">tail</span> -n 1<br><span class="hljs-comment"># 方法 3-2</span><br><span class="hljs-built_in">cat</span> -n nowcoder.txt | <span class="hljs-built_in">tail</span> -n 1 | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br><br><span class="hljs-comment"># 方法 4</span><br>i=0<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> p;<span class="hljs-keyword">do</span><br>  i=$((i + <span class="hljs-number">1</span>))<br><span class="hljs-keyword">done</span> &lt; nowcoder.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br></code></pre></td></tr></table></figure><h2 id="统计文本中每行数字的个数"><a href="#统计文本中每行数字的个数" class="headerlink" title="统计文本中每行数字的个数"></a>统计文本中每行数字的个数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-11-03</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -ne 1 ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入的参数个数只能是1&quot;</span> <br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">sum</span>=0  <br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> -r line; <span class="hljs-keyword">do</span><br>  <span class="hljs-comment"># 使用sed命令将每行中的非数字字符替换为空格，然后使用wc -L统计字符数，将结果赋给变量num。</span><br>  num=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span> | sed <span class="hljs-string">&#x27;s/[^0-9]//g&#x27;</span> | <span class="hljs-built_in">wc</span> -L)<br>  <span class="hljs-built_in">sum</span>=$((sum + num)) <br><span class="hljs-keyword">done</span> &lt; <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sum: <span class="hljs-variable">$sum</span>&quot;</span> <br></code></pre></td></tr></table></figure><h2 id="菜单脚本根据输入指令来执行命令"><a href="#菜单脚本根据输入指令来执行命令" class="headerlink" title="菜单脚本根据输入指令来执行命令"></a>菜单脚本根据输入指令来执行命令</h2><ol><li>编写一个脚本根据输入指令来执行命令。</li><li>当输入<code>1</code>或<code>d</code>时，输出系统时间。</li><li>当输入<code>2</code>时，列出文件列表。</li><li>当输入<code>3</code>时，打印当前登入用户。</li><li>当输入<code>4</code>时，打印当前目录。</li><li>当输入<code>q</code>时，退出菜单。</li><li>当输入指令时，提示错误信息<code>Wrong input, try again!</code>并继续。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-26</span><br><br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br> <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;please input a number 1-4: &quot;</span> n<br> <span class="hljs-keyword">case</span> <span class="hljs-variable">$n</span> <span class="hljs-keyword">in</span> <br>   1|d)<br>     <span class="hljs-built_in">date</span><br>     <span class="hljs-built_in">continue</span><br>     ;;<br>   2)  <br>     <span class="hljs-built_in">ls</span><br>     <span class="hljs-built_in">continue</span><br>     ;;<br>   3)  <br>     <span class="hljs-built_in">who</span><br>     <span class="hljs-built_in">continue</span><br>     ;;<br>   4)  <br>     <span class="hljs-built_in">pwd</span><br>     <span class="hljs-built_in">continue</span><br>     ;;<br>   q)  <br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Exit&quot;</span><br>     <span class="hljs-built_in">exit</span> 1<br>     <span class="hljs-built_in">break</span><br>     ;;<br>   *)  <br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Wrong input, try again!&quot;</span><br>     <span class="hljs-built_in">continue</span><br>     ;;<br> <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="输入数字并循环执行"><a href="#输入数字并循环执行" class="headerlink" title="输入数字并循环执行"></a>输入数字并循环执行</h2><ol><li>提示用户输入数字，并打印出输入的数字。</li><li>当用户输入不是数字时提示报错信息。</li><li>当用户输入字母<code>q</code>时，退出脚本。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-10-27</span><br><br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入数字，当输入q时退出!&quot;</span> n<br>  num=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span> |sed -r <span class="hljs-string">&#x27;s/[0-9]//g&#x27;</span> |  <span class="hljs-built_in">wc</span> -c)<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span> == <span class="hljs-string">&quot;q&quot;</span> ]<br>  <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">exit</span> 0<br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$num</span>&quot;</span> -ne 1 ]<br>  <span class="hljs-keyword">then</span> <br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入的不是数字，请重试!&quot;</span><br>  <span class="hljs-keyword">else</span><br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输入的数字是：<span class="hljs-variable">$n</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="输出-0-到-500-中-7-的倍数"><a href="#输出-0-到-500-中-7-的倍数" class="headerlink" title="输出 0 到 500 中 7 的倍数"></a>输出 0 到 500 中 7 的倍数</h2><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># author: maojunxyz</span><br><span class="hljs-comment"># version: 1.0</span><br><span class="hljs-comment"># date: 2023-11-02</span><br><br><span class="hljs-comment"># 方法 1</span><br>start=0<br>end=500<br>step=7<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$start</span> -lt <span class="hljs-variable">$end</span> ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> !(( <span class="hljs-variable">$start</span> % <span class="hljs-variable">$step</span> )); <span class="hljs-keyword">then</span><br>         <span class="hljs-built_in">echo</span> <span class="hljs-variable">$start</span><br>         start=$(( start + <span class="hljs-number">1</span> ))<br>    <span class="hljs-keyword">else</span><br>         start=$(( start + <span class="hljs-number">1</span> ))<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 方法 2</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> &#123;0..500..7&#125;; <span class="hljs-keyword">do</span> <br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;num&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 方法 3</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> &#123;0..500&#125;;<span class="hljs-keyword">do</span><br>   [[ <span class="hljs-string">&quot;((num%7))&quot;</span> -eq 0 ]] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;num&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="输出第5行的内容"><a href="#输出第5行的内容" class="headerlink" title="输出第5行的内容"></a>输出第5行的内容</h2><p>编写一个bash脚本以输出一个文本文件nowcoder.txt中第5行的内容。</p><p>示例:<br>假设 nowcoder.txt 内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">welcome<br>to<br>nowcoder<br>this<br>is<br>shell<br>code<br></code></pre></td></tr></table></figure><p>你的脚本应当输出：<br>is。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 方法 1</span><br>sed -n <span class="hljs-string">&#x27;5p&#x27;</span> nowcoder.txt<br><br><span class="hljs-comment"># 方法 2 </span><br><span class="hljs-built_in">head</span> -n 5 nowcoder.txt | <span class="hljs-built_in">tail</span> -n 1<br><br><span class="hljs-comment"># 方法 3 </span><br>awk <span class="hljs-string">&#x27;&#123; if(NR==5) &#123;print($0)&#125; &#125;&#x27;</span> nowcoder.txt<br></code></pre></td></tr></table></figure><p><strong>在线题目</strong></p><ul><li><a href="https://www.nowcoder.com/practice/0372acd5725d40669640fd25e9fb7b0f">去掉文件的空行</a></li><li><a href="https://www.nowcoder.com/practice/bd5b5d4b93a04226a81afbabf0be797d">打印字母数小于8的单词</a></li><li><a href="https://www.nowcoder.com/practice/ff6f36d357d24ce5a0eb817a0ef85ee2">打印文件的最后5行</a></li><li><a href="https://www.nowcoder.com/practice/030fc368e42e44b8b1f8985a8d6ad255">打印空行的行号</a></li><li><a href="https://www.nowcoder.com/practice/205ccba30b264ae697a78f425f276779">统计文件的行数</a></li><li><a href="https://www.nowcoder.com/practice/8b85768394304511b0eb887244e51872">输出 0 到 500 中 7 的倍数</a></li><li><a href="https://www.nowcoder.com/practice/1d5978c6136d4252904757b4fa0c9296">输出第5行的内容</a></li></ul><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
      <tag>数据结构和算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java经典算法题</title>
    <link href="/blog/2023/10/Java%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98.html"/>
    <url>/blog/2023/10/Java%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>      <br>      <span class="hljs-keyword">while</span>(min &lt;= max)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> min + (max - min) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> nums[mid];<br>        <span class="hljs-keyword">if</span>(midVal &lt; target)&#123;<br>          min = mid + <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(midVal &gt; target)&#123;<br>          max = mid -<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：第4行使用 int mid &#x3D; min + (max - min) &#x2F; 2;避免数值溢出（min+max)&#x2F;2 问题。</p></blockquote><h3 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch0</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> fromIndex, <span class="hljs-type">int</span> toIndex,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> fromIndex;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> toIndex - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (low + high) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> a[mid];<br><br>        <span class="hljs-keyword">if</span> (midVal &lt; key)<br>            low = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (midVal &gt; key)<br>            high = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> mid; <span class="hljs-comment">// key found</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -(low + <span class="hljs-number">1</span>);  <span class="hljs-comment">// key not found.</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Arrays.binarySearch</code> 是 Java 中用于在有序数组中执行二分查找的方法。它接受一个有序数组和要查找的元素作为参数，并返回元素在数组中的索引（如果找到）或应该插入的索引位置（如果未找到）。</p><p>以下是 <code>Arrays.binarySearch</code> 方法的签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(Object[] a, Object key)</span><br></code></pre></td></tr></table></figure><p><code>Arrays.binarySearch</code> 方法有以下几个重要特点：</p><ol><li><p><strong>有序数组要求</strong>：传递给 <code>binarySearch</code> 方法的数组必须是有序的。如果数组无序，结果是不确定的。</p></li><li><p><strong>返回值说明</strong>：如果找到元素 <code>key</code>，它将返回元素的索引。如果未找到元素 <code>key</code>，则返回一个负数值，该值是应该插入元素 <code>key</code> 以维持数组的有序性的位置。负数值的计算方式为：- (插入点索引 + 1)。这是一个将元素插入到有序数组的标准方式。</p></li></ol><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>下面是一个示例，演示如何使用 <code>Arrays.binarySearch</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearchExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] numbers = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        <br>        <span class="hljs-comment">// 使用binarySearch查找元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(numbers, target);<br>        <br>        <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) &#123;<br>            System.out.println(target + <span class="hljs-string">&quot; found at index &quot;</span> + index);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(target + <span class="hljs-string">&quot; not found. It should be inserted at index &quot;</span> + (-index - <span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，我们将 <code>target</code>（要查找的元素）设为6，并使用 <code>Arrays.binarySearch</code> 在有序数组 <code>numbers</code> 中查找它。如果找到，它将返回该元素的索引；如果未找到，它将返回应该插入该元素的位置。</p><p>要注意的是，如果数组中有多个相同的元素，<code>binarySearch</code> 方法只返回最前面匹配的索引。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序（Bubble Sort）是一种简单的排序算法，它反复地遍历要排序的列表，比较相邻元素并交换它们，直到整个列表按照升序或降序排列。</p><p>其时间复杂度和空间复杂度如下：</p><ol><li><p>时间复杂度：</p><ul><li>最好情况：$O(n)$</li><li>平均情况：$O(n^2)$</li><li>最坏情况：$O(n^2)$</li></ul><p>冒泡排序的最好情况发生在输入数组本身已经有序的情况下，此时只需要进行一次遍历，时间复杂度为O(n)。然而，最坏情况发生在输入数组完全逆序的情况下，需要进行n-1轮比较和交换，每轮比较需要遍历整个数组，因此时间复杂度为O(n^2)。平均情况下，冒泡排序的时间复杂度也是O(n^2)。</p></li><li><p>空间复杂度：</p><ul><li>冒泡排序是一种原地排序算法，不需要额外的内存空间，因此空间复杂度为O(1)。</li></ul></li></ol><p>尽管冒泡排序的时间复杂度在最坏情况下较高，但它是一种简单的排序算法，适用于小型数据集或在特殊情况下。在实际应用中，通常会使用更高效的排序算法，如快速排序或归并排序，以提高排序性能。</p><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortColors</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length - <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; nums.length - <span class="hljs-number">1</span> - i; j++)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> nums[j];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums[j + <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(l &gt; r)&#123;<br>                    nums[j + <span class="hljs-number">1</span>] = l;<br>                    nums[j] = r;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码中，外层循环的次数是 <code>nums.length - 1</code>，内层循环的次数也是 <code>nums.length - 1 - i</code>，其中<code>i</code>是外层循环的迭代变量。内层循环中执行了比较和可能的元素交换操作。</p><h3 id="优化实现"><a href="#优化实现" class="headerlink" title="优化实现"></a>优化实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortColors</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> nums[j];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> nums[j + <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(l &gt; r)&#123;<br>                    nums[j + <span class="hljs-number">1</span>] = l;<br>                    nums[j] = r;<br>                    last = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 记录最后交换时的索引</span><br>            n = last;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码中，有一个外层while循环和一个内层for循环。外层while循环的终止条件是 <code>n == 0</code>，即没有发生交换的情况下终止。内层for循环遍历数组，并在需要的情况下进行元素交换。</p><h3 id="源码实现-1"><a href="#源码实现-1" class="headerlink" title="源码实现"></a>源码实现</h3><p>Java标准库中没有使用冒泡排序算法来实现排序方法。标准库中提供了<code>java.util.Arrays</code>类，其中包含了用于对数组进行排序的方法，最常见的是<code>Arrays.sort</code>方法，它使用更高效的排序算法，如快速排序和归并排序，而不是冒泡排序。</p><h2 id="在线题库"><a href="#在线题库" class="headerlink" title="在线题库"></a>在线题库</h2><ul><li><a href="https://leetcode.com/problems/binary-search/description/">Binary Search - LeetCode</a></li><li><a href="https://leetcode.com/problems/sort-colors/">Sort Colors - LeetCode</a></li></ul><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>值得一读的书单</title>
    <link href="/blog/2023/10/%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%BB%E7%9A%84%E4%B9%A6%E5%8D%95.html"/>
    <url>/blog/2023/10/%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%BB%E7%9A%84%E4%B9%A6%E5%8D%95.html</url>
    
    <content type="html"><![CDATA[<h2 id="思维成长"><a href="#思维成长" class="headerlink" title="思维成长"></a>思维成长</h2><ul><li>失控</li><li>思考快与慢</li><li>终身成长</li><li>高效能人士的思维方式</li><li>高效能人士的七个习惯</li><li>从为什么开始</li><li>赋能</li><li>敏捷革命</li><li>创建敏捷团队</li><li>高绩效教练</li><li>结构化研讨</li><li>团队协作的五大障碍</li><li>拥抱变革</li><li>管理者的意识进化</li><li>你的灯亮着吗</li><li>探索需求-设计前的质量</li><li>麦肯锡教我的思考武器</li><li>咨询的奥秘</li><li>系统思维</li><li>金字塔原理</li></ul><h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><ul><li>敏捷软件开发</li><li>软件开发本质论</li><li>Scrum敏捷软件开发</li><li>用户故事与敏捷方法</li><li>敏捷估计与规划</li><li>Scrum精髓</li><li>敏捷回顾</li><li>敏捷整洁之道</li><li>代码整洁之道</li><li>解析极限编程</li><li>测试驱动开发</li><li>持续集成</li><li>重构</li><li>持续交付</li><li>人月神话</li><li>凤凰项目</li></ul><h2 id="心理类"><a href="#心理类" class="headerlink" title="心理类"></a>心理类</h2><ul><li><p>伯恩斯新情绪疗法</p></li><li><p>被讨厌的勇气</p></li><li><p>治疗好了我的精神内耗</p></li><li><p>存在主义心理治疗</p></li><li><p>蛤蟆先生去看心理医生</p></li><li><p>原生家庭–如何修补自己的性格缺陷</p></li><li><p>贫困的本质</p></li><li><p>了不起的我</p></li><li><p>少有人走的路</p></li><li><p>拥抱你的抑郁情绪</p></li><li><p>为何爱会伤人</p></li><li><p>非暴力沟通</p></li><li><p>当下的力量</p></li><li><p>《幸福的勇气》</p></li><li><p>《 5%的改变》</p></li><li><p>生命的重建</p></li><li><p>自卑与超越</p></li><li><p>《人性的优点》</p></li><li><p>《人性的弱点》</p></li><li><p>《以幽默的方式过一生》</p></li><li><p>《人生的智慧》叔本华</p></li><li><p>《身份的焦虑》阿兰·德波顿</p></li><li><p>《社会性动物》埃利奥特·阿伦森</p></li><li><p>《亲密关系》罗兰·米勒</p></li><li><p>《等待我的离去》</p></li><li><p>阿德勒：个体心理学</p></li><li><p>《活出生命的意义》</p></li><li><p>《法的医疗》</p></li><li><p>《身体从未忘记》</p></li><li><p>《你经历了什么》</p></li><li><p>《如何吵架》</p></li><li><p>《也许你该找个人聊聊》</p></li></ul><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>清单</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口测试工具Insomnia入门使用</title>
    <link href="/blog/2023/09/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7Insomnia%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8.html"/>
    <url>/blog/2023/09/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7Insomnia%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开官网的下载地址：<a href="https://insomnia.rest/download">Download - Insomnia</a></p><p>下载对应平台的安装包，然后安装完打开界面，新建一个<strong>文档类型</strong>的项目空间。</p><p><img src="/blog/./assets/image-20230927222418466.png" alt="新建项目空间"></p><p>进入项目空间后，默认是在DESIGN菜单的，先点击DEBUG菜单进入调试工作区。</p><p><img src="/blog/./assets/image-20230927222704484.png" alt="空间布局"></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>下面以一个接口为例进行演示。下图中，除了标记③是需要借助插件来实现自己校验功能，其余的功能都是通过Insomnia自带实现的。</p><p><img src="/blog/./assets/image-20230927222942034.png" alt="image-20230927222942034"></p><blockquote><p>标记③借助的插件是：Response Validator Unit Test Plugin</p></blockquote><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ul><li><p>Response Validator Unit Test Plugin</p><ul><li>根据 Jsonpath 校验响应结果（已二开开源，支持区间和集合校验）</li></ul></li><li><p>faker </p><ul><li>测试数据 Mock（底层是 faker.js）</li></ul></li><li><p>mockchineseidcard Plugin </p><ul><li>生成符合校验的大陆身份证(可根据是否成年和性别区分（每次请求都会变化）</li></ul></li><li><p>response parse json </p><ul><li>将结果响应中 Json 字符串转成 Json 对象</li></ul></li><li><p>Runner </p><ul><li>支持批量执行目录下的用例</li></ul></li><li><p>SM3 Plugin </p><ul><li>支持SM3散列而开发的插件（已开源）</li></ul></li><li><p>Postman Export</p><ul><li>导出 Postman 格式</li></ul></li></ul><p><img src="/blog/./assets/image-20230927223310137.png" alt="插件列表"></p><h4 id="Response-Validator-Unit-Test-Plugin使用"><a href="#Response-Validator-Unit-Test-Plugin使用" class="headerlink" title="Response Validator Unit Test Plugin使用"></a>Response Validator Unit Test Plugin使用</h4><p>在请求的接口 Headers 上，添加一个Header</p><ul><li>key是固定值，表示要开始自动校验。</li><li>value是要校验的JsonPath规则。</li></ul><p>示例：Key:INSOMNIA-RESPONSE-VALIDATOR   value:校验规则的JsonPath</p><p><img src="/blog/./assets/image-20230927223458593.png" alt="校验规则"></p><p><img src="/blog/./assets/image-20230927223552194.png" alt="校验说明"></p><blockquote><p>JsonPath示例说明：两个标记数字相同则是一处校验点。</p></blockquote><p>下面是JsonPath校验对应的解释：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;$.respBody.flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> #固定值校验<br> <span class="hljs-attr">&quot;$.respBody.psce_fraud_jsrcu_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br> <span class="hljs-string">&quot;range&quot;</span><span class="hljs-punctuation">,</span> #range，范围校验(<span class="hljs-number">300</span>到<span class="hljs-number">850</span>这种），这里表示校验在<span class="hljs-punctuation">[</span><span class="hljs-number">300</span><span class="hljs-punctuation">,</span><span class="hljs-number">850</span><span class="hljs-punctuation">]</span>的区间 <span class="hljs-string">&quot;300&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;850&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;$.respBody.ppre_fraud_jsrcu_label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br> <span class="hljs-string">&quot;valid&quot;</span><span class="hljs-punctuation">,</span> #valid<span class="hljs-punctuation">,</span>集合校验(校验非连续<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span>这种），这里表示校验<span class="hljs-punctuation">&#123;</span><span class="hljs-number">0</span>，<span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span>，连续 <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;$.respHead.resp_cd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;000000&quot;</span><span class="hljs-punctuation">,</span> #固定值校验 <span class="hljs-attr">&quot;$.respHead.resp_msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br> <span class="hljs-string">&quot;valid&quot;</span><span class="hljs-punctuation">,</span> #集合校验，单个值可用固定值校验代替<br> <span class="hljs-string">&quot;处理成功&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;$.respHead.comprs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span> #固定值校验<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>(本文完)</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
      <tag>测试工具</tag>
      
      <tag>Insomnia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 11 使用技巧</title>
    <link href="/blog/2023/09/Windows%2011%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html"/>
    <url>/blog/2023/09/Windows%2011%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html</url>
    
    <content type="html"><![CDATA[<h2 id="窗口与屏幕"><a href="#窗口与屏幕" class="headerlink" title="窗口与屏幕"></a>窗口与屏幕</h2><p>1、拖动窗口并轻轻晃动可以最小化其他窗口。</p><p>2、按 Win + D 最小化所有程序并返回桌面，再按一次 Win + D 又可以回到原来的窗口。</p><p>3、按 Alt + F4 关闭窗口，在桌面窗口按 Alt + F4 会弹出关机对话框。</p><p>4、按 Win + L 锁定计算机。</p><p>5、按 Win + P 可以快速切换多屏显示方式。</p><p>6、按 Alt + Esc 将当前活动窗口移动到最后面。</p><p>7、按 Alt + 空格键 可以打开窗口系统菜单，再按 M 可以移动窗口。</p><p>8、按 Ctrl + W 或 ALT + F4，或 ALT + 空格 + C 都可以快速关闭窗口。</p><p>9、在弹出的错误对话框上按 Ctrl + C 可以复制内容。</p><p>10、连续按 Win + → 或 ← 窗口可以切换屏幕左、屏幕右、屏幕中间。</p><p>11、连续按 Win + ↑ 或 ↓ 当前窗口可以切换最大化、屏幕中间、最小化状态。</p><p>12、按 Win + 数字键可以切换到任务栏的第 n 个程序。</p><h2 id="控制台-命令行程序"><a href="#控制台-命令行程序" class="headerlink" title="控制台 &#x2F; 命令行程序"></a>控制台 &#x2F; 命令行程序</h2><p>1、Windows 10 &#x2F; 11 系统控制台程序可按 Alt + Enter 切换全屏。</p><p>2、在命令行窗口可以按 tab 键自动完成输入，按 F7 可以显示历史记录</p><p>3、在资源管理器地址栏直接输入 cmd 回车，可在当前目录打开命令行。</p><p>4、命令行与批处理也可以隐藏黑窗口并用于开发桌面软件，参考：《aardio  + bat 批处理混合编程开发桌面软件》</p><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><p>1、按 Win + R 打开运行对话框。在运行对话框中可直接输入系统可搜索到的路径( 可在 %Path% 环境变量添加搜索目录 )。例如输入 cmd 并回车可打开命令行，输入 control 并回车可以打开控制面板。输入 drivers 后回车，可以快速打开 hosts 文件所在的 etc 目录。</p><p>2、按 Win + R 打开运行对话框，可输入 shell 命令打开一些特殊目录。例如输入 shell:Downloads 再回车就可以打开系统下载目录。参考：aardio 范例 &gt; 文件操作 &gt; 特殊路径 &gt; 打开隐藏目录</p><p>3、按 Win 弹出开始菜单后直接打字可打开搜索窗口（ 或按 Win + S ），这里也可以输入系统能搜索到的程序文件名。支持在注册表路径</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths<br></code></pre></td></tr></table></figure><p>下添加的应用程序文件名。</p><p>4、按 Ctrl + Shift + Esc 可直接打开任务管理器。</p><p>5、按 Win + V 可以查看剪贴板历史</p><p>按 Win + I 打开 设置 &gt; 系统 &gt; 剪贴板 可以关闭此功能 。</p><p>6、按 Win + Pause 可查看系统属性。</p><h2 id="资源管理器"><a href="#资源管理器" class="headerlink" title="资源管理器"></a>资源管理器</h2><p>1、按 Win + E 打开文件资源管理器。</p><p>2、资源管理器(或网页浏览器) 按 Ctrl + L 或 Alt+ D 或 F4&#x2F;F6 可快速切换到地址栏。</p><p>3、在资源管理器按住 Shift 键点右键可以显示隐藏菜单项，例如：“复制为路径”。注意这样复制的路径首尾是带双引号的，所以桌面软件开发者要注意自动去除这类双引号。<br>系统文件对话框里可以直接粘贴这种带双引号的路径。另外在系统文件对话框里 —— 选中文件然后按 Ctrl + C 也可以直接复制带双引号的完整路径。</p><p>4、资源管理器右键点选一个或多个图片，可在弹出菜单中直接旋转图片。</p><p>5、连续重命名文件：在资源管理器按 F2 命名文件，修改名称后不要按回车 —— 直接按 tab 键可以跳到下一个文件并切换到重命名输入。</p><p>6、按住 Ctrl 拖动文件 —— 复制文件，按住 Shift 拖动文件 —— 移动文件，按住 Alt 拖动文件 —— 创建快捷方式。</p><p>7、资源管理器地址栏（按 Win + S 打开搜索栏也可以 ）输入 cmd&#x2F;control 等系统命令后回车，可在当前目录运行目标程序。如果想要将其他程序添加到系统搜索路径，个人认为最好不要随意改 %Path% 环境变量或将程序放到系统目录，更简单的方法是将程序路径写入注册表：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths<br></code></pre></td></tr></table></figure><p>就可以了。在 aardio 自带范例里我写过一个小工具专门做这事（ 范例 &gt; 操作系统 &gt; 注册表 &gt; 系统搜索路径 ）。</p><p>8、在资源管理器地址栏（按 Win + R 打开运行对话框也可以）可输入系统目录环境变量回车可直接打开对应目录，例如输入 %temp% 可以打开临时目录，输入 %localappdata% 可以打开 AppData 目录。</p><h2 id="图像、截屏、录屏"><a href="#图像、截屏、录屏" class="headerlink" title="图像、截屏、录屏"></a>图像、截屏、录屏</h2><p>1、按 Win + Shift + S 可以打开系统自带截图工具。系统自带截图有一个好处，截图时不会导致右键菜单关闭。其他截图工具对右键菜单截图不太方便。</p><p>2、按 Win + G 可以打开系统自带录屏工具。</p><p>3、如果我们在网上发文章，有时候插入可以直接播放的 GIF 小动画是非常必要的。但一些录屏工具操作步骤太多，最麻烦的是 Windows 剪贴板默认并没有专门的 GIF 格式。这就导致我们复制本地 GIF 再粘贴到其他程序会出问题 —— 要么是变为无效图像，要不是动画变成了静止图像，要么就是一切正常点网络发送 GIF 时报错。</p><p>要解决这个问题可以下载开源的极简 GIF 录屏工具 Gif123，这个软件录屏非常简单，录好 GIF 以后可以一键复制，Gif123 复制的 GIF 比较特别 —— 可以完美粘贴到其他程序中。</p><p>例如我在头条写文章，用 Gif123 录好的 GIF，只要在头条编辑器里 Ctrl + V 一下就可以搞定，方便太多了。</p><h2 id="文本-输入法"><a href="#文本-输入法" class="headerlink" title="文本 &#x2F; 输入法"></a>文本 &#x2F; 输入法</h2><p>1、按 Win + . 可打开系统自带表情符号面板。</p><p>2、Ctrl + C &#x2F; Ctrl + Insert 都可以复制。Ctrl + V &#x2F; Shift + Insert 都可以粘贴。Ctrl + Z &#x2F; Alt + Backspace 都可以撤消。</p><p>3、大多数输入法都支持的常用快键键：</p><p>「Shift」切换中&#x2F;英输入；<br>「Ctrl + . 」切换中&#x2F;英标点；<br>「Shift + 空格 」切换全&#x2F;半角；</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter安装和介绍</title>
    <link href="/blog/2023/09/Jmeter%E5%AE%89%E8%A3%85%E5%92%8C%E4%BB%8B%E7%BB%8D.html"/>
    <url>/blog/2023/09/Jmeter%E5%AE%89%E8%A3%85%E5%92%8C%E4%BB%8B%E7%BB%8D.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Apache JMeter是一个Apache项目，可以用作负载测试工具，用于分析和测量各种服务的性能，可用于 Web 应用程序的接口测试、自动化测试、性能测试。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Jmeter 依赖 Java运行时，所以需要在本机安装 JRE 或 JDK。</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>首先下载 Jmeter，然后解压zip包。</p><ul><li>Windows<ul><li>进入解压后文件夹 \bin 文件夹中，双击  jmeter.ba t，启动图形界面GUI。</li></ul></li></ul><ul><li>Unix&#x2F;Linux<ul><li>进入解压后文件夹 \bin 的命令行，执行.&#x2F;jmeter.sh 命令启动图形界面GUI。</li></ul></li></ul><blockquote><p> 注意：不需要配置<strong>JMETER_HOME环境变量</strong>，如果配置了，那么你的电脑就有且仅能运行一个Jmeter。其他版本的 Jmeter可能直接闪退，因为不配置时会读取 Jmeter当前目录下的环境变量，不同 Jmeter 版本下的环境变量会有所不同。</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>bin  启动 配置文件</li><li>lib   jar包  工具自身jar， 以及第三方jar<ul><li>ext   第三方插件管理</li></ul></li><li>docs   文档  用于jmeter进行二次开发调用的api  接口文档</li><li>printable_docs   离线帮助文档</li><li>extras  扩展   CICD 性能测试持续集成</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>设置语言：<ul><li>以.properties结尾的文件，都是jmeter的<strong>属性</strong>配置文件</li><li>属性配置文件   jmeter.properties</li></ul></li></ul><blockquote><p>注意：修改<strong>属性配置文件</strong>中的信息，一定要重启才能生效</p></blockquote><p>在图形界面的options  &gt; choose language 修改语言后会临时切换gui界面语言，一旦关闭gui，就会被还原。如果要永久生效，需要修改properties文件。</p><h3 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h3><ul><li>测试计划<ul><li>元件<ul><li>线程组： 接口、自动化测试时，基本不会去改动<ul><li>性能测试，这个是用于<strong>进行性能场景设计</strong>的</li><li>线程组：进行性能场景设计 </li><li>setup线程组<ul><li>前置</li></ul></li><li>teardown线程组<ul><li>后置</li></ul></li></ul></li><li>配置元件<ul><li>优先级是最高的</li><li><strong>用户定义变量</strong></li></ul></li><li>监听器<ul><li>性能结果进行监控，展示结果数据</li><li>不同的元件，是从不同的角度，展示结果数据</li></ul></li><li>取样器： 根据不同的协议，使用不同的取样器<strong>编写脚本</strong></li><li>逻辑控制</li><li>前置<ul><li><strong>用户参数</strong></li></ul></li><li>后置<ul><li>对 取样器进行控制</li></ul></li><li>定时器</li></ul></li></ul></li></ul><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
      <tag>测试工具</tag>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈性能测试</title>
    <link href="/blog/2023/09/%E6%B5%85%E8%B0%88%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html"/>
    <url>/blog/2023/09/%E6%B5%85%E8%B0%88%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html</url>
    
    <content type="html"><![CDATA[<h2 id="测试划分"><a href="#测试划分" class="headerlink" title="测试划分"></a>测试划分</h2><p>软件测试可以分为功能测试和非功能测试，功能测试根据测试金字塔可以分为单元测试、接口测试、UI测试、探索测试。更多的功能测试包含以下：</p><ul><li>单元测试(Unit testing)</li><li>集成测试(Integration testing)</li><li>系统测试(System testing)</li><li>健全性测试(Sanity testing)</li><li>冒烟测试(Smoke testing)</li><li>接口测试(Interface testing)</li><li>回归测试(Regression testing)</li><li>Beta&#x2F;验收测试(Beta&#x2F;Acceptance testing)</li></ul><p>非功能测试包含以下：</p><ul><li>性能测试(Performance Testing)</li><li>负载测试(Load testing)</li><li>压力测试(Stress testing)</li><li>容量测试(Volume testing)</li><li>安全测试(Security testing)</li><li>兼容性测试(Compatibility testing)</li><li>安装测试(Install testing)</li><li>恢复测试(Recovery testing)</li><li>可靠性测试(Reliability testing)</li><li>可用性测试(Usability testing)</li><li>一致性测试(Compliance testing)</li><li>本地化测试(Localization testing)</li></ul><h2 id="测试思维"><a href="#测试思维" class="headerlink" title="测试思维"></a>测试思维</h2><p>不同的测试之间，使用到的测试思维是不同的。</p><p>功能测试是<strong>对输出结果的校验</strong>，都是模拟单用户的操作，对比预期结果和实际的输出结果。</p><p>性能测试是同时模拟多个用户同时操作，关注服务端的响应时间。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>通过工具模拟多用户发起请求的行为，获取<strong>性能指标值</strong>。</p><p>常见模拟工具分类：</p><ul><li>使用线程<ul><li>线程是使用进程的资源。工具：Jmeter、LoadRunner</li></ul></li><li>使用进程<ul><li>资源拥有者，资源销毁会更大。工具：LoadRunner</li></ul></li><li>使用进程+ 线程<ul><li>工具：ngrinder</li></ul></li><li>使用协程<ul><li>虚拟线程。工具： python+locust</li></ul></li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>满意度指数</li></ul><p>多用户同时访问登入接口，性能中的avgRT应该在1.5s可以被接受的。因为1.5秒 是APDEX 用户满意度指数。</p><ul><li>事务</li></ul><p>一个请求行为，并不一定只有一个接口，所以，一个事务可能是多个接口。</p><blockquote><p>注意：在Jmeter中，默认1个接口请求一次，即每次请求行为是一个事务，可以通过事务控制器，挂载多个接口请求，合并成为1个事务。</p></blockquote><ul><li><p>性能指标： </p><ul><li><p>平均响应时间（avgRT）</p><ul><li>比如 rt90%,rt95%,rt99%</li></ul></li><li><p>服务器每秒处理的事务数(TPS)</p><ul><li>衡量<strong>服务器</strong>处理能力的最主要的指标</li><li>50tps： 服务器每秒能处理50个事务，1小时是50 t&#x2F;s  * 60 * 60 &#x3D; 18w</li></ul></li><li><p>用户请求频率(RPS)</p><ul><li>100个并发数发起请求，一秒钟会发起多少请求？</li></ul><p>如果每个并发都消耗1秒（即请求频率是是1），则请求总量是100。</p><p>如果每个并发都消耗200毫秒（即请求频率是是5），则请求总量是500。</p><p>当请求的频率不清楚时，无法计算1秒钟总请求量。</p></li></ul><ul><li>每秒查询率（QPS)<ul><li>如果把1个事务，当做只查询1次，则QPS&#x3D;TPS。</li><li>实际请求可能是 1个TPS: N个QPS，即1 个完整事务请求会包含多个查询的请求。</li></ul></li><li>每秒用户点击率（HPS）<ul><li>更侧重页面上的点击。</li></ul></li></ul></li><li><p>吞吐量</p><ul><li><strong>网络</strong>中每秒传输的事务数<ul><li>没有网络瓶颈：tps 数值 &#x3D; 吞吐量数值</li><li>如果网络有瓶颈: tps 数值 !&#x3D; 吞吐量数值</li></ul></li></ul></li><li><p>吞吐率  </p><ul><li>每秒钟能通过多少kb数据</li></ul></li><li><p>服务器资源利用率</p><ul><li>cpu、内存、io的利用率</li></ul></li><li><p>并发用户数：</p><ul><li><p>同一时间发起请求的用户数</p><ul><li><p>广义并发： 同一时间发起请求(相同和不相同)</p><ul><li>针对整个产品的请求</li></ul></li><li><p>狭义并发：同一时间发起相同请求</p><ul><li><p>集合点：集合多个人在同一时间发起相同请求</p></li><li><p>比如秒杀接口。</p></li></ul></li></ul></li></ul></li></ul><h3 id="性能测试流程"><a href="#性能测试流程" class="headerlink" title="性能测试流程"></a>性能测试流程</h3><ul><li>性能测试准备</li><li>搭建性能测试环境</li><li>性能测试脚本开发</li><li>性能测试脚本执行</li><li>结果分析与调优</li><li>测试报告与结果跟踪</li></ul><h2 id="负载测试"><a href="#负载测试" class="headerlink" title="负载测试"></a>负载测试</h2><p>负载测试是通过逐步增加并发用户数，找出性能的最大拐点区间。</p><ul><li>逐步增加并发用户数</li><li>区间判断<ul><li>有没有报错</li><li>tps下降</li><li>响应时间变长</li></ul></li></ul><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><p>使用<strong>一定量</strong>的并发用户数，持续<strong>比较长时间</strong>向服务器发起请求，查看服务器的<strong>稳定性</strong>。</p><p>一定量访问会小于最大并发用户数  ，比如20% 或 80%。</p><p>前者20%为了更快收集数据便于统计分析。</p><p>后者80%是为了观测服务器的稳定性。</p><h2 id="容量测试"><a href="#容量测试" class="headerlink" title="容量测试"></a>容量测试</h2><p>比如测试环境和生成环境所使用的测试数据容量。</p><p>在性能测试时，如果数据库的数据量级是不一致的，性能指标值，也可能存在差异。 所以在测试中要使用和生产相应的数据量级。同时要保证机器资源配置是和生产完全一样（硬件配置一样、数量一样、网络一样、架构参数一样）。</p><h2 id="测试顺序"><a href="#测试顺序" class="headerlink" title="测试顺序"></a>测试顺序</h2><p>在性能测试之前，最好先进行负责测试，分析性能的最大拐点。在根据拐点值进行性能测试，分析性能指标和调优。最后做压力测试查看服务器的稳定性。</p><ol><li>负载测试</li><li>性能测试</li><li>压力测试</li></ol><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
      <category>业务架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
      <tag>负载测试</tag>
      
      <tag>性能测试</tag>
      
      <tag>压力测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国产Linux软件清单</title>
    <link href="/blog/2023/09/%E5%9B%BD%E4%BA%A7Linux%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95.html"/>
    <url>/blog/2023/09/%E5%9B%BD%E4%BA%A7Linux%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95.html</url>
    
    <content type="html"><![CDATA[<h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><ul><li><a href="https://srf.baidu.com/site/guanwang_linux/index.html">百度输入法</a></li><li><a href="https://pinyin.sogou.com/linux?r=pinyin">搜狗输入法</a></li><li><a href="https://pinyin.thunisoft.com/index.html#/sy">华宇输入法</a></li><li><a href="http://www.znwb.com/linuxxz.html">智能陈桥输入法</a></li><li><a href="http://ime.onon.cn/zh-CN/download">Onon输入法</a></li></ul><h2 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h2><ul><li><a href="https://im.qq.com/linuxqq/index.html">腾讯tim</a></li><li><a href="https://www.feishu.cn/download">飞书</a></li><li><a href="http://www.ipmsg.org.cn/home/index/download">飞鸽传书</a></li><li><a href="https://page.dingtalk.com/wow/z/dingtalk/default/dddownload-index">钉钉</a></li></ul><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><ul><li><a href="https://pc.meitu.com/download">美图秀秀</a></li></ul><h2 id="影音"><a href="#影音" class="headerlink" title="影音"></a>影音</h2><ul><li><a href="http://v.qq.com/download.html#Linux">腾讯视频</a></li><li><a href="https://y.qq.com/download/download.html">QQ音乐</a></li><li><a href="https://music.163.com/#/download">网易云音乐</a></li></ul><h2 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h2><ul><li><a href="https://linux.wps.cn/">WPS</a></li><li><a href="http://www.yozosoft.com/product-officelinux.html">永中Office</a></li><li><a href="https://www.wiz.cn/zh-cn/download.html">为知笔记</a></li><li><a href="https://www.xmind.net/download/">XMind</a></li><li><a href="https://www.edrawsoft.cn/download/">亿图图示&#x2F;脑图&#x2F;项目管理</a></li><li><a href="https://www.foxitsoftware.cn/pdf-reader/">福昕阅读器</a></li><li><a href="https://www.gstarcad.com/download">浩辰CAD</a></li><li><a href="https://www.zwsoft.cn/product/zwcad/download">中望CAD</a></li><li><a href="https://meeting.tencent.com/download-center.html">腾讯会议</a></li><li><a href="https://zoom.cn/download?os=linux">Zoon</a></li><li><a href="https://hsk.oray.com/download/">花生壳</a></li><li><a href="https://sunlogin.oray.com/download">向日葵</a></li><li><a href="http://cajviewer.cnki.net/download.html">CAJViewer</a></li><li><a href="https://modao.cc/downloads/#sec-desktop">墨刀</a></li></ul><h2 id="外语学习"><a href="#外语学习" class="headerlink" title="外语学习"></a>外语学习</h2><ul><li><a href="http://cidian.youdao.com/multi.html">有道词典</a></li><li><a href="https://www.eudic.net/v4/en/app/ting">每日英语听力</a></li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul><li><a href="https://www.maxthon.cn/mx6/history/">遨游浏览器</a></li><li><a href="https://browser.360.cn/se/linux/index.html">360安全浏览器</a></li></ul><h2 id="网盘"><a href="#网盘" class="headerlink" title="网盘"></a>网盘</h2><ul><li><a href="https://166c6b.link.yunpan.360.cn/index/download">360安全云盘</a></li><li><a href="https://www.jianguoyun.com/s/downloads">坚果云</a></li><li><a href="https://pc.115.com/index.html#linux">115电脑版</a></li><li><a href="https://pan.baidu.com/download">百度网盘</a></li></ul><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
      <tag>清单</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在线查询打印个人社会保险缴费证明</title>
    <link href="/blog/2023/09/%E5%9C%A8%E7%BA%BF%E6%9F%A5%E8%AF%A2%E6%89%93%E5%8D%B0%E4%B8%AA%E4%BA%BA%E7%A4%BE%E4%BC%9A%E4%BF%9D%E9%99%A9%E7%BC%B4%E8%B4%B9%E8%AF%81%E6%98%8E.html"/>
    <url>/blog/2023/09/%E5%9C%A8%E7%BA%BF%E6%9F%A5%E8%AF%A2%E6%89%93%E5%8D%B0%E4%B8%AA%E4%BA%BA%E7%A4%BE%E4%BC%9A%E4%BF%9D%E9%99%A9%E7%BC%B4%E8%B4%B9%E8%AF%81%E6%98%8E.html</url>
    
    <content type="html"><![CDATA[<h2 id="办理步骤"><a href="#办理步骤" class="headerlink" title="办理步骤"></a>办理步骤</h2><ol><li>登录“北京市人力资源和社会保障局”网站 <a href="http://rsj.beijing.gov.cn/">(http://rsj.beijing.gov.cn/</a>，点击移动窗口“社会保险查询服务”。或者直接访问“社会保险权益查询服务” <a href="http://fuwu.rsj.beijing.gov.cn/bjdkhy/sbqycx/sbRights/sbRightsHome">http://fuwu.rsj.beijing.gov.cn/bjdkhy/sbqycx/sbRights/sbRightsHome</a></li></ol><p><img src="/blog/./assets/W020220129527829406680.png" alt="1.png"></p><ol start="2"><li>在“城镇职工”版块，点击【职工年度对账单查询】按钮。</li></ol><p><img src="/blog/./assets/W020220129527829517510.png" alt="2.png"></p><ol start="3"><li>选择您要查询的“年度”，点击【查询】按钮进行查阅，并点击【下载打印】按钮下载缴费证明。</li></ol><p><img src="/blog/./assets/W020220129527829565664.jpg" alt="42.jpg"></p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>京东营销类电话和短信关闭通道</title>
    <link href="/blog/2023/09/%E4%BA%AC%E4%B8%9C%E8%90%A5%E9%94%80%E7%B1%BB%E7%94%B5%E8%AF%9D%E5%92%8C%E7%9F%AD%E4%BF%A1%E5%85%B3%E9%97%AD%E9%80%9A%E9%81%93.html"/>
    <url>/blog/2023/09/%E4%BA%AC%E4%B8%9C%E8%90%A5%E9%94%80%E7%B1%BB%E7%94%B5%E8%AF%9D%E5%92%8C%E7%9F%AD%E4%BF%A1%E5%85%B3%E9%97%AD%E9%80%9A%E9%81%93.html</url>
    
    <content type="html"><![CDATA[<h2 id="关闭通道"><a href="#关闭通道" class="headerlink" title="关闭通道"></a>关闭通道</h2><p>打开京东 - 我的 - 设置 </p><ul><li><p>营销类电话管理</p><ul><li>隐私设置 - 商业性电话管理</li></ul></li><li><p>营销短信管理</p><ul><li>消息通知设置 - 营销短信</li></ul></li></ul><p><img src="/blog/./assets/p82L6Hmj.png" alt="img"></p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《雀刀门传奇》观后感</title>
    <link href="/blog/2023/09/%E3%80%8A%E9%9B%80%E5%88%80%E9%97%A8%E4%BC%A0%E5%A5%87%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F.html"/>
    <url>/blog/2023/09/%E3%80%8A%E9%9B%80%E5%88%80%E9%97%A8%E4%BC%A0%E5%A5%87%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F.html</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>导演: <a href="https://movie.douban.com/celebrity/1450668/">唐铁军</a> &#x2F; <a href="https://movie.douban.com/celebrity/1461871/">吴迪</a><br>编剧: <a href="https://movie.douban.com/celebrity/1497951/">彭旭</a> &#x2F; <a href="https://movie.douban.com/celebrity/1497952/">陈薪竹</a> &#x2F; <a href="https://movie.douban.com/celebrity/1497953/">金壳贝贝</a> &#x2F; <a href="https://movie.douban.com/celebrity/1497954/">孙瑜</a> &#x2F; <a href="https://movie.douban.com/celebrity/1359072/">赵明畅</a> &#x2F; <a href="https://movie.douban.com/celebrity/1476730/">潘疼疼</a> &#x2F; <a href="https://movie.douban.com/celebrity/1497955/">高冰</a> &#x2F; <a href="https://movie.douban.com/celebrity/1497956/">六耳圆圆</a> &#x2F; <a href="https://movie.douban.com/celebrity/1497957/">倪运博</a><br>主演: <a href="https://movie.douban.com/celebrity/1274296/">赵本山</a> &#x2F; <a href="https://movie.douban.com/celebrity/1314704/">宋小宝</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355097/">宋晓峰</a> &#x2F; <a href="https://movie.douban.com/celebrity/1351426/">文松</a> &#x2F; <a href="https://movie.douban.com/celebrity/1276009/">程野</a> &#x2F; <a href="javascript:;">更多…</a><br>类型: 剧情 &#x2F; 喜剧 &#x2F; 动作 &#x2F; 武侠 &#x2F; 古装<br>制片国家&#x2F;地区: 中国大陆<br>语言: 汉语普通话<br>首播: 2023-08-18(中国大陆)<br>集数: 40<br>单集片长: 25分钟<br>又名: 象牙门传奇<br>IMDb: tt28658451</p><h2 id="本山归来"><a href="#本山归来" class="headerlink" title="本山归来"></a>本山归来</h2><p>在腾讯视频首页看到了《雀刀门传奇》，当时以为是部电影。看了海报封面有赵本山，回想上次看赵本山的作品已经过去很久了，最熟悉不过的是春晚小品。本是抱着下饭的心态去看的，毕竟单集在20分钟左右，每集都是一个剧情，但每个剧情前后又有些关联。对于看过赵本山春晚的人而言，能够很好的通过这部《雀刀门传奇》勾唤起早年的回忆。</p><p>剧集中出现的演员，对于我而言是有些陌生的。虽然看简介都属于赵家班，但赵家班最有名的还属于东北 F4。看完这剧后，有评论说除了赵本山外，其他演员把平日二人转的形象也带到了电视剧中来了，使角色无法在电视剧中重新塑造形象。这对我而言，就不是什么问题了，因为我正是从这部剧开始熟悉赵家班演员的。</p><p>所以也是抱着满满的期望，去看本山归来的作品。</p><h2 id="情景武侠"><a href="#情景武侠" class="headerlink" title="情景武侠"></a>情景武侠</h2><p>吸引追剧的动力来源与开片的动作打斗场景，对于从小看金庸作品长大的 90 后而言。武侠算是刻在我脑子里的记忆了，曾经还幻想着像武侠里面的人物一样有轻功和各种武功。正如《雀刀门传奇》的名字一样，会让人有一种好奇心，雀刀门和传奇之间有什么关联呢？正是带着这些疑问，也让自己保持着有时间就追更，跟随着剧情的发展，这些疑惑最终得到了解释。</p><p>作为情景剧，要在有限的空间范围内将人员演绎和刻画出来，同时也要保持剧情的起伏，把武侠穿插在剧情当中。</p><p>一是满足了看武侠长大的用户群体，将侠义和家国精神通过剧情衬托了出来。同时在剧中以另外 “身份” 厨师，彰显小家的爱和平凡的伟大。</p><p>二是通过剧情铺垫着后续的发展，将传奇的过程不断铺张开，让人得以明白雀刀门背后的故事。</p><h2 id="拥抱时事"><a href="#拥抱时事" class="headerlink" title="拥抱时事"></a>拥抱时事</h2><p>这部剧很好的结合了时事的热点和趋势，将很多耳熟能详的事件，通过自嘲或无厘头的方式演绎了出来，同时也借机讽刺了当下一些圈层的乱像，让人捧腹大笑之余还能有些思考。</p><p>做为喜剧，能从故事情节让人会心一笑，也能用无厘头方式滑稽得让人大笑。</p><p>做为武侠片，能有家国情怀，师徒关怀，也带儿女私情。</p><p>做为情景剧，故事能够快速演绎，不拖泥带水，场景切换和故事可以相互衔接。</p><h2 id="喜剧收尾"><a href="#喜剧收尾" class="headerlink" title="喜剧收尾"></a>喜剧收尾</h2><p>喜剧的内核是悲剧，《雀刀门传奇》是圆满收尾的，最终惩恶扬善。</p><p>看完这部剧后，记忆仿佛回到了春晚赵本山时刻，欢笑之余又觉得意犹未尽。</p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>观后感</tag>
      
      <tag>国产剧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修复 Ubuntu 下 “门” 或 “复” 字显示错误</title>
    <link href="/blog/2023/09/%E4%BF%AE%E5%A4%8D%20Ubuntu%20%E4%B8%8B%E9%97%A8%E5%92%8C%E5%A4%8D%E5%AD%97%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF.html"/>
    <url>/blog/2023/09/%E4%BF%AE%E5%A4%8D%20Ubuntu%20%E4%B8%8B%E9%97%A8%E5%92%8C%E5%A4%8D%E5%AD%97%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF.html</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用 Ubuntu 系统时，当输入  “门”或“复”字时，显示的文字有些别扭。认为是 Linux 字体原因显示的不正常，后来才发现这是日文汉字，可以通过修改配置文件显示为中文汉字。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Ubuntu 在当前所使用的字体中不包含某个字符时，会按照顺序从一系列候选字体中选择包含字符的字体。候选列表配置文件 ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">/etc/fonts/conf.d/64-language-selector-prefer.conf<br></code></pre></td></tr></table></figure><p> 分为：</p><ul><li>衬线字体</li><li>非衬线字体</li><li>等宽字体</li></ul><p>Ubuntu 在安装了中文语言的情况下将 <a href="https://www.google.com/get/noto">Noto</a> 系列字体添加到字体候选</p><p>例如衬线字体优先度如下：</p><ol><li>Noto Sans CJK JP</li><li>Noto Sans CJK KR</li><li>Noto Sans CJK SC</li><li>Noto Sans CJK TC</li><li>Noto Sans CJK HK</li></ol><p>这样的配置导致日文字体包含的字符以日文字体显示。例如 “门”或“复”字，日文中存在这个汉字所以就会用日文字体显示。</p><p>其他在日文中不存在的汉字，或在 <code>Noto Sanas CJK JP</code> 和 <code>Noto Sans CJK SC</code> 字型相同的汉字则显示正常。</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>修改配置文件 :</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/fonts/conf.d/64-language-selector-prefer.conf<br></code></pre></td></tr></table></figure><p>将中文字体的优先度提高( 带有<code>SC</code>的提到第一位 )：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">fontconfig</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;fonts.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fontconfig</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>sans-serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK TC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK HK<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK JP<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK KR<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Lohit Devanagari<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Serif CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Serif CJK TC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Serif CJK JP<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Serif CJK KR<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Lohit Devanagari<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans Mono CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans Mono CJK TC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans Mono CJK HK<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans Mono CJK JP<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans Mono CJK KR<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fontconfig</span>&gt;</span><br></code></pre></td></tr></table></figure><p>更新字体缓存：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">fc-cache -fv<br></code></pre></td></tr></table></figure><p>执行以下命令检查，如果出现 <code>NotoSansCJK-Regular.ttc: &quot;Noto Sans CJK SC&quot; &quot;Regular&quot;</code> 则表示设置成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">fc-match -s | grep <span class="hljs-string">&#x27;Noto Sans CJK&#x27;</span><br></code></pre></td></tr></table></figure><p>(本文完)</p><p><strong>参考链接：</strong></p><ul><li><a href="https://bediverezero.github.io/ubuntu/2021/06/04/ubunt-fonts.html">Ubuntu 下 “门” 和 “复” 显示错误</a></li><li><a href="https://blog.csdn.net/yi0322/article/details/113699524">Ubuntu Linux ‘门’ ‘复’ 显示不标准</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>字体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《我的家里空无一物》观后感</title>
    <link href="/blog/2023/09/%E3%80%8A%E6%88%91%E7%9A%84%E5%AE%B6%E9%87%8C%E7%A9%BA%E6%97%A0%E4%B8%80%E7%89%A9%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F.html"/>
    <url>/blog/2023/09/%E3%80%8A%E6%88%91%E7%9A%84%E5%AE%B6%E9%87%8C%E7%A9%BA%E6%97%A0%E4%B8%80%E7%89%A9%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F.html</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>导演: <a href="https://movie.douban.com/celebrity/1342375/">新井友香</a><br>编剧: <a href="https://movie.douban.com/subject_search?search_text=%E6%96%B0%E4%BA%95%E5%8F%8B%E9%A6%99">新井友香</a><br>主演: <a href="https://movie.douban.com/celebrity/1274311/">夏帆</a> &#x2F; <a href="https://movie.douban.com/celebrity/1029875/">近藤公园</a> &#x2F; <a href="https://movie.douban.com/celebrity/1344658/">趣里</a> &#x2F; <a href="https://movie.douban.com/subject_search?search_text=%E5%A4%A7%E4%B9%85%E4%BF%9D%E8%81%A1%E7%BE%8E">大久保聡美</a> &#x2F; <a href="https://movie.douban.com/subject_search?search_text=%E9%9D%92%E5%B1%B1%E6%84%9B%E4%BE%9D">青山愛依</a> &#x2F; <a href="javascript:;">更多…</a><br>类型: 剧情 &#x2F; 喜剧<br>制片国家&#x2F;地区: 日本<br>语言: 日语<br>首播: 2016-02-06(日本)<br>集数: 6<br>单集片长: 30分钟<br>又名: 我家啥都没有<br>IMDb: tt5362450</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今年换工作搬家时发现，在整理打包物品时，很多物品虽然伴随着自己，但是使用的频率不高。有些使用频率高的日耗品，由于囤积的数量也增加了搬家时的负担。在之后，开始精简物品，将多余的物品送人或者丢弃。在这次搬家中告知房东不要衣柜，衣柜对我而言实用性不高，反而容易用来囤积物品占用室内空间。由于健身房距离上班的地方远了，除了周末外，其他时间都计划在室内健身了，刚好衣柜的空间可以用做健身区域。</p><p>在观看《我的家里空无一物》前，我先学习了《断舍离》和空间整理相关的书籍和资料，也算是带着理论知识来观看这部断舍离实践剧。</p><h2 id="断舍离"><a href="#断舍离" class="headerlink" title="断舍离"></a>断舍离</h2><p>“断”即不买不需要的东西。</p><p>“舍”即舍弃堆放在家里没用的东西。</p><p>“离”即脱离对物品的欲望。</p><p>接触断舍离，可以追溯到多年前，在当时并没有重视。在一个物欲横流的社会，面对诱惑想要独善其身是需要很高的自律性的。所以最早的时候也是间断性的实践断舍离，直到这次搬家过程中，整理和发现了很多自己平时频率不高的设置是长期没有使用的物品。这让我想到的围棋中的“气”，这些不常使用的物品占据着生活的空间，物品占用的空间越多，自己的“气”就相对越少。所以开始复习断舍离的精髓以及和断舍离相关的实践，在期间发现了《我的家里空无一物》，于是开始追剧，并在观看后学习主角“麻衣”的变态扔东西法则。</p><h2 id="实践空无一物"><a href="#实践空无一物" class="headerlink" title="实践空无一物"></a>实践空无一物</h2><p>麻衣的空无一物，是多年实践的成果，是对早期垃圾屋的反抗。</p><p>我对空无一物的理解也在不断的实践中总结和改进。</p><p>首先是囤积。以前很喜欢囤积日耗品，比如纸巾，洗衣液，洗手液等。觉既然是日耗品，我可以一次性囤积到房租到期日为止，后续我都不需要再次考虑购买了。 并且量贩装购买会相对更便宜一些。后续想这次想法是错误的，囤积日耗品会占用大量的空间，会抢占自身的”气“。同时在使用物品时难免会浪费物品，心想反正囤积了很多，多用一些也没什么问题。</p><p>其次是收纳。我并不喜欢做收纳。即使收纳了，表面上看起来整洁了，在寻找一个物品时也是很困难，经常要翻箱倒柜。除非收纳要配合物品检索，但是为了收纳而收纳本身就是有问题的，现在更多会去考虑我需要这些东西吗？收纳起来后还会去用他们吗？同样只做收纳而不做精简物品同样存在囤积的问题。所以在收纳之前，学习麻衣将家中的物品列为“需要或不需要”，不需要的东西不再收纳，而是送人或者丢弃。</p><p>接着是收藏。比如车票、门票、说明书等。这些东西存留了也不会去翻阅他们，只是偶尔回忆或使用时去查阅。收藏这些东西的初衷是为了回忆，但是拼命留存这些记忆的意思又是什么呢？在想明白后，我把一些实用类的说明书使用电子化存档，然后把曾经收藏的纸质资料都一一丢弃。</p><p>最后是舍得。有舍才有得，为了让自己的物品不断增多，限制物品的数量上限，只有先清理原有的数量才能新增物品。</p><h2 id="方法摘记"><a href="#方法摘记" class="headerlink" title="方法摘记"></a>方法摘记</h2><p>在《我的家里空无一物》提供了很多实用的实践原则和方法。下面是对应的方法和解释。</p><h3 id="一进一出法"><a href="#一进一出法" class="headerlink" title="一进一出法"></a>一进一出法</h3><p>先将家中的一件物品丢掉，再去入手一件新的物品。</p><h3 id="减少收纳盒"><a href="#减少收纳盒" class="headerlink" title="减少收纳盒"></a>减少收纳盒</h3><p>借助加法实现减法的生活实际上是错误的，没有什么物品是必须要放进盒子里才是整洁的。</p><h3 id="避免收藏"><a href="#避免收藏" class="headerlink" title="避免收藏"></a>避免收藏</h3><p>物品藏着而舍不得拿出来用，甚至任凭它们积灰尘、发霉。这才是对它们的不尊重。</p><h3 id="假装购物法"><a href="#假装购物法" class="headerlink" title="假装购物法"></a>假装购物法</h3><p>假装到自己的衣柜购物，你愿意再用原价买这件衣服吗？</p><h3 id="推进式代替法"><a href="#推进式代替法" class="headerlink" title="推进式代替法"></a>推进式代替法</h3><p>赋予东西的第二个使用方法，进而扔掉一个别的东西。比如把自己喜欢的盘子（不舍得扔的东西）代替宠物现在用的碗，但一定要把现在用的那个宠物盘子扔掉，这就是推进式替代法。</p><p>喜欢其实没用，只是白白占用了地方。</p><h3 id="和物品对话"><a href="#和物品对话" class="headerlink" title="和物品对话"></a>和物品对话</h3><p>学会清点物品，与物品进行对话，了解物品是否是自己真正需要的。</p><p>只留下自己最喜欢的东西，并且进行认真保养。</p><p>大多数东西，有了会很好，没有也无妨。</p><p>越是不会收拾的人，应当尽量少的拥有物品。</p><h3 id="同色间距分隔法"><a href="#同色间距分隔法" class="headerlink" title="同色间距分隔法"></a>同色间距分隔法</h3><p>依照物品的颜色，分别按相同间距分开放置。最好分成三种颜色，同时间距相同，不要混入杂色物品。</p><h3 id="一物两用法"><a href="#一物两用法" class="headerlink" title="一物两用法"></a>一物两用法</h3><p>买东西的时候，尽量选择可以一物两用的商品，从而可以节约空间，减少物品。</p><h3 id="隐藏物品法"><a href="#隐藏物品法" class="headerlink" title="隐藏物品法"></a>隐藏物品法</h3><p>东西不知道该不该扔，将物品藏起来放一段时间，确认对物品的需求度，如果在限定的时间内一次也没有想到那个东西，那么说明需求度低，可以扔掉。</p><h3 id="局域限制法"><a href="#局域限制法" class="headerlink" title="局域限制法"></a>局域限制法</h3><p>把东西放在方便使用的地方。共用区域不能放置私人物品，同时要保持物品的整洁，定期确定是否物品的需要性。</p><h3 id="固定位置法"><a href="#固定位置法" class="headerlink" title="固定位置法"></a>固定位置法</h3><p>给家里的东西规定好固定位置，用完后，物归原位，防止再次变乱。</p><h3 id="物品保养法"><a href="#物品保养法" class="headerlink" title="物品保养法"></a>物品保养法</h3><p>通过对旧物品的保养，重新恢复对其的喜爱，从而达到不增加新物品的目的。</p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>观后感</tag>
      
      <tag>日剧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多关键字过滤并多色高亮日志内容脚本</title>
    <link href="/blog/2023/09/%E5%A4%9A%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E5%B9%B6%E5%A4%9A%E8%89%B2%E9%AB%98%E4%BA%AE%E6%97%A5%E5%BF%97%E5%86%85%E5%AE%B9%E8%84%9A%E6%9C%AC.html"/>
    <url>/blog/2023/09/%E5%A4%9A%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E5%B9%B6%E5%A4%9A%E8%89%B2%E9%AB%98%E4%BA%AE%E6%97%A5%E5%BF%97%E5%86%85%E5%AE%B9%E8%84%9A%E6%9C%AC.html</url>
    
    <content type="html"><![CDATA[<h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>在服务器直接通过 <code>tail</code>  命令滚动输出查看日志内容时，会存在以下的问题：</p><ul><li>共用一套测试环境时 ，存在交叉调用的日志内容;</li><li>大多Shell工具搜索只能高亮单个关键字;</li><li>日志内容杂乱，多个关键字需肉眼定位和比对。</li></ul><h2 id="手写脚本"><a href="#手写脚本" class="headerlink" title="手写脚本"></a>手写脚本</h2><p>针对上述的问题，可以通过 <code>grep</code> 的多关键字过滤，加上 <code>perl</code> 对指定关键字输出对应的颜色。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">tail</span> -f /export/log/biz/biz_detail.log | grep -E -B8 -A11 <span class="hljs-string">&#x27;江苏省联社设备反欺诈预测评分\(标准版\)jar 包入参&#x27;</span> --line-buffered | perl -pe <span class="hljs-string">&#x27;s/(江苏省联社设备反欺诈预测评分\(标准版\))|(数据源中文名:设备信用模型分\（换签版\）)|(633004529412624)|(01028898029254162532035)|(&quot;1.0&quot;)|(bj_score)|(label)|(psce_fraud_jsrcu_score)|(ppre_fraud_jsrcu_label)|(0721d10b33c188d8e45c1369a8b3b01de194a4c9862d486c9d27c3a35845118a)|(hash_type)|(response=&#123;tags=&#123;)|(jar 包入参)|(sm3)|(8a67f57383173fb1176492184d16d1a4)|(md5)|(5948f86545d42883837ef15e6aa75c5f82c24c25a1bc5de0109b310877afac6d)|(sha256)/\e[1;31m$1\e[1;31m$2\e[1;31m$3\e[1;31m$4\e[1;31m$5\e[1;34m$6\e[1;35m$7\e[1;34m$8\e[1;35m$9\e\e[1;32m$10\e[1;32m$11\e[1;32m$12\e[1;32m$13\e[1;32m$14\e[1;32m$15\e[1;32m$16\e[1;32m$17\e[1;32m$18\e[1;32m$19\e[1;32m$20\e[0m/g&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意： 空格需要使用反斜线(<code>\</code>)转义</p></blockquote><h3 id="脚本说明"><a href="#脚本说明" class="headerlink" title="脚本说明"></a>脚本说明</h3><p>需要高亮的关键字：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">perl -pe <span class="hljs-string">&#x27;s/(江苏省联社设备反欺诈预测评分\(标准版\))|(数据源中文名:设备信用模型分\（换签版\）)|(633004529412624)|(01028898029254162532035)|(&quot;1.0&quot;)|(bj_score)|(label)|(psce_fraud_jsrcu_score)|(ppre_fraud_jsrcu_label)|(0721d10b33c188d8e45c1369a8b3b01de194a4c9862d486c9d27c3a35845118a)|(hash_type)|(response=&#123;tags=&#123;)|(jar 包入参)|(sm3)|(8a67f57383173fb1176492184d16d1a4)|(md5)|(5948f86545d42883837ef15e6aa75c5f82c24c25a1bc5de0109b310877afac6d)|(sha256)</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：每个括号里的关键字对应下面的$1到$n。</p></blockquote><p>需要高亮的关键字颜色:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">\e[1;31m<span class="hljs-variable">$1</span>\e[1;31m<span class="hljs-variable">$2</span>\e[1;31m<span class="hljs-variable">$3</span>\e[1;31m<span class="hljs-variable">$4</span>\e[1;31m<span class="hljs-variable">$5</span>\e[1;34m<span class="hljs-variable">$6</span>\e[1;35m<span class="hljs-variable">$7</span>\e[1;34m<span class="hljs-variable">$8</span>\e[1;35m<span class="hljs-variable">$9</span>\e\e[1;32m<span class="hljs-variable">$10</span>\e[1;32m<span class="hljs-variable">$11</span>\e[1;32m<span class="hljs-variable">$12</span>\e[1;32m<span class="hljs-variable">$13</span>\e[1;32m<span class="hljs-variable">$14</span>\e[1;32m<span class="hljs-variable">$15</span>\e[1;32m<span class="hljs-variable">$16</span>\e[1;32m<span class="hljs-variable">$17</span>\e[1;32m<span class="hljs-variable">$18</span>\e[1;32m<span class="hljs-variable">$19</span>\e[1;32m<span class="hljs-variable">$20</span>\e[0m/g<br></code></pre></td></tr></table></figure><blockquote><p>注意：$1即匹配关键字的第1个，$2即匹配关键字的第2个，以此类推。$n是根据实际匹配上的顺序定义的。</p></blockquote><p>如果关键字未匹配到，$n的颜色会去匹配第 (n+1) 的关键字。</p><p>在Linux终端中，可以使用ANSI转义序列来设置文本的颜色和样式。下面是一些常用的颜色代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">红色：\e[1;31m<br>绿色：\e[1;32m<br>黄色：\e[1;33m<br>蓝色：\e[1;34m<br>紫色：\e[1;35m<br>青色：\e[1;36m<br>白色：\e[1;37m<br></code></pre></td></tr></table></figure><p>默认颜色（通常是终端默认的前景和背景颜色）：<code>\e[0m</code></p><p>这些颜色代码可以与其他样式代码一起使用，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">粗体：\e[1m<br>斜体：\e[3m<br>下划线：\e[4m<br>反显（文本颜色与背景颜色互换）：\e[7m<br>删除线：\e[9m<br></code></pre></td></tr></table></figure><p>使用这些颜色和样式代码，将它们插入到文本之前，在文本之后添加 <code>\e[0m</code> 来恢复默认设置。</p><p>比如，将文本设置为红色粗体，可以使用以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">\e[1;31m\e[1m这是红色粗体文本\e[0m<br></code></pre></td></tr></table></figure><p>这将使文本以红色粗体显示，并在文本后面添加 <code>\e[0m</code> 以恢复默认设置。</p><h2 id="生成脚本"><a href="#生成脚本" class="headerlink" title="生成脚本"></a>生成脚本</h2><p>上面使用了手动编辑的方式来生成脚本，当修改内容多时容易修改错了，并且高亮颜色值也不容易被记忆住。</p><p>所以可以将脚本需要修改的内容提取出来，通过页面配置，并自动生成可用的过滤高亮脚本。</p><p><img src="/blog/./assets/image-20230903193704427.png" alt="过滤并高亮脚本生成工具"></p><p>上述的页面中，通过将 6 个变量内容提取出来在页面可视化配置：</p><ol><li>日志地址</li><li>过滤关键字</li><li>上色关键字</li><li>颜色配置</li></ol><blockquote><p>每行匹配1个定义的上色关键字，如果不设置颜色默认是白色：\e[1;37m</p></blockquote><ol start="5"><li>显示过滤关键字前面几行</li><li>显示过滤关键字后面几行</li></ol><p>通过页面生成直接能在命令行粘贴使用的脚本，简化了编辑脚本的难度，提高了可用性。体验地址：日志多关键字过滤+高亮脚本生成器<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[日志多关键字过滤+高亮脚本生成器 ](https://maojun.xyz/html/tools/Log_Multi-Keyword_Filtering_Highlighting_Script_Generator.html)">[1]</span></a></sup></p><h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><p>在使用脚本后，日志的内容得到了过滤并对特定关键字使用了多色高亮来区分。</p><p><img src="/blog/./assets/%E5%A4%9A%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E5%B9%B6%E5%A4%9A%E8%89%B2%E9%AB%98%E4%BA%AE%E6%95%88%E6%9E%9C.png" alt="使用效果"></p><p>(本文完)</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://maojun.xyz/html/tools/Log_Multi-Keyword_Filtering_Highlighting_Script_Generator.html">日志多关键字过滤+高亮脚本生成器 </a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
      <tag>Grep</tag>
      
      <tag>Perl</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《风骚律师》观后感</title>
    <link href="/blog/2023/08/%E3%80%8A%E9%A3%8E%E9%AA%9A%E5%BE%8B%E5%B8%88%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F.html"/>
    <url>/blog/2023/08/%E3%80%8A%E9%A3%8E%E9%AA%9A%E5%BE%8B%E5%B8%88%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F.html</url>
    
    <content type="html"><![CDATA[<h2 id="衍生剧"><a href="#衍生剧" class="headerlink" title="衍生剧"></a>衍生剧</h2><p>《风骚律师》作为口碑炸裂的《绝命毒师》衍生剧，自然受到了不少的关注。而我是在 好评榜+美剧 的双关键字索引下找到它的。初看时还没发现这是毒师的衍生聚，直到看评论中的讨论才恍然大悟。</p><p>关注《绝命毒师》应该是在5年前了，追了大约2季左右就忙于其他事停追了。做为一个不怎么追剧的人，今年趁着年初追完了《狂飙》和《三体》，趁着多巴胺的余热，继而在好评榜单上锁定了《风骚律师》。</p><h2 id="风骚何来"><a href="#风骚何来" class="headerlink" title="风骚何来"></a>风骚何来</h2><p>实际上这部剧集应该是叫《绝命律师》，我在追《绝命毒师》的时候听说过这个剧集，当时并没有留意。直到好评榜上出现名字的时候已经叫《风骚律师》了，翻译也很有意思。英文名叫《Better Call Saul》，直译就是《最好打给索尔》。它的名字在看完剧集后会更加容易理解，我对风骚的理解是：</p><h3 id="行为风骚"><a href="#行为风骚" class="headerlink" title="行为风骚"></a>行为风骚</h3><p>行为风骚，在剧集前面的时候介绍了主角吉米的一系列骚操作：</p><ul><li>与好友共同蒙骗路人</li><li>和滑板青年合伙诈骗</li><li>和影视学生拍创意广告</li><li>各种恶作剧和无厘头等</li></ul><h3 id="物品风骚"><a href="#物品风骚" class="headerlink" title="物品风骚"></a>物品风骚</h3><ul><li>想从律所被开除时的五彩穿搭</li><li>衣服、领带、金色马桶</li></ul><h3 id="言语风骚"><a href="#言语风骚" class="headerlink" title="言语风骚"></a>言语风骚</h3><ul><li>伪装背后的言辞</li><li>怂恿人心的欺骗</li></ul><h2 id="黑白律师"><a href="#黑白律师" class="headerlink" title="黑白律师"></a>黑白律师</h2><p>吉米受他哥的影响，自考拿到了律师从业资格证。向往成为一名真正的律师，为那些需要法律帮助的人提供服务。在一开始，他的确是这样的，从他在做白律师前的为敬老院的老人收集证据，到后来的从事老年法咨询等。由白律师向黑律师转向我认为有2个原因：</p><ol><li>始于风骚</li></ol><p>正是应为前面的风骚动作让吉米接触了一些让其<strong>变坏</strong>的因素，比如和滑板请求合伙诈骗时，误打误撞碰上的黑帮势力的奶奶。前面的因引发了后面黑环境带来的果，被动转黑。</p><ol start="2"><li>不被承认</li></ol><p>吉米有一个优秀的哥哥，我认为他是向往成为他哥那样的人的，有自己的小事业，同时受人尊敬和爱戴。但是无奈的是，他哥哥查克认为自己花了那么努力才有的法律事业，吉米仅靠自学就能从事法律行业，其内心是不平衡的。同时用吉米的过去否定了他的现在和未来，为吉米后续的主动转黑做了铺垫。</p><h2 id="压抑与释放"><a href="#压抑与释放" class="headerlink" title="压抑与释放"></a>压抑与释放</h2><p>整观全剧，在查克自杀去世前。吉米内心的幽暗是被压抑住的，他想表现更好，得到查克的认可。虽然多年的习惯让其很难真正让查克满意，但至少维持了一个正常且有正义观念的吉米。直到哥哥去世了，吉米也不需要被谁认可了，他可以做自己了。很多善恶也更多的遵循利益关系，而非正义。伴随的每次得手后的多巴胺释放，得以让风骚操作不断升级，直到后续的黑化。</p><p>在最终季时，吉米凭借自身的经验，本可以将刑期减到7年。但他最终选择了坦白，可能是多年的压抑后，让他在从事黑律师的时候得到了集聚的放纵，直到事发过起逃亡生活。可能是人生的大起大落让其顿悟，也可能是想结束颠沛流离的生活，更可能是为了Kim，想重新让她相信自己依旧是当初的吉米。吉米坦然的说出了一切事实，他可能是在赎罪，想释放并结束过往的一切。</p><h2 id="环境影响"><a href="#环境影响" class="headerlink" title="环境影响"></a>环境影响</h2><p>Kim和吉米都是受环境深刻影响的2个人。正是2人有着相同之处，所以2个的关系发展快速且密切。但正如Kim所说的，并不是吉米影响了她，而是他们两人相互影响着彼此。同时他们也影响了周围的人，不论是查克还是霍华德。</p><p>所以吉米和Kim可以称为同质的人，而不是互补的人。对彼此的问题都没有很好的约束和制止，甚至是合伙密谋一些欺骗的事。所以当查克在世的时候，还能约束下吉米。当吉米和Kim结婚后，两人就将各自内心的幽暗借助彼此放大了。在剧中吉米和Kim看适都有一个不错的结局，至少没有提前领盒饭。但回过头来，他们本可以过得更好，哪怕是普通且充实的生活。可见环境被人的塑造是非常之大，正如 “勿以恶小而为之”。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>《风骚律师》有很多人物的形象塑造和精彩线路，但无疑主角吉米和Kim给我的印象是最深刻的。他们穿插了全剧的情节，从白到黑的过渡，以及由黑转白的历程都让我印象深刻。所以在人生中的十字路口，一定要妥善抉择，真的是一念天堂，一念地狱，比如纳乔是否可以有更好的结局？</p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>观后感</tag>
      
      <tag>美剧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CKA、CKAD、CKS、PCA认证考试总结</title>
    <link href="/blog/2023/08/CKA%E3%80%81CKAD%E3%80%81CKS%E3%80%81PCA%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93.html"/>
    <url>/blog/2023/08/CKA%E3%80%81CKAD%E3%80%81CKS%E3%80%81PCA%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93.html</url>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在去年的 7 月份购买了 Kubernetes 的 CKA、CKAD、CKS 认证套餐，今年 4 月份购买了 Promethus 的认证考试。</p><p>从购买后起有为期一年的预约考试以及一次的补考机会（需在一年有效期内完成补考）。</p><p>备考和考试顺序一致，一次专注备考一门认证，目前所有认证都一次性通过。</p><ol><li>CKA </li><li>CKAD</li><li>CKS</li><li>PCA</li></ol><p>备考主要是熟悉考试的流程和考试大纲，内容均为实操作类型，通过远程桌面连接并做题。在考试前需要对基础知识和命令有个熟练的操作，因为远程操作容易受网络影响，不像在本地操作那么流畅，所以需要非常熟悉基础知识，比如 kubectl、docker、yaml、k8s 架构等。避免紧张造成考试失败。</p><p>考试时 CKA、CKAD、CKS可以选择英文或切换成中文题目，所有题目都是实操题需在终端上完成。</p><p>PCA 目前只有英文题目，所有题目都是选择题。</p><h3 id="CKA"><a href="#CKA" class="headerlink" title="CKA"></a>CKA</h3><p>CKA（系统管理员） 的考试时间为 2 个小时，考试题目在 16 道左右。主要涉及到权限、容器、网络、集群等知识点。考试时是可以查阅且仅能访问 Kubernets 在线文档。建议熟练的使用和查询文档，避免消耗过多的时间。</p><p>总分：100分。</p><p>合格分：66分。</p><p>有效期：3年。</p><p>通过后的证书：</p><p><img src="/blog/./assets/CKA.png" alt="CKA"></p><h3 id="CKAD"><a href="#CKAD" class="headerlink" title="CKAD"></a>CKAD</h3><p>CKA（应用开发者） 的考试时间为 2 个小时，考试题目在 16 道左右。主要涉及到Cronjob、Dockerfile、Pod、Deployment等知识点。同CKA考试，要练习到非常熟练，做到心中有数。</p><p>总分：100分。</p><p>合格分：66分。</p><p>有效期：3年。</p><p>通过后的证书：</p><p><img src="/blog/./assets/CKAD.png" alt="CKAD"></p><h3 id="CKS"><a href="#CKS" class="headerlink" title="CKS"></a>CKS</h3><p>CKS（安全专家） 的考试时间为 2 个小时，考试题目在 16 道左右。主要涉及到安全策略、漏洞扫描、日志审计等知识点。<br>相对与CKA、CKAD，需要掌握更多的知识，需要多练习。也算较难的一个实操考试。</p><p>总分：100分。</p><p>合格分：67分。</p><p>有效期：2年。</p><p>通过后的证书：</p><p><img src="/blog/./assets/CKS.png" alt="CKS"></p><h3 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h3><p>PCA（认证专员） 的考试时间为 90 分钟，考试题目在 60 道左右。主要涉及到安 Prometheus 配置、PromeQL、Exporter等知识点。</p><p>总分：100分。</p><p>合格分：75分。</p><p>有效期：3年。</p><p>通过后的证书：</p><p><img src="/blog/./assets/PCA.png" alt="PCA"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在上面的认证难度中，PCA 属于初级，CKA、CKAD、CKS属于中级。所以只要认证准备，做到多练多理解，通过考试的难度不大。<br>这是一个重实操的考试，就像工作中的问题是不断变化的，需要理论结合实践不断巩固这项技能。<br>正如认证的有效期一样，知识需不断推陈出新和更新迭代。<br>伴随的版本的迭代，对应的技术和知识也要不断同步，以不至于我们当下通过认证学习到的知识会和证书有效期那样变得过时。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生</tag>
      
      <tag>Kubernates</tag>
      
      <tag>Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Highlight This!实操手册</title>
    <link href="/blog/2023/08/Highlight%20This!%E5%AE%9E%E6%93%8D%E6%89%8B%E5%86%8C.html"/>
    <url>/blog/2023/08/Highlight%20This!%E5%AE%9E%E6%93%8D%E6%89%8B%E5%86%8C.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Highlight This！, 在其官网<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Highlight This!](https://highlightthis.net/)">[1]</span></a></sup>的描述是：</p><p>Highlight This 是 Chrome 浏览器和 Firefox 浏览器的一个浏览器扩展，可以在访问页面时高亮显示你选择的单词。你可以设置不同的单词列表，为它们指定颜色，并指定要在哪些网页上突出显示这些单词。</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>可以分为谷歌插件市场在线安装和离线安装两种方式。</p><h3 id="谷歌插件市场"><a href="#谷歌插件市场" class="headerlink" title="谷歌插件市场"></a>谷歌插件市场</h3><p>打开Highlight This！插件市场地址<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Highlight This: finds and marks words](https://chrome.google.com/webstore/detail/highlight-this-finds-and/fgmbnmjmbjenlhbefngfibmjkpbcljaj)">[2]</span></a></sup>，直接点击安装即可。</p><h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><ol><li>借助 Crx 在线下载工具<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[CRX Downloader](https://standaloneinstaller.com/online-tools/crx-downloader)">[3]</span></a></sup>，先插件下载到本地,接着解压到本地目录。</li></ol><p><img src="/blog/./assets/wps1.png" alt="离线拓展包"> </p><ol start="2"><li>打开谷歌浏览器的扩展管理，或者直接在浏览器地址栏输入下面的内容并回车：</li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">chrome://extensions/<br></code></pre></td></tr></table></figure><p>点击右上角启用开发者模式，然后点击加载已解压的，选择之前下载并解压的 Highlight This! 文件夹。看到如下插件加载完成即成功。</p><p><img src="/blog/./assets/wps2.png" alt="加载已解压的插件"> </p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>要让 Highlight This! 发挥出最大的效果，首先要进行配置，推荐根据分组结合颜色的方式来进行划分。</p><p>点击扩展图标，并点击右下角的****+****号来新建列表分组。</p><p><img src="/blog/./assets/wps3.png" alt="创建分组"> </p><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p>选择非同步和标准列表即可。</p><p><img src="/blog/./assets/wps4.png" alt="新建列表"> </p><h3 id="高亮关键字"><a href="#高亮关键字" class="headerlink" title="高亮关键字"></a>高亮关键字</h3><p>配置关键字高亮内容和要校验的规则。</p><p><img src="/blog/./assets/wps5.jpg" alt="高亮关键字配置"></p><p>增加多组关键字高亮配置，当配置完后可以看到如下的效果。</p><p><img src="/blog/./assets/wps7.png" alt="配置效果"> </p><p>当页面显示的内容有匹配到关键字时，页面中的关键字会使用匹配的规则列表来显示。</p><p><img src="/blog/./assets/wps8.png" alt="页面使用效果"> </p><p>（本文完）</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://highlightthis.net/">Highlight This!</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://chrome.google.com/webstore/detail/highlight-this-finds-and/fgmbnmjmbjenlhbefngfibmjkpbcljaj">Highlight This: finds and marks words</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://standaloneinstaller.com/online-tools/crx-downloader">CRX Downloader</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chrome</tag>
      
      <tag>Extension</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 下使用 Rime 和小鹤音形输入法</title>
    <link href="/blog/2023/08/windows%E4%B8%8B%E4%BD%BF%E7%94%A8rime+%E5%B0%8F%E9%B9%A4%E9%9F%B3%E5%BD%A2%E8%BE%93%E5%85%A5%E6%B3%95.html"/>
    <url>/blog/2023/08/windows%E4%B8%8B%E4%BD%BF%E7%94%A8rime+%E5%B0%8F%E9%B9%A4%E9%9F%B3%E5%BD%A2%E8%BE%93%E5%85%A5%E6%B3%95.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Rime, 官网<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[RIME | 中州韻輸入法引擎](https://rime.im/)">[1]</span></a></sup>的介绍只有一句话：聪明的输入法懂我心意。</p><p>相比智能输入法而言，我真心喜欢它这个聪明。你可以每天使用它，但又感觉不到它的存在。</p><p>Rime 最为一个跨平台的输入法，可以让你在不同的终端使用到相同的输入体验。更重要的是它内置了完善的输入方案及支持自定义方案，这些内容都可以离线使用。这意味着你可以控制所有的数据和隐私。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Rime 的下载地址可以在其官网的下载页面<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[下載及安裝 | RIME | 中州韻輸入法引擎](https://rime.im/download/)">[2]</span></a></sup>看到，不过它的安装包是托管在 GitHub上的，对于国内网速不好的用户。可以在其官方复制下载包的地址：</p><p>比如：<a href="https://github.com/rime/weasel/releases/download/0.15.0/weasel-0.15.0.0-installer.exe">https://github.com/rime/weasel/releases/download/0.15.0/weasel-0.15.0.0-installer.exe</a></p><p>然后再其前面拼接：<a href="https://ghproxy.com/">https://ghproxy.com/</a></p><p>完整的地址如下：<a href="https://ghproxy.com/https://github.com/rime/weasel/releases/download/0.15.0/weasel-0.15.0.0-installer.exe">https://ghproxy.com/https://github.com/rime/weasel/releases/download/0.15.0/weasel-0.15.0.0-installer.exe</a></p><p>这样可对 GitHub 上的制品包实现加速下载。     </p><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><p>下载安装包后，Windows 下双击安装包即可打开安装。使用默认配置即可，安装时必须选择一个输入方案，可勾选 <strong>明月拼音-简化字</strong>。</p><p><img src="/blog/./assets/image-20230806173853130.png" alt="image-20230806173853130"></p><p>安装后即可使用简体全拼输入法。</p><h3 id="配置小鹤音形"><a href="#配置小鹤音形" class="headerlink" title="配置小鹤音形"></a>配置小鹤音形</h3><p>在安装完 Rime 后，继续配置小鹤音形输入法。让输入的体验更加快速便捷。在右下角的托盘处右键，在弹出的选项面板中，点击用户文件夹即可打开 Rime 的用户配置文件管理器窗口。</p><p><img src="/blog/./assets/image-20230806174213507.png" alt="image-20230806174213507"></p><p>接着去小鹤双拼的网盘<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[小鹤双拼 & 小鹤音形](http://flypy.ysepan.com/))">[3]</span></a></sup>下载挂接音形码，下载小鹤音形 “鼠须管” for macOS.zip 。</p><p><img src="/blog/./assets/image-20230806175034774.png" alt="image-20230806175034774"></p><blockquote><p>注：小鹤音形只提供了鼠须管 MacOS 下的音形方案。</p></blockquote><p>下载后将压缩包解压，删除 squirrel 的配置文件，这样默认会使用 default.custom.yaml 和 default.yaml 配置文件。将剩余的文件全部拷贝到 Rime 的用户文件夹，如果提示已经存在文件，则点击覆盖。</p><p><img src="/blog/./assets/image-20230806175407772.png" alt="image-20230806175407772"></p><blockquote><p>squirrel 是 MacOS 下的配置文件。</p></blockquote><h3 id="重选方案-重新部署"><a href="#重选方案-重新部署" class="headerlink" title="重选方案 &amp; 重新部署"></a>重选方案 &amp; 重新部署</h3><p>增加小鹤音形的配置文件后，需要重新选择输入方案生效，右键在托盘位置中 Rime ，在菜单选项中点击输入法设定：</p><p><img src="/blog/./assets/image-20230806180002246.png" alt="image-20230806180002246"></p><p>在方案设定中，选中小鹤音形输入方案，其他方案根据需要选择。</p><p><img src="/blog/./assets/image-20230806180101920.png" alt="image-20230806180101920"></p><p>如果修改了 Rime 用户文件夹中的配置文件，需要重新部署 Rime 后生效。右键在托盘位置中 Rime ，在菜单选项中点击重新部署。 </p><p><img src="/blog/./assets/image-20230806175722294.png" alt="image-20230806175722294"></p><p>（本文完）</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://rime.im/">RIME | 中州韻輸入法引擎</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://rime.im/download/">下載及安裝 | RIME | 中州韻輸入法引擎</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://flypy.ysepan.com/">小鹤双拼 &amp; 小鹤音形</a>)<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>输入法</tag>
      
      <tag>Rime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON 数据验证和测试注意项</title>
    <link href="/blog/2023/08/json%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E5%92%8C%E6%B5%8B%E8%AF%95%E6%B3%A8%E6%84%8F%E9%A1%B9.html"/>
    <url>/blog/2023/08/json%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E5%92%8C%E6%B5%8B%E8%AF%95%E6%B3%A8%E6%84%8F%E9%A1%B9.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在接口调用中，JSON 是主流的数据传输交换格式。 JSON 官方对其的介绍内容是：</p><blockquote><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。</p></blockquote><h2 id="JSON数据测试"><a href="#JSON数据测试" class="headerlink" title="JSON数据测试"></a>JSON数据测试</h2><p>JSON 的数据类型包括以下6类：</p><ol><li>对象（Object）：用花括号 <code>&#123;&#125;</code> 表示，表示一组键值对的集合。</li><li>数组（Array）：用方括号 <code>[]</code> 表示，表示一组值的有序集合。</li><li>字符串（String）：用双引号 <code>&quot;&quot;</code> 或单引号 <code>&#39;&#39;</code> 包裹的字符序列。</li><li>数值（Number）：表示数字，可以是整数或浮点数。</li><li>布尔值（Boolean）：表示真或假，只有两个可能的取值：<code>true</code> 或 <code>false</code>。</li><li>空值（null）：表示空值，只有一个取值：<code>null</code>。</li></ol><p>所以，在对 JSON 数据测试时，可以依据 <strong>等价类分析</strong> 和 <strong>边界值分析</strong> 设计测试数据和用例。</p><p>例如,等价类测试数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;string_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;number_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">42</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;boolean_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;null_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;array_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;nested_object_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">123</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>边界值，以 Java 的数据边界值为例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;empty_string_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;large_string_example&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;abcdefghijklmnopqretuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>  <span class="hljs-attr">&quot;max_long_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9223372036854775807</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;min_long_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-9223372036854775808</span> <br>  <span class="hljs-attr">&quot;max_double_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.7976931348623157e+308</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;min_double_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4.9e-324</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;large_array_example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span> <span class="hljs-number">13</span><span class="hljs-punctuation">,</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">15</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：Java 基本数据类型不存在越界，只会溢出。它们取值范围的最大值+1的结果都是它们取值范围的最小值，反之相同。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在对 JSON 数据类型进行分析设计后，还可以针对业务场景进行测试数据设计。比如需求和技术文档中明确了 <strong>foo</strong> 字段是 <strong>Object</strong> 类型，但如果传了 <strong>String</strong> 类型，会有什么异常或兜底逻辑，反之相同。在测试过程中需不断分析使用场景，以便提高系统的 <strong>鲁棒性</strong> 和用户的 <strong>体验性</strong>。</p><blockquote><p>鲁棒是Robust的音译，也就是健壮和强壮的意思。 它也是在异常和危险情况下系统生存的能力。</p></blockquote><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
      <category>业务架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装 Ubuntu 并做相关配置</title>
    <link href="/blog/2023/07/%E5%AE%89%E8%A3%85ubuntu%E5%B9%B6%E5%81%9A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE.html"/>
    <url>/blog/2023/07/%E5%AE%89%E8%A3%85ubuntu%E5%B9%B6%E5%81%9A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE.html</url>
    
    <content type="html"><![CDATA[<h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><p>在不断尝试折腾过以下的Linux桌面系统：</p><ul><li>Deepin</li><li>Centos</li><li>Mint</li><li>Manjaro</li><li>ArchLinux</li><li>Fedora</li><li>Xubuntu</li></ul><p>最终选择 Ubuntu 做为最终的 Linux 桌面归宿。主要看中以下几个方面：</p><ol><li>有商业公司的支撑，笔记本产家对 Ubuntu 相对兼容，软件包大多支持 Ubuntu 系统和 deb 格式，文档资源丰富。</li><li>软件兼容性好，很多软件公司的产品就是在 Ubuntu 系统上开发的，比如 Docker。</li><li>企业服务器大多是 Centos, 桌面使用 Ubuntu 可以更好的互补。</li><li>不想继续折腾了，想以 Ubuntu 做为工作、学习、娱乐的备用机。</li><li>…或许是图个新鲜</li></ol><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="下载系统"><a href="#下载系统" class="headerlink" title="下载系统"></a>下载系统</h3><p>进入 Ubuntu 的官方网站，在下载页面选择桌面版系统下载。快捷链接：<a href="https://ubuntu.com/download/desktop">Ubuntu桌面版</a></p><p>目前最新的长期稳定版本是：Ubuntu 22.04.2 LTS(Jammy Jellyfish ),长期支持截止日期为：2027 年 4 月。</p><h3 id="安装系统-1"><a href="#安装系统-1" class="headerlink" title="安装系统"></a>安装系统</h3><p>首先制作系统启动盘，插入 U 盘后，使用 fdisk 命令查看磁盘分区。注意下面的操作都是在 Linux 上完成的，如果是 Windows 系统，可以使用 refus</p><p> 来刻录系统。快捷链接：<a href="https://rufus.ie/zh/">refus</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo fdisk -l</span><br></code></pre></td></tr></table></figure><p>查看到 U 盘的分区地址后，使用 dd 命令刻录刚下载的系统到 U 盘。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/Downloads/ubuntu-22.04.2-desktop-amd64.iso of=/dev/sda bs=4M</span><br></code></pre></td></tr></table></figure><p>待刻录完后，重启电脑并根据不同的笔记本厂家来通过按键来触发开机引导项，联想 Yoga 笔记本可通过 F12 来进入引导选项。</p><p>选择 U 盘作为引导盘后，等待加载系统并根据系统的提示进行设置。Ubuntu 安装时会检测是否存在系统引导和旧的系统，会给予提示是删除、保留或更新的操作，根据个人需求选择即可。后续的磁盘分区设置都可以采取默认，几乎是一键安装，待系统完成安装重起系统，会提示拔掉引导 U 盘，重新完成后系统就安装完了。</p><h3 id="安装和配置软件"><a href="#安装和配置软件" class="headerlink" title="安装和配置软件"></a>安装和配置软件</h3><p>本着不折腾的原则，系统基本上采用了默认配置和软件，优先从 Ubuntu 自带的软件仓库下载，没有再从软件官网下载对应的安装包。为了符合个人的使用习惯，安装了以下软件并相应的进行配置：</p><ul><li>Microsoft Edge浏览器</li><li>Enpass密码管理</li><li>Typora编辑器</li><li>termius终端</li><li>kate编辑器</li><li>Fcitx5+Rime输入法</li><li>Zetero</li><li>Vim</li><li>…后续会根据使用做适当增减</li></ul><p>软件基本上采用了默认的配置，部分软件是有同步功能的，登入账同步后也无需额外配置。仅对输入法做了相应的配置调整，</p><p>安装完 Fcitx5+Rime 后，自带的输入方案是不带小鹤双拼输入法的，需要自行配置。同时，部分软件不能调用 Fcitx5 输入法，也需要做环境做些配置。</p><h4 id="将-Fcitx5-写入环境变量："><a href="#将-Fcitx5-写入环境变量：" class="headerlink" title="将 Fcitx5 写入环境变量："></a>将 Fcitx5 写入环境变量：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑 /etc/systemd/user.conf，找到DefaultEnvironment这行</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo vim /etc/systemd/user.conf</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">取消注释追加以下内容：</span><br>DefaultEnvironment=XMODIFIERS=&quot;@im=fcitx&quot; XIM=fcitx XIM_PROGRAM=fcitx GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx<br></code></pre></td></tr></table></figure><h4 id="增加小鹤双拼输入法"><a href="#增加小鹤双拼输入法" class="headerlink" title="增加小鹤双拼输入法"></a>增加小鹤双拼输入法</h4><p>下载小鹤双拼在 Linux 下的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆仓库地址</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/maojunxyz/flypy-linux.git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入下载后的目录</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> flypy-linux/rime-data</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将目录下的文件内容都复制到fcitx5的rime目录里，然后重启fcitx5</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> -r  * ~/.local/share/fcitx5/rime</span><br></code></pre></td></tr></table></figure><h3 id="使用系统"><a href="#使用系统" class="headerlink" title="使用系统"></a>使用系统</h3><p>在做完以上的配置后，就能将 Ubuntu做为辅助生产力来使用了。Ubuntu 中不乏自带了一些好用的软件和小游戏:</p><ul><li>Sudoku</li><li>To Do</li></ul><h2 id="归宿"><a href="#归宿" class="headerlink" title="归宿"></a>归宿</h2><p>折腾的最终归宿就是默认配置。Ubuntu 还有很多值得分享的内容，需要在后续的使用中逐渐去发现和探索。</p><p>最终，我将 Ubuntu 作为折腾后的桌面 Linux 归宿了，毕竟年纪大了。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用GitHub Pages 部署 Hexo</title>
    <link href="/blog/2023/07/%E4%BD%BF%E7%94%A8GitHub%20Pages%20%E9%83%A8%E7%BD%B2%20Hexo.html"/>
    <url>/blog/2023/07/%E4%BD%BF%E7%94%A8GitHub%20Pages%20%E9%83%A8%E7%BD%B2%20Hexo.html</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>建立名为 <code>maojunxyz.github.io</code> 的储存库。</li><li>将 Hexo 文件夹中的文件 push 到储存库的默认分支，默认分支通常名为 <code>main</code>。</li></ol><ul><li><p>将 <code>main</code> 分支 push 到 GitHub：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure></li><li><p>默认情况下 <code>public/</code> 不会被上传(也不该被上传)，确保 <code>.gitignore</code> 文件中包含一行 <code>public/</code>。</p></li></ul><ol start="3"><li>使用 <code>node --version</code> 指令检查你电脑上的 Node.js 版本，并记下该版本 (例如：<code>v16.y.z</code>)</li><li>在储存库中前往 <code>Settings &gt; Pages &gt; Source</code>，并将 <code>Source</code> 改为 <code>GitHub Actions</code>。</li></ol><blockquote><p>注意：如果本地已经有了workflow配置文件pages.yml，推送代码到仓库执行actions后，再将 <code>Source</code> 改为 <code>Deploy from a branch</code>，并切换到构建后的<code>gh-pages</code>分支。</p></blockquote><ol start="3"><li>在储存库中建立 <code>.github/workflows/pages.yml</code>，并填入以下内容 (将 20行的版本<code>16</code> 替换为上个步骤中记下的版本)：</li></ol><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">.github/workflows/pages.ymlname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-attribute">on</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">push</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">branches</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main # default branch</span><br><br><span class="hljs-attribute">jobs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">build</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">runs-on</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attribute">steps</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">uses: actions/checkout@v3</span><br>        <span class="hljs-attribute">with</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">token</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br>          <span class="hljs-comment"># If your repository depends on submodule, please see: https://github.com/actions/checkout</span><br>          <span class="hljs-attribute">submodules</span><span class="hljs-punctuation">:</span> <span class="hljs-string">recursive</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: Use Node.js 16.x</span><br>        <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">actions/setup-node@v2</span><br>        <span class="hljs-attribute">with</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">node-version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;16&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: Cache NPM dependencies</span><br>        <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">actions/cache@v2</span><br>        <span class="hljs-attribute">with</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br>          <span class="hljs-attribute">restore-keys</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>            <span class="hljs-attribute">$&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="hljs-attribute">      - name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Install Dependencies</span><br>        <span class="hljs-attribute">run</span><span class="hljs-punctuation">:</span> <span class="hljs-string">npm install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: Build</span><br>        <span class="hljs-attribute">run</span><span class="hljs-punctuation">:</span> <span class="hljs-string">npm run build</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: Upload Pages artifact</span><br>        <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">actions/upload-pages-artifact@v2</span><br>        <span class="hljs-attribute">with</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">./public</span><br>  <span class="hljs-attribute">deploy</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">needs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">build</span><br>    <span class="hljs-attribute">permissions</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">pages</span><span class="hljs-punctuation">:</span> <span class="hljs-string">write</span><br>      <span class="hljs-attribute">id-token</span><span class="hljs-punctuation">:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">github-pages</span><br>      <span class="hljs-attribute">url</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;&#123; steps.deployment.outputs.page_url &#125;&#125;</span><br>    <span class="hljs-attribute">runs-on</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attribute">steps</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: Deploy to GitHub Pages</span><br>        <span class="hljs-attribute">id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deployment</span><br>        <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">actions/deploy-pages@v2</span><br></code></pre></td></tr></table></figure><ol start="6"><li>部署完成后，前往 <code>https://maojunxyz.github.io</code> 查看网站。</li></ol><blockquote><p>CNAME：若你使用了一个带有 <code>CNAME</code> 的自定义域名，你需要在 <code>source/</code> 文件夹中新增 <code>CNAME</code> 文件。</p></blockquote><h2 id="项目页面"><a href="#项目页面" class="headerlink" title="项目页面"></a>项目页面</h2><p>如果你希望网站部署在 <code>maojunxyz.github.io</code> 的子目录中：</p><ol><li>建立名为 <code>blog</code> 的储存库，这样你的博客网址为 <code>maojunxyz.github.io/blog</code>。</li><li>编辑你的 <code>_config.yml</code>，将 <code>url:</code> 更改为 <code>maojunxyz.github.io/blog</code>。</li><li>在储存库中前往 <code>Settings &gt; Pages &gt; Source</code>，并将 <code>Source</code> 改为 <code>GitHub Actions</code>。</li><li>Commit 并 push 到默认分支上。</li><li>部署完成后，前往 <code>https://maojunxyz.github.io/blog</code> 查看网站。</li></ol><h2 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h2><h3 id="创建一个新的文章"><a href="#创建一个新的文章" class="headerlink" title="创建一个新的文章"></a>创建一个新的文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>更新信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>更新信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>更新信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署远程站点"><a href="#部署远程站点" class="headerlink" title="部署远程站点"></a>部署远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>更新信息: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arthas配合Recaf调试服务端代码</title>
    <link href="/blog/2023/03/Arthas%E9%85%8D%E5%90%88Recaf%E8%B0%83%E8%AF%95%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81.html"/>
    <url>/blog/2023/03/Arthas%E9%85%8D%E5%90%88Recaf%E8%B0%83%E8%AF%95%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81.html</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h3><p>从官方网站下载Arthas压缩包，上传到要对应的服务部署服务器上并解压。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 新建arthas目录</span><br><span class="hljs-built_in">mkdir</span> /opt/arthas<br><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> /opt/arthas<br><span class="hljs-comment"># 上传arthas压缩包后，进行解压</span><br>unzip arthas*.zip<br></code></pre></td></tr></table></figure><p>解压后的目录文件：</p><p><img src="/blog/./assets/image-20230924224839416.png" alt="image-20230924224839416"></p><p>到此，  arthas就安装和部署完成了。</p><h3 id="Recaf"><a href="#Recaf" class="headerlink" title="Recaf"></a>Recaf</h3><p>Recaf是一个Jar包字节码查看工具，下载地址 ：<a href="https://github.com/Col-E/Recaf">https://github.com/Col-E/Recaf</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Arthas的功能和使用场景很多，这里以实际应用场景作为演示。</p><h3 id="修改SDK返回内容"><a href="#修改SDK返回内容" class="headerlink" title="修改SDK返回内容"></a>修改SDK返回内容</h3><p>借助 Arthas 可以让字节码修改和热更新变得简单。</p><ul><li>双击打开Recaf，或在命令行执行：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java jar -jar recaf<br></code></pre></td></tr></table></figure><ul><li>在启动的图形界面中，点击菜单栏的 <code>File - Load</code> ，加载需要反编译的 SDK Jar包。</li></ul><p><img src="/blog/./assets/image-20230924224749975.png" alt="image-20230924224749975"></p><ul><li>找到 SDK Jar包文档的方法入口，假设这是我们要注入异常的切入点。</li></ul><p><img src="/blog/./assets/image-20230924224917063.png" alt="image-20230924224917063"></p><p>在字节码查看工具里面找到对应的接口实现和方法，如下图所示：</p><p><img src="/blog/./assets/image-20230924225116497.png" alt="image-20230924225116497"></p><p>后面我们通过在服务器上直接反编译并修改Jar包逻辑，查看热更新字节码。</p><blockquote><p> 注意，在本地先修改后编译，然后上传class文件也是可以的，只是通过服务器操作更直接。</p></blockquote><h3 id="修改Jar包出分"><a href="#修改Jar包出分" class="headerlink" title="修改Jar包出分"></a>修改Jar包出分</h3><p>首先反编译查看Jar包代码，结合文档的方法入口和出入参找到对应的代码块。</p><p><img src="/blog/./assets/image-20230924225242783.png" alt="image-20230924225242783"></p><p>文档中出参是<strong>bj_score</strong>,对应代码的字段是<strong>jsonResult</strong>。</p><p>jsonResult的数据类型是个JSONObject，所以bj_score是JSONObject中的key，只要覆盖bj_score的value就可以修改bj_score的值了。</p><p>以下步骤同模拟<strong>Jar</strong>包异常部分，重复内容已省略。首先修改并覆盖bj_score的值，然后编译和刷新字节码。</p><p><img src="/blog/./assets/image-20230924225341513.png" alt="image-20230924225341513"></p><p>再次请求，就能看到<strong>bj_score</strong>的值已经被修改了。</p><p><img src="/blog/./assets/image-20230924225350121.png" alt="image-20230924225350121"></p><p>根据字节码反编译查看的源码，我们可以就可以直面加工方的Jar包逻辑，从而进行比如Jar包返回的Code码，返回值内容等等，等任何可以通过源码修改的地方，我们得可以轻松修改和模拟场景。</p><h3 id="热更新字节码"><a href="#热更新字节码" class="headerlink" title="热更新字节码"></a>热更新字节码</h3><p>Arthas 可以热更新字节码并生效，无需重启服务。</p><ul><li>启动 Arthas 服务，并进入 <strong>Arthas</strong> 控制台。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入arthas解压后的目录</span><br><span class="hljs-built_in">cd</span> /opt/arthas<br><span class="hljs-comment"># 启动arthas服务</span><br>java -jar arthas-boot.jar<br></code></pre></td></tr></table></figure><ul><li>Arthas会列出当前服务下的java进程，比如我们要测试是的<strong>pudao_biz</strong>服务，就输入1。</li></ul><p><img src="/blog/./assets/image-20230924225642474.png" alt="image-20230924225642474"></p><ul><li>然后会打印以下的内容，比如 Java 的进程和 Arthas 的版本号。</li></ul><p><img src="/blog/./assets/image-20230924225721797.png" alt="image-20230924225721797"></p><ul><li>通过命令反查类的加载器，首先获取Jar包方法入口所在的包名称和类名。复制 package 路径 + class名称，<strong>com.icekredit.rccsdf.service.impl.RccsDeviceFraudServiceImpl</strong>。比如下图：</li></ul><p><img src="/blog/./assets/image-20230924225815199.png" alt="image-20230924225815199"></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 通过类的路径反查类的加载器</span><br>sc -d com.icekredit.rccsdf.service.impl.RccsDeviceFraudServiceImpl |grep classLoaderHash<br></code></pre></td></tr></table></figure><ul><li>拿到类加载器的Hash值，比如下图的就是：<strong>51abf713</strong></li></ul><p><img src="/blog/./assets/image-20230924225908583.png" alt="image-20230924225908583"> </p><ul><li><p>将jar包的的字节码反编译成源码，下面的代码是将class字节码反编译成源码到**&#x2F;tmp&#x2F;RccsDeviceFraudServiceImpl.java**下，注意类名应该保持一致，源</p><p>码以**.java**结尾。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">jad --source-only com.icekredit.rccsdf.service.impl.RccsDeviceFraudServiceImpl &gt; /tmp/RccsDeviceFraudServiceImpl.java<br></code></pre></td></tr></table></figure><ul><li>上面的命令执行完毕后，新建一个服务器窗口，可以在上面查看到刚才反编译出的源码问题。</li></ul><p> <img src="/blog/./assets/image-20230924230006957.png" alt="image-20230924230006957"></p><ul><li>通过vim命令修改源码内容：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /tmp/RccsDeviceFraudServiceImpl.java<br></code></pre></td></tr></table></figure><ul><li>这里以模拟Jar包方法异常为例，在里面写入一个除零异常的代码。</li></ul><p><img src="/blog/./assets/image-20230924230048944.png" alt="image-20230924230048944"></p><p>这样凡是调用Jar包的下面方法时，就会抛出异常。</p><p><img src="/blog/./assets/image-20230924230108625.png" alt="image-20230924230108625"></p><ul><li>切换到<strong>arthas</strong>控制台的窗口，执行以下的命令将源码编译成字节码。（注意替换<strong>51abf713</strong>为实际类加载器hash值。）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mc -c 51abf713 /tmp/RccsDeviceFraudServiceImpl.java -d /tmp/<br></code></pre></td></tr></table></figure><p><img src="/blog/./assets/image-20230924230143233.png" alt="image-20230924230143233"></p><ul><li>再次切换服务器的窗口，获取变异后的class文件路径(&#x2F;tmp是之前编译的路径，RccsDeviceFraudServiceImpl是类名，class是字节码的后缀）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">find /tmp -name RccsDeviceFraudServiceImpl.class<br></code></pre></td></tr></table></figure><p><img src="/blog/./assets/image-20230924230206615.png" alt="image-20230924230206615"></p><ul><li>重新切换回<strong>arthas</strong>控制台窗口，根据类加载器的Hash值（注意替换<strong>51abf713</strong>为实际类加载器hash值）热更新字节码（立即生效，无需重启）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redefine -c 51abf713 /tmp/com/icekredit/rccsdf/service/impl/RccsDeviceFraudServiceImpl.class<br></code></pre></td></tr></table></figure><p><img src="/blog/./assets/image-20230924230252745.png" alt="image-20230924230252745"></p><ul><li>调用接口，Jar包异常场景就覆盖到了。</li></ul><p><img src="/blog/./assets/image-20230924230327452.png" alt="image-20230924230327452"></p><ul><li>Jar包场景验证完毕后，将源码文件里面的除零异常代码行删除，再根据第<strong>8</strong>步骤的顺序往下执行，使用<strong>mc</strong>命令将源码编译成字节码，接着使用<strong>redefine</strong>命令热更新字节码就可以了，更新后服务又恢复正常了。</li></ul><p><img src="/blog/./assets/image-20230924230355671.png" alt="image-20230924230355671"></p><p>(本文完)</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
      <tag>测试工具</tag>
      
      <tag>Arthas</tag>
      
      <tag>Recaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红帽RHCE学习总结</title>
    <link href="/blog/2022/02/%E7%BA%A2%E5%B8%BDRHCE%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html"/>
    <url>/blog/2022/02/%E7%BA%A2%E5%B8%BDRHCE%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html</url>
    
    <content type="html"><![CDATA[<h2 id="考试信息"><a href="#考试信息" class="headerlink" title="考试信息"></a>考试信息</h2><p>考试时间：4小时<br>总分：300分<br>及格分：210  </p><h3 id="安装和配置-Ansible"><a href="#安装和配置-Ansible" class="headerlink" title="安装和配置 Ansible"></a>安装和配置 Ansible</h3><p>按照下方所述，在控制节点 172.25.250.200 上安装和配置 Ansible：<br>安装所需的软件包<br>创建名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;inventory 的静态清单文件，以满足以下要求:</p><ul><li>172.25.250.9 是 dev 主机组的成员</li><li>172.25.250.10 是 test 主机组的成员</li><li>172.25.250.11 和 172.25.250.12 是 prod 主机组的成员</li><li>172.25.250.13 是 balancers 主机组的成员</li><li>prod 组是 webservers 主机组的成员<br>创建名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;ansible.cfg 的配置文件，以满足以下要求：  </li><li>主机清单文件为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;inventory</li><li>playbook 中使用的角色的位置包括 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;roles</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装ansible</span><br>yum -y install ansible<br><span class="hljs-comment"># 创建目录</span><br><span class="hljs-built_in">mkdir</span> /home/greg/ansible/<br><span class="hljs-comment"># 配置清单</span><br>vim /home/greg/ansible/inventory<br>[dev]<br>172.25.250.9<br><br>[<span class="hljs-built_in">test</span>]<br>172.25.250.10<br><br>[prod]<br>172.25.250.11<br>172.25.250.12<br><br>[balancers]<br>172.25.250.13<br><br>[webservers:children]<br>prod<br><span class="hljs-comment"># 创建配置文件</span><br>vim /home/greg/ansible/ansible.cfg<br>[defaults]<br>inventory      =/home/greg/ansible/inventory <br>roles_path    = /home/greg/ansible/roles<br><br>[privilege_escalation]<br>become=True<br>become_method=sudo<br>become_user=root<br>become_ask_pass=False<br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@bastion ansible]<span class="hljs-comment"># ansible-inventory --graph</span><br>@all:<br>  |--@balancers:<br>  |  |--172.25.250.13<br>  |--@dev:<br>  |  |--172.25.250.9<br>  |--@<span class="hljs-built_in">test</span>:<br>  |  |--1782.25.250.10<br>  |--@ungrouped:<br>  |--@webservers:<br>  |  |--@prod:<br>  |  |  |--172.25.250.11<br>  |  |  |--172.25.250.12<br><br></code></pre></td></tr></table></figure><h3 id="创建和运行-Ansible-临时命令"><a href="#创建和运行-Ansible-临时命令" class="headerlink" title="创建和运行 Ansible 临时命令"></a>创建和运行 Ansible 临时命令</h3><p>作为系统管理员，您需要在受管节点上安装软件。<br>请按照正文所述，创建一个名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;adhoc.sh 的 shell 脚本，该脚本将使用Ansible 临时命令在各个受管节点上安装 yum 存储库：</p><p>存储库 1：  </p><ul><li>存储库的名称为 EX294_BASE</li><li>描述为 EX294 base software</li><li>基础 URL 为 <a href="ftp://host.domain8.example.com/dvd/BaseOS">ftp://host.domain8.example.com/dvd/BaseOS</a></li><li>GPG 签名检查为启用状态</li><li>GPG 密钥 URL 为 <a href="ftp://host.domain8.example.com/dvd/RPM-GPG-KEY-redhat-release">ftp://host.domain8.example.com/dvd/RPM-GPG-KEY-redhat-release</a></li><li>存储库为启用状态</li></ul><p>存储库 2：  </p><ul><li>存储库的名称为 EX294_STREAM</li><li>描述为 EX294 stream software</li><li>基础 URL 为 <a href="ftp://host.domain8.example.com/dvd/AppStream">ftp://host.domain8.example.com/dvd/AppStream</a></li><li>GPG 签名检查为启用状态</li><li>GPG 密钥 URL 为 <a href="ftp://host.domain8.example.com/dvd/RPM-GPG-KEY-redhat-release">ftp://host.domain8.example.com/dvd/RPM-GPG-KEY-redhat-release</a></li><li>存储库为启用状态</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 配置脚本</span><br>vim /home/greg/ansible/adhoc.sh<br><span class="hljs-comment">#!/bin/bash</span><br><br>ansible all -m yum_repository -a <span class="hljs-string">&quot;name=EX294_BASE description=&#x27;EX294 base software&#x27; baseurl=ftp://host.domain8.example.com/dvd/BaseOS enabled=yes gpgcheck=yes gpgkey=ftp://host.domain8.example.com/dvd/RPM-GPG-KEY-redhat-release&quot;</span><br><br>ansible all -m yum_repository -a <span class="hljs-string">&quot;name=EX294_STREAM description=&#x27;EX294 stream software&#x27; baseurl=ftp://host.domain8.example.com/dvd/AppStream enabled=yes gpgcheck=yes gpgkey=ftp://host.domain8.example.com/dvd/RPM-GPG-KEY-redhat-release&quot;</span><br><span class="hljs-comment"># 添加可执行权限</span><br><span class="hljs-built_in">chmod</span> +x /home/greg/ansible/adhoc.sh<br><span class="hljs-comment"># 执行(需要进入执行目录，在外面的目录依旧是ansible默认配置）</span><br> /home/greg/ansible/<br> ./adhoc.sh<br></code></pre></td></tr></table></figure><blockquote><p>提示：查询模块：<code>ansible-doc -l |grep yum</code>  查询模块帮助：<code>ansible-doc yum_repository</code></p></blockquote><p>验证：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ansible all -m shell -a <span class="hljs-string">&quot;yum repolist all&quot;</span><br></code></pre></td></tr></table></figure><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><p>创建一个名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;packages.yml 的 playbook :  </p><ul><li>将 php 和 mariadb 软件包安装到 dev、test 和 prod 主机组中的主机上</li><li>将 RPM Development Tools 软件包组安装到 dev 主机组中的主机上</li><li>将 dev 主机组中主机上的所有软件包更新为最新版本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 编辑playbook</span><br>vim /home/greg/ansible/packages.yml<br><br>---<br>- hosts: dev,<span class="hljs-built_in">test</span>,prod<br>  tasks:<br>  - name: install php mariadb<br>    yum: name=php,mariadb state=present<br><br>- hosts: dev<br>  tasks:<br>  - name: rmp grpup<br>    yum: name=<span class="hljs-string">&quot;@RPM Development Tools&quot;</span> state=present<br><br>  - name: upgrade software<br>    yum: name=<span class="hljs-string">&#x27;*&#x27;</span> state=latest<br><br><span class="hljs-comment"># 检查playbook</span><br>ansible-playbook /home/greg/ansible/packages.yml --syntax-check<br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook /home/greg/ansible/packages.yml<br><br></code></pre></td></tr></table></figure><blockquote><p>查看软件包组：<code>yum grouplist</code></p></blockquote><h3 id="使用-RHEL-系统角色"><a href="#使用-RHEL-系统角色" class="headerlink" title="使用 RHEL 系统角色"></a>使用 RHEL 系统角色</h3><p>安装 RHEL 系统角色软件包，并创建符合以下条件的 playbook &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;timesync.yml ：  </p><ul><li>在所有受管节点上运行</li><li>使用 timesync 角色</li><li>配置该角色，以使用当前有效的 NTP 提供商</li><li>配置该角色，以使用时间服务器 172.25.250.250</li><li>配置该角色，以启用 iburst</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#　搜索和安装rhel角色软件包</span><br>yum search *rhel*roles*<br>yum -y install rhel-system-roles.noarch<br><span class="hljs-comment"># 复制角色</span><br><span class="hljs-built_in">cp</span> -r /usr/share/ansible/roles/rhel-system-roles.timesync/ ~/ansible/roles/timesync<br><span class="hljs-comment"># 创建playbook</span><br>vim  /home/greg/ansible/timesync.yml<br><br>--- <br>- hosts: all <br>  vars: <br>   timesync_ntp_servers: <br>   - hostname: 172.25.250.250 <br>     iburst: <span class="hljs-built_in">yes</span> <br>     pool: <span class="hljs-built_in">yes</span> <br>  roles: <br>  - role: timesync <br></code></pre></td></tr></table></figure><blockquote><p>备注：可以使用<code>rpm -ql rhel-system-roles</code>查看安装包的文件。playbook可以从路径复制：<br>&#x2F;usr&#x2F;share&#x2F;doc&#x2F;rhel-system-roles&#x2F;timesync&#x2F;example-timesync-playbook.yml</p></blockquote><p>验证：  </p><p>在任意一台受控节点上查看:  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /etc/chrony.conf<br></code></pre></td></tr></table></figure><h3 id="使用-Ansible-Galaxy-安装角色"><a href="#使用-Ansible-Galaxy-安装角色" class="headerlink" title="使用 Ansible Galaxy 安装角色"></a>使用 Ansible Galaxy 安装角色</h3><p>使用名字为文件 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;roles&#x2F;requirements.yml 下载并安装 Ansible Galaxy 角<br>色。从下列 URL 下载 ：  </p><ul><li><a href="http://host.domain8.example.com/ex300/haproxy.tar.gz">http://host.domain8.example.com/ex300/haproxy.tar.gz</a> 此角色的名称应当为 balancer</li><li><a href="http://host.domain8.example.com/ex300/phpinfo.tar.gz">http://host.domain8.example.com/ex300/phpinfo.tar.gz</a> 此角色的名称应当为 phpinf</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 配置yml文件</span><br>vim /home/greg/ansible/roles/requirements.yml<br><br>- src: http://host.domain8.example.com/ex300/haproxy.tar.gz<br>  name: balancer<br>- src: http://host.domain8.example.com/ex300/phpinfo.tar.gz<br>  name: phpinfo<br>  <br><span class="hljs-comment"># 安装角色</span><br>ansible-galaxy install -r roles/requirements.yml -p roles<br></code></pre></td></tr></table></figure><blockquote><p>r:指定role文件，p:指定roles路径</p></blockquote><h3 id="创建和使用角色"><a href="#创建和使用角色" class="headerlink" title="创建和使用角色"></a>创建和使用角色</h3><p>根据下列要求，在 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;roles 中创建名为 apache 的角色：</p><ul><li>httpd 软件包已安装，设为在系统启动时启用并启动</li><li>防火墙已启用并正在运行，并使用允许访问 Web 服务器的规则</li><li>模板文件为 index.html.j2 ，用于创建具有以下输出的文件 &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html ：<br>Welcome to HOSTNAME on IPADDRESS</li><li>其中，HOSTNAME 是受管节点的完全限定域名，IPADDRESS 则是受管节点的 IP 地址。 </li><li>创建名为 newroles.yml 的 playbook，使用这个角色，对 webservers 组进行操作。</li><li>HOSTNAME 是 FQDN 的完整主机名</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建角色</span><br>ansible-galaxy init roles/apache<br><span class="hljs-comment"># 编辑角色task</span><br>vim roles/apache/tasks/main.yml<br><br>---<br><span class="hljs-comment"># tasks file for apache</span><br>- name: install httpd<br>  yum: name=httpd state=installed<br><br>- name: start httpd<br>  service: name=httpd state=started enabled=<span class="hljs-built_in">yes</span><br><br>- name: start firewalld<br>  service: name=firewalld state=started enabled=<span class="hljs-built_in">yes</span><br><br>- name: open http firewalld<br>  firewalld: service=http immediate=<span class="hljs-built_in">yes</span> permanent=<span class="hljs-built_in">yes</span> state=enabled<br><br>- name: copy jinja2<br>  template: src=index.html.j2 dest=/var/www/html/index.html<br><br><span class="hljs-comment"># 创建模板</span><br>vim roles/apache/templates/index.html.j2<br><br>Welcome to &#123;&#123;ansible_fqdn&#125;&#125; on &#123;&#123;ansible_default_ipv4.address&#125;&#125;<br><br><span class="hljs-comment"># 创建playbook</span><br>vim newroles.yml <br><br>---<br>- hosts: webservers<br>  roles:<br>  - role: apache<br>  <br><span class="hljs-comment"># 使用playbook</span><br>ansible-playbook newroles.yml <br></code></pre></td></tr></table></figure><blockquote><p>变量帮助： <code>ansible dev -m setup | grep fqdn</code>和<code>ansible dev -m setup | grep defaul</code></p></blockquote><p>验证：<br>    登入webserver下的机器，查看var&#x2F;www&#x2F;html&#x2F;index.html。<br>   在控制端curl被控端80端口，有响应和输出内容。</p><h3 id="从-Ansible-Galaxy-使用角色"><a href="#从-Ansible-Galaxy-使用角色" class="headerlink" title="从 Ansible Galaxy 使用角色"></a>从 Ansible Galaxy 使用角色</h3><p>根据下列要求，创建一个名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;roles.yml 的 playbook ：</p><ul><li>playbook 中包含一个 play，该 play 在 balancers 主机组中的主机上运行并将使用 balancer<br>角色。</li><li>此角色配置一项服务，以在 webservers 主机组中的主机之间平衡 Web 服务器请求的负载。</li><li>浏览到 balancers 主机组中的主机（例如 <a href="http://172.25.250.13/">http://172.25.250.13</a> ）将生成以下输出：<br>Welcome to serverc.domain8.example.com on 172.25.250.11</li><li>重新加载浏览器将从另一 Web 服务器生成输出：<br>Welcome to serverd.domain8.example.com on 172.25.250.12</li></ul><p>playbook 中包含一个 play，该 play 在 webservers 主机组中的主机上运行并将使用 phpinfo<br>角色。</p><ul><li>请通过 URL &#x2F;hello.php 浏览到 webservers 主机组中的主机将生成以下输出：<br>Hello PHP World from FQDN</li><li>其中，FQDN 是主机的完全限定名称。<br>Hello PHP World from serverb.lab.example.com</li><li>另外还有 PHP 配置的各种详细信息，如安装的 PHP 版本等。</li><li>同样，浏览到 <a href="http://172.25.250.12/hello.php">http://172.25.250.12/hello.php</a> 会生成以下输出：<br>Hello PHP World from serverc.lab.example.com</li><li>另外还有 PHP 配置的各种详细信息，如安装的 PHP 版本等。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建playbook</span><br>vim  /home/greg/ansible/roles.yml<br><br>---<br>- hosts: all<br><br>- hosts: balancers<br>  roles:<br>  - role: balancer<br><br>- hosts: webservers<br>  roles:<br>  - role: phpinfo<br><br><span class="hljs-comment"># 使用playbook</span><br>ansible-playbook roles.yml<br></code></pre></td></tr></table></figure><p>验证： </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 负载均衡</span><br>curl 172.25.250.1<br><span class="hljs-comment"># 内容验证</span><br>firefox打开<br>http://172.25.250.11/hello.php<br>http://172.25.250.12/hello.php<br></code></pre></td></tr></table></figure><h3 id="创建和使用逻辑"><a href="#创建和使用逻辑" class="headerlink" title="创建和使用逻辑"></a>创建和使用逻辑</h3><p>创建一个名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;lv.yml 的 playbook ，它将在所有受管节点上运行以执行下列任务：<br>创建符合以下要求的逻辑卷：  </p><ul><li>逻辑卷创建在 research 卷组中</li><li>逻辑卷名称为 data</li><li>逻辑卷大小为 1500 MiB</li><li>使用 ext4 文件系统格式化逻辑卷</li><li>如果无法创建请求的逻辑卷大小，应显示错误信息 Could not create logical volume of that<br>size，并且应改为使用大小 800 MiB。</li><li>如果卷组 research 不存在，应显示错误信息 Volume group done not exist。</li><li>不要以任何方式挂载逻辑卷</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建playbook</span><br>vim /home/greg/ansible/lv.yml<br><br>---<br>- hosts: all<br>  tasks:<br>  - name: judge research <span class="hljs-built_in">exit</span><br>    shell: <span class="hljs-string">&quot;vgdisplay research&quot;</span><br>    ignore_errors: <span class="hljs-built_in">yes</span><br>    register: aa<br>  - name: <span class="hljs-keyword">if</span> not <span class="hljs-built_in">exit</span> <span class="hljs-built_in">print</span> err<br>    fail: msg=<span class="hljs-string">&quot;Volume group done not exis&quot;</span><br>    when: aa.rc != 0<br><br>  - name: create lv<br>    block:<br>    - name: create 1500M lv<br>      lvol: vg=research lv=data size=1500M<br>    rescue:<br>    - name: debug 1500 Not create<br>      debug: msg=<span class="hljs-string">&quot;Could not create logical volume of that size&quot;</span><br>    - name: create 800M lv<br>      lvol: vg=research lv=data size=800M<br><br>  - name: mk filesystem ext4<br>    filesystem: dev=/dev/research/data fstype=ext4 force=<span class="hljs-built_in">yes</span><br><br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook lv.yml<br></code></pre></td></tr></table></figure><p>验证：  </p><p>到受控机器上通过<code>vgs</code>和<code>lvscan</code>查看。</p><h3 id="创建并使用磁盘分区"><a href="#创建并使用磁盘分区" class="headerlink" title="创建并使用磁盘分区"></a>创建并使用磁盘分区</h3><p>创建名为 partition.yml 的 playbook，对所有的节点进行操作：  </p><ul><li>在 vdb 上创建一个主分区， 1500MiB</li><li>使用 ext4 文件系统进行格式化</li><li>将文件系统挂载到&#x2F;newpart</li><li>如果分区大小不满足，产生报错信息： could not create partation of that size<br>则创建分区大小变成 800MiB</li><li>如果磁盘不存在，产生报错信息： disk does not exit</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建playbook</span><br>vim /home/greg/ansible/partition.yml<br><br>---<br>- hosts: diskgroup<br>  tasks:<br>  - name: judge vdb exist<br>    shell: <span class="hljs-string">&quot;ls /dev/vdb&quot;</span><br>    ignore_errors: <span class="hljs-built_in">yes</span><br>    register: aa<br><br>  - name: <span class="hljs-keyword">if</span> vbd Not exist <span class="hljs-built_in">print</span> a err info<br>    fail: msg=<span class="hljs-string">&quot;disk does not exist&quot;</span><br>    when: aa.rc != 0<br><br>  - name: create a partitio<br>    block:<br>    - name: create 1500M<br>      parted: device=/dev/vdb number=1 part_end=1500MiM state=present<br>    rescue:<br>    - name: debug 1500M not create<br>      debug: msg=<span class="hljs-string">&quot;could not create partation of that size&quot;</span><br>    - name: create 800M<br>      parted: device=/dev/vdb number=1 part_end=800MiB state=present<br>      <br>    - name: mk a file system<br>      filesystem: dev=/dev/vdb1 fstype=ext4 force=<span class="hljs-built_in">yes</span><br><br>    - name: mount path<br>      mount: src=/dev/vdb1 fstype=ext4 path=/newpart state=mounted<br><br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook  partition.yml<br></code></pre></td></tr></table></figure><p>验证:  </p><p>到受控机器上通过<code>lsblk</code>查看。</p><h3 id="生成主机文件"><a href="#生成主机文件" class="headerlink" title="生成主机文件"></a>生成主机文件</h3><p>将一个初始模板文件从 <a href="http://host.domain8.example.com/ex300/hosts.j2">http://host.domain8.example.com/ex300/hosts.j2</a> 下载到&#x2F;home&#x2F;greg&#x2F;ansible<br>完成该模板，以便用它生成以下文件：针对每个清单主机包含一行内容，其格式与&#x2F;etc&#x2F;hosts 相同。</p><p>创建名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;hosts.yml 的 playbook，它将使用此模板在 dev 主机组中<br>的主机上生成文件 &#x2F;etc&#x2F;myhosts 。</p><p>该 playbook 运行后， dev 主机组中主机上的文件 &#x2F;etc&#x2F;myhosts 应针对每个受管主机包含<br>一行内容：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> localhost localhost.localdomain localhost4 localhost4.localdomain4 ::<span class="hljs-number">1</span> localhost<br>localhost.localdomain localhost6 localhost6.localdomain6<br><span class="hljs-number">172.25.250.9</span> workstation.lab.example.com workstation<br><span class="hljs-number">172.25.250.10</span> servera.lab.example.com servera<br><span class="hljs-number">172.25.250.11</span> serverb.lab.example.com serverb<br><span class="hljs-number">172.25.250.12</span> serverc.lab.example.com serverc<br><span class="hljs-number">172.25.250.13</span> serverd.lab.example.com serverd<br></code></pre></td></tr></table></figure><p>注：清单主机名称的显示顺序不重要</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 完善j2文件</span><br><br>&#123;% <span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> <span class="hljs-built_in">groups</span>[<span class="hljs-string">&#x27;all&#x27;</span>] %&#125;<br>&#123;&#123; hostvars[host][<span class="hljs-string">&#x27;ansible_default_ipv4&#x27;</span>][<span class="hljs-string">&#x27;address&#x27;</span>]&#125;&#125; &#123;&#123; hostvars[host][<span class="hljs-string">&#x27;ansible_fqdn&#x27;</span>] &#125;&#125; &#123;&#123; hostvars[host][<span class="hljs-string">&#x27;ansible_hostname&#x27;</span>] &#125;&#125;<br>&#123;% endfor %&#125;<br><br><span class="hljs-comment"># 创建playbook</span><br>- hosts: all<br><br>- hosts: dev<br>  tasks:<br>  - name: copy a file<br>    template: src=hosts.j2 dest=/etc/myhosts<br>    <br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook hosts.yml<br></code></pre></td></tr></table></figure><p>验证:<br>去受控节点dev上查看<code>/etc/myhosts</code>文件</p><h3 id="修改文件内容"><a href="#修改文件内容" class="headerlink" title="修改文件内容"></a>修改文件内容</h3><p>按照下方所述，创建一个名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;issue.yml 的 playbook ：</p><ul><li>该 playbook 将在所有清单主机上运行</li><li>该 playbook 会将 &#x2F;etc&#x2F;issue 的内容替换为下方所示的一行文本：</li><li>在 dev 主机组中的主机上，这行文本显示 为：Development</li><li>在 test 主机组中的主机上，这行文本显示 为：Test</li><li>在 prod 主机组中的主机上，这行文本显示 为：Productio</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建playbook</span><br>vim /home/greg/ansible/issue.yml<br><br>---<br>- hosts: all<br>  tasks:<br>  - name: dev content<br>    copy: dest=/etc/issue content=<span class="hljs-string">&quot;Development\n&quot;</span><br>    when: inventory_hostname <span class="hljs-keyword">in</span> groups.dev<br><br>  - name: <span class="hljs-built_in">test</span> content<br>    copy: dest=/etc/issue content=<span class="hljs-string">&quot;Test\n&quot;</span><br>    when: inventory_hostname <span class="hljs-keyword">in</span> groups.test<br><br>  - name: prod content<br>    copy: dest=/etc/issue content=<span class="hljs-string">&quot;Production\n&quot;</span><br>    when: inventory_hostname <span class="hljs-keyword">in</span> groups.prod<br>    <br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook issue.yml<br></code></pre></td></tr></table></figure><p>验证:<br>去受控节点dev上查看<code>/etc/issue</code>文件</p><h3 id="创建-Web-内容目录"><a href="#创建-Web-内容目录" class="headerlink" title="创建 Web 内容目录"></a>创建 Web 内容目录</h3><p>按照下方所述，创建一个名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;webcontent.yml 的 playbook ：</p><ul><li>该 playbook 在 dev 主机组中的受管节点上运行</li><li>创建符合下列要求的目录 &#x2F;webdev ：</li><li>所属组为 webdev 组</li><li>具有常规权限：owner&#x3D;read+write+execute ，group&#x3D;read+write+execute，<br>other&#x3D;read+execute</li><li>具有特殊权限：设置组 ID</li><li>用符号链接将 &#x2F;var&#x2F;www&#x2F;html&#x2F;webdev 链接到 &#x2F;webdev</li><li>创建文件 &#x2F;webdev&#x2F;index.html ，其中包含如下所示的单行文件： Development</li><li>在 dev 主机组中主机上浏览此目录（例如 <a href="http://172.25.250.9/webdev/">http://172.25.250.9/webdev/</a> ）将生成以下<br>输出：<br>Development</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建playbook</span><br>vim /home/greg/ansible/webcontent.yml<br><br>---<br>- hosts: dev<br>  roles:<br>  - role: apache<br><br>  tasks:<br>  - name: create a group<br>    group: name=webdev state=present<br>  - name: create a direct<br>    file: path=/webdev/ state=directory mode=2755 group=webdev setype=httpd_sys_content_t<br>  - name: create a <span class="hljs-built_in">link</span><br>    file: src=/webdev dest=/var/www/html/webdev state=<span class="hljs-built_in">link</span><br><br>  - name: create a file<br>    copy: content=<span class="hljs-string">&quot;Development\n&quot;</span> dest=/webdev/index.html setype=httpd_sys_content_t<br><br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook /home/greg/ansible/webcontent.yml<br></code></pre></td></tr></table></figure><blockquote><p>setype可通过<code>ls -Zd /var/www/html</code>查看</p></blockquote><p>验证:  </p><p>执行<code>curl 172.25.250.9/webdev/index.html</code></p><h3 id="生成硬件报告"><a href="#生成硬件报告" class="headerlink" title="生成硬件报告"></a>生成硬件报告</h3><p>创建一个名为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;hwreport.yml 的 playbook ，它将在所有受管节点上生成<br>含有以下信息的输出文件 &#x2F;root&#x2F;hwreport.txt ：</p><ul><li>清单主机名称</li><li>以 MB 表示的总内存大小</li><li>BIOS 版本</li><li>磁盘设备 vda 的大小</li><li>磁盘设备 vdb 的大小</li><li>输出文件中的每一行含有一个 key&#x3D;value 对。<br>您的 playbook 应当：</li><li>从 <a href="http://host/ex300/hwreport.empty">http://host/ex300/hwreport.empty</a> 下载文件，并将它保存为 &#x2F;root&#x2F;hwreport.txt</li><li>使用正确的值改为 &#x2F;root&#x2F;hwreport.txt</li><li>如果硬件项不存在，相关的值应设为 NONE<br>when: ansible_devices.vdb is not define</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建playbook</span><br>vim /home/greg/ansible/hwreport.yml<br><br>---<br>- hosts: all<br>  tasks:<br>  - name: <span class="hljs-built_in">rm</span> file<br>    shell: <span class="hljs-string">&quot;rm -rf /root/hwreport.txt&quot;</span><br><br>  - name: download file<br>    get_url: url=<span class="hljs-string">&quot;http://host/ex300/hwreport.empty&quot;</span> dest=<span class="hljs-string">&quot;/root/hwreport.txt&quot;</span><br><br>  - name: inventory name<br>    lineinfile: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^HOST&quot;</span> line=HOST=&#123;&#123;inventory_hostname&#125;&#125;<br><br>  - name: memory size<br>    lineinfile: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^MEMORY&quot;</span> line=MEMORY=&#123;&#123;ansible_memtotal_mb&#125;&#125;MB<br><br>  - name: bios version<br>    lineinfile: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^BIOS&quot;</span> line=BIOS=&#123;&#123;ansible_bios_version&#125;&#125;<br><br>  - name: vda size<br>    lineinfile: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^DISK_SIZE_VDA&quot;</span> line=DISK_SIZE_VDA=&#123;&#123;ansible_devices.vda.size&#125;&#125;<br><br>  - name: vdb size<br>    block:<br>    - lineinfile: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^DISK_SIZE_VDB&quot;</span> line=DISK_SIZE_VDB=&#123;&#123;ansible_devices.vdb.size&#125;&#125;<br>    rescue:<br>    - lineinfile: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^DISK_SIZE_VDB&quot;</span> line=DISK_SIZE_VDB=NONE<br><br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook hwreport.yml<br></code></pre></td></tr></table></figure><p>方法二： </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建playbook</span><br>vim /home/greg/ansible/hwreport.yml<br><br>---<br>- hosts: all<br>  tasks:<br>  - name: <span class="hljs-built_in">rm</span> file<br>    shell: <span class="hljs-string">&quot;rm -rf /root/hwreport.txt&quot;</span><br><br>  - name: download file<br>    get_url: url=<span class="hljs-string">&quot;http://host/ex300/hwreport.empty&quot;</span> dest=<span class="hljs-string">&quot;/root/hwreport.txt&quot;</span><br><br>  - name: inventory name<br>    replace: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^HOST&quot;</span> replace=<span class="hljs-string">&quot;&#123;&#123;inventory_hostname&#125;&#125;&quot;</span><br><br>  - name: memory size<br>    replace: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^MEMORY&quot;</span> replace=<span class="hljs-string">&quot;&#123;&#123;ansible_memtotal_mb | string&#125;&#125;&quot;</span><br><br>  - name: bios version<br>    replace: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^BIOS&quot;</span> replace=<span class="hljs-string">&quot;&#123;&#123;ansible_bios_version&#125;&#125;&quot;</span><br><br>  - name: vda size<br>    replace: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^DISK_SIZE_VDA&quot;</span> replace=<span class="hljs-string">&quot;&#123;&#123;ansible_devices.vda.size&#125;&#125;&quot;</span><br><br>  - name: vdb size<br>    replace: path=/root/hwreport.txt regexp=<span class="hljs-string">&quot;^DISK_SIZE_VDB&quot;</span> replace=<span class="hljs-string">&quot;&#123;&#123;ansible_devices.vdb.size&#125;&#125; | default(&#x27;NONE&#x27;)&quot;</span><br><br><br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook hwreport.yml<br></code></pre></td></tr></table></figure><p>验证:  </p><p>在被控节点上查看<code>/root/hwreport.txt</code></p><h3 id="创建密码库"><a href="#创建密码库" class="headerlink" title="创建密码库"></a>创建密码库</h3><p>按照下方所述，创建一个 Ansible 库来存储用户密码：</p><ul><li>库名称为 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;locker.yml</li><li>库中含有两个变量，名称如下：</li><li>pw_developer，值为 redhat</li><li>pw_manager，值为 redhat</li><li>用于加密和解密该库的密码为 redhat</li><li>密码存储在文件 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;secret.txt 中</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建locker.yml</span><br>vim  /home/greg/ansible/locker.yml<br><br>pw_developer: redhat<br>pw_manager: redhat<br><br><span class="hljs-comment"># 创建secret.txt</span><br>vim /home/greg/ansible/secret.txt<br>redhat<br><br><span class="hljs-comment"># 加密</span><br>ansible-vault encrypt --vault-id=./secret.txt locker.yml<br></code></pre></td></tr></table></figure><p>验证：  </p><p>查看密码：<code>ansible-vault view --vault-id=./secret.txt locker.yml</code></p><h3 id="创建用户帐户"><a href="#创建用户帐户" class="headerlink" title="创建用户帐户"></a>创建用户帐户</h3><p>从 <a href="http://host/ex300/user_list.yml">http://host/ex300/user_list.yml</a> 下载要创建的用户的列表，并将它保存到&#x2F;home&#x2F;greg&#x2F;ansible。</p><p>在本次考试中使用在其他位置创建的密码库 &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;locker.yml 。创建名为<br>&#x2F;home&#x2F;greg&#x2F;ansible&#x2F;users.yml 的 playbook ，从而按以下所述创建用户帐户：<br>职位描述为 developer 的用户应当：</p><ul><li>在 dev 和 test 主机组中的受管节点上创建</li><li>从 pw_developer 变量分配密码</li><li>是附属组 devops 的成员<br>职位描述为 manager 的用户应当：  </li><li>在 prod 主机组中的受管节点上创建</li><li>从 pw_manager 变量分配密码</li><li>是附属组 opsmgr 的成员</li><li>密码采用 SHA512 哈希格式。</li><li>额外，增加密码过期<br>您的 playbook 应能够在本次考试中使用在其他位置创建的库密码文件<br>&#x2F;home&#x2F;greg&#x2F;ansible&#x2F;secret.txt 正常运行。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载用户列表</span><br>wget  http://host/ex300/user_list.yml<br><span class="hljs-comment"># 创建playbook</span><br><br>---<br>- hosts: dev,<span class="hljs-built_in">test</span><br>  vars_files:<br>  - user_list.yml<br>  - locker.yml<br>  tasks:<br>  - name: create a group<br>    group: name=devops state=present<br>  - name: create a user<br>    user: name=&#123;&#123;item.name&#125;&#125; state=present comment=developer <span class="hljs-built_in">groups</span>=devops password=&#123;&#123;pw_developer | password_hash(<span class="hljs-string">&#x27;sha512&#x27;</span>)&#125;&#125; <br>    when: item.job == <span class="hljs-string">&quot;developer&quot;</span><br>    loop: <span class="hljs-string">&quot;&#123;&#123;users&#125;&#125;&quot;</span><br><br>- hosts: prod<br>  vars_files:<br>  - user_list.yml<br>  - locker.yml<br>  tasks:<br>  - name: create a group<br>    group: name=opsmgr state=present<br>  - name: create a user<br>    user: name=&#123;&#123;item.name&#125;&#125;  state=present comment=manager <span class="hljs-built_in">groups</span>=opsmgr password=&#123;&#123;pw_manager | password_hash(<span class="hljs-string">&#x27;sha512&#x27;</span>)&#125;&#125;<br>    when: item.job == <span class="hljs-string">&quot;manager&quot;</span><br>    loop: <span class="hljs-string">&quot;&#123;&#123;users&#125;&#125;&quot;</span><br>  - name: <span class="hljs-built_in">enable</span> password expires<br>    shell: chage -M <span class="hljs-string">&quot;&#123;&#123;item.passwd_max_expires&#125;&#125;&quot;</span> <span class="hljs-string">&quot;&#123;&#123;item.name&#125;&#125;&quot;</span><br>    when: item.job == <span class="hljs-string">&quot;developer&quot;</span><br>    loop: <span class="hljs-string">&quot;&#123;&#123;users&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook users.yml --vault-id=./secret.txt<br></code></pre></td></tr></table></figure><blockquote><p>enable password expires这步是新加的，可替换成实际过期天数，如30。</p></blockquote><p>验证:  </p><p>在dev,test节点上查看<code>id bob</code>和<code>id fred</code>。<br>验证密码过期:<code>chage -l bob</code>。<br>在prod节点上查看<code>id sally</code>。</p><h3 id="更新-Ansible-库的密钥"><a href="#更新-Ansible-库的密钥" class="headerlink" title="更新 Ansible 库的密钥"></a>更新 Ansible 库的密钥</h3><p>按照下方所述，更新现有 Ansible 库的密钥：<br>从 <a href="http://host/ex300/salaries.yml">http://host/ex300/salaries.yml</a> 下载 Ansible 库到 &#x2F;home&#x2F;greg&#x2F;ansible</p><ul><li>当前的库密码为 111111</li><li>新的库密码为 redhat</li><li>库使用新密码保持加密状态</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载</span><br>wget http://host/ex300/salaries.yml<br><span class="hljs-comment"># 修改密码</span><br>ansible-vault rekey salaries.yml<br></code></pre></td></tr></table></figure><p>验证：<br>使用命令<code>ansible-vault view salaries.yml</code>，然后输出密码。</p><h3 id="selinux"><a href="#selinux" class="headerlink" title="selinux"></a>selinux</h3><p>安装 RHEL 系统角色软件包，并创建符合以下条件的 playbook&#x2F;home&#x2F;greg&#x2F;ansible&#x2F;selinux.yml ：</p><ul><li>在所有受管节点上运行</li><li>使用 selinux 角色</li><li>要求所有的节点上 selinux</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 在 ansible 主机上安装 rhel-system-roles.noarch</span><br>yum install rhel-system-roles.noarch<br><span class="hljs-comment"># 拷贝角色</span><br><span class="hljs-built_in">cp</span> -r /usr/share/ansible/roles/rhel-system-roles.selinux/ ./roles/selinux<br><span class="hljs-comment"># 拷贝playbook</span><br><span class="hljs-built_in">cp</span> /usr/share/doc/rhel-system-roles/selinux/example-selinux-playbook.yml selinux.yml<br><span class="hljs-comment"># 修改playbook</span><br>把 rhel-system-roles.selinux 换成 selinux<br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook selinux.yml<br></code></pre></td></tr></table></figure><p>验证：<br>去受控节点上查询<code>getenforce</code></p><h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><p>创建一个名为 <code>/home/greg/ansible/cron.yml</code> 的 playbook : </p><ul><li>配置 <code>cron</code> 作业，该作业<code>每隔 2 分钟</code>运行并执行以下命令：<br><code>logger &quot;EX200 in progress&quot;</code>，以用户 <code>natasha</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建playbook</span><br>vim /home/greg/ansible/cron.yml<br><br>---<br>- name: create logger<br>  hosts: all<br>  tasks:<br>  - name: create user natasha<br>    user:<br>      name: natasha<br>      state: present<br>  - name: <span class="hljs-string">&quot;logger info for natasha&quot;</span><br>    cron:<br>      name: <span class="hljs-string">&quot;logger info&quot;</span><br>      minute: <span class="hljs-string">&quot;*/2&quot;</span><br>      user: natasha<br>      job: logger <span class="hljs-string">&quot;EX294 in progress&quot;</span><br><br><span class="hljs-comment"># 执行playbook</span><br>ansible-playbook cron.yml<br></code></pre></td></tr></table></figure><p>验证：<br>去受控节点上查询<code>crontab -u natasha -l</code>。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红帽RHCSA学习总结</title>
    <link href="/blog/2022/02/%E7%BA%A2%E5%B8%BDRHCSA%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html"/>
    <url>/blog/2022/02/%E7%BA%A2%E5%B8%BDRHCSA%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html</url>
    
    <content type="html"><![CDATA[<h2 id="考试信息"><a href="#考试信息" class="headerlink" title="考试信息"></a>考试信息</h2><p>考试时间：3小时<br>满分：300分<br>及格分：210分<br>携带物品：身份证，签字笔(考试会发）</p><p>做题注意：<br>如果是服务，都设置下开机启动<code>systemctl enable xxx</code>。 同时设置开启防火墙。 考试是在<code>/etc/selinuxconfig</code>为<strong>enforce</strong>下进行的,使用命令<code>getenforce</code>可查询状态。<br>Linux命令如果不存在，使用<code>yum whatprovides */semanage</code>,semanage可替换成其他命令。在查询结果中找到*.noarch的包，在使用<code>yum install *.noarch -y</code>。<br>所有编写的脚本都设置x执行权限。<br>做完题目后重启机器检查。</p><h2 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h2><ul><li>主机名：node1.domain250.example.com</li></ul><p>查看现在的主机名：<code>hostname</code><br>修改主机名: <code>hostnamectl set-hostname node1.domain250.example.com</code><br>验证主机名：<code>hostname</code></p><blockquote><p><em>此题还可以通过编辑</em><code>*/etc/hostname*</code><em>来配置，需要重启才能生效</em></p></blockquote><ul><li>IP 地址：172.25.250.100</li></ul><p>方法一：<br>查看现在IP地址：<code>ifconfig</code>，记下网卡名称比如:<code>eth0</code><br>修改IP地址:<code>nmtui-edit</code>,删除刚才的网卡名称<code>eth0</code>,再点击<strong>Add</strong>按钮添加一个新的连接，选择<strong>Ethernet</strong>， <strong>Profile name</strong>和<strong>Device</strong>填入对应的网卡名称<code>eth0</code>,再<strong>IPV4 CONFIGURATION</strong>将<strong>Automatic</strong>修改为<strong>Manual</strong>，然后点击<strong>Show</strong>，在<strong>ADddresses</strong>填入<code>172.25.250.100/24</code>,<strong>Gateway</strong>,<strong>DNS servers</strong>依次配置，最后点击<strong>OK</strong>并退出。<br>验证IP地址：<code>ifconfig</code></p><blockquote><p><em>注意新增无需刷新生效，如果是新修改则需要</em><code>*nmcli device reapply eth0*</code><em>刷新生效</em></p></blockquote><p>方法二：<br>查看网络设置信息：<code>nmcli connection show</code><br>设置网络：<code>nmcli connection eth0 ipv4.address 172.25.250.100/24 ipv4.getway 172.25.250.254 ipv4.dns 172.25.250.254 ipv4.method manual</code><br>重启生效:<code>nmcli connection up eth0</code></p><p>方法三：<br>通过vim编辑配置文件 <code>vim /etc/sysconfig/network-scripts/ifcfg-eth0</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">TYPE</span>=Ethernet<br><span class="hljs-attr">PROXY_METHOD</span>=none<br><span class="hljs-attr">BROWSER_ONLY</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">BOOTPROTO</span>=static<br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">172.25</span>.<span class="hljs-number">250.100</span><br><span class="hljs-attr">PREFIX</span>=<span class="hljs-number">24</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">172.25</span>.<span class="hljs-number">250.254</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-number">172.25</span>.<span class="hljs-number">250.254</span><br><span class="hljs-attr">DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV4_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6INIT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_AUTOCONF</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6_ADDR_GEN_MODE</span>=stable-privacy<br><span class="hljs-attr">NAME</span>=eth0<br><span class="hljs-attr">UUID</span>=e5d912ab-<span class="hljs-number">45</span>ae-<span class="hljs-number">4</span>d2d-<span class="hljs-number">85</span>fa-<span class="hljs-number">0</span>ea82150b3bb<br><span class="hljs-attr">DEVICE</span>=eth0<br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><blockquote><p><em>需要刷新网络（考试环境无法刷新）或重启生效</em></p></blockquote><ul><li>子网掩码：255.255.255.0</li></ul><p>无需配置，默认。<br>验证:<code>ifconfig</code></p><ul><li>网关：172.25.250.254</li></ul><p>同IP配置。<br>验证:<code>ifconfig</code></p><ul><li>DNS服务器：172.25.250.254</li></ul><p>同IP配置。<br>验证：<code>netstat -nr</code>或<code>route -n</code>或<code>nslookup node1</code></p><h2 id="配置您的系统以使用默认存储库"><a href="#配置您的系统以使用默认存储库" class="headerlink" title="配置您的系统以使用默认存储库"></a>配置您的系统以使用默认存储库</h2><p>YUM 存储库已可以从 <a href="http://foundation0.ilt.example.com/dvd/BaseOS">http://foundation0.ilt.example.com/dvd/BaseOS</a> 和 <a href="http://foundation0.ilt.example.com/dvd/AppStream">http://foundation0.ilt.example.com/dvd/AppStream</a> 使用配置您的系统，以将这些位置用作默认存储库</p><p>进入<code>/etc/yum.repos.d</code>，任意起名一个文件，以<code>.repo</code>结尾，在文件中增加以下配置内容:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[BaseOS]</span><br><span class="hljs-attr">name</span>=BaseOS<br><span class="hljs-attr">baseurl</span>=http://foundation0.ilt.example.com/dvd/BaseOS<br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span>[AppStream]<br><span class="hljs-attr">name</span>=AppStream<br><span class="hljs-attr">baseurl</span>=http://foundation0.ilt.example.com/dvd/AppStream<br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>检查：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum clean <span class="hljs-keyword">all</span><br>yum repolist <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p>能在命令行输出中看到配置的两个仓库地址即配置成功。</p><blockquote><p><em>可以使用</em><code>*yum list all*</code><em>来校验仓库地址是否有配错</em></p></blockquote><h2 id="调试-SELinux"><a href="#调试-SELinux" class="headerlink" title="调试 SELinux"></a>调试 SELinux</h2><p>非标准端口 82 上运行的 Web 服务器在提供内容时遇到问题。根据需要调试并解决问题，使其满足以下条件：</p><ul><li>系统上的 Web 服务器能够提供 &#x2F;var&#x2F;www&#x2F;html 中所有现有的 HTML 文件（注：不要删除或以其他方式改动现有的文件内容）</li><li>Web 服务器在端口 82 上提供此内容</li><li>Web 服务器在系统启动时自动启动</li></ul><p>82端口启动失败，发现是semanage中并没有加入http的82端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">semanage</span> port -l |grep http<br><span class="hljs-attribute">http_cache_port_t</span>              tcp      <span class="hljs-number">8080</span>, <span class="hljs-number">8118</span>, <span class="hljs-number">8123</span>, <span class="hljs-number">10001</span>-<span class="hljs-number">10010</span><br><span class="hljs-attribute">http_cache_port_t</span>              udp      <span class="hljs-number">3130</span><br><span class="hljs-attribute">http_port_t</span>                    tcp      <span class="hljs-number">80</span>, <span class="hljs-number">81</span>, <span class="hljs-number">443</span>, <span class="hljs-number">488</span>, <span class="hljs-number">8008</span>, <span class="hljs-number">8009</span>, <span class="hljs-number">8443</span>, <span class="hljs-number">9000</span><br><span class="hljs-attribute">pegasus_http_port_t</span>            tcp      <span class="hljs-number">5988</span><br><span class="hljs-attribute">pegasus_https_port_t</span>           tcp      <span class="hljs-number">5989</span><br></code></pre></td></tr></table></figure><p>添加82端口：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">semanage port -<span class="hljs-selector-tag">a</span> -t http_port_t  -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-number">82</span><br></code></pre></td></tr></table></figure><p>如果配置错了，可以使用修改命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">semanage</span> port -m -t http_port_t  -p tcp <span class="hljs-number">82</span><br></code></pre></td></tr></table></figure><blockquote><p><em>semanager可以参考<br>grep semanage &#x2F;etc&#x2F;ssh&#x2F;sshd_config<br>#semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</em></p></blockquote><p>开启访问墙端口放行：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --add-port=82/tcp --permanent</span><br><span class="hljs-comment"># reload</span><br>firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --reload</span><br></code></pre></td></tr></table></figure><blockquote><p><em>查看httpd端口</em><code>*vim /etc/httpd/conf/httpd.conf*</code>*<br>检查httpd服务状态:<em><code>*systemctl status httpd*</code></em><br>启动httpd服务:<em><code>*systemctl start httpd*</code></em><br>重启httpd服务:<em><code>*systemctl restart httpd*</code></em><br>开启启动httpd:*<code>*systemctl enable httpd*</code></p></blockquote><p>验证：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">semanage port -l <span class="hljs-string">|grep http</span><br></code></pre></td></tr></table></figure><p>在http里面查看到82端口即可，同时curl访问文件有返回内容<code>curl 127.0.0.1:82/file</code></p><p>额外的练习： 以下内容考试不需要做:</p><p>查看静态资源文件下的file1文件权限：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">ls -Zd <span class="hljs-keyword">/var/</span>www<span class="hljs-keyword">/html/</span>*<br><span class="hljs-symbol">              system_u:</span>object_r:etc_t:s0 <span class="hljs-keyword">/var/</span>www<span class="hljs-keyword">/html/</span>file1<br><span class="hljs-symbol">system_u:</span>object_r:httpd_sys_content_t:s0 <span class="hljs-keyword">/var/</span>www<span class="hljs-keyword">/html/</span>file2<br><span class="hljs-symbol">system_u:</span>object_r:httpd_sys_content_t:s0 <span class="hljs-keyword">/var/</span>www<span class="hljs-keyword">/html/</span>file3<br></code></pre></td></tr></table></figure><p>修改file1的文件权限同file2和file3:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">semanage fcontext -a -t httpd_sys_content_t <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>file1<br><span class="hljs-comment"># 刷新配置</span><br>restorecon -R -v <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span><br></code></pre></td></tr></table></figure><h2 id="创建用户帐户"><a href="#创建用户帐户" class="headerlink" title="创建用户帐户"></a>创建用户帐户</h2><p>创建下列用户、组和组成员资格：</p><ul><li>名为 sysmgrs 的组</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">groupadd sysmgrs</span><br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> sysmgrs <span class="hljs-regexp">/etc/g</span>roup<br></code></pre></td></tr></table></figure><ul><li>用户 natasha ，作为次要组从属于 sysmgrs</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">useradd -G sysmgrs natasha</span><br></code></pre></td></tr></table></figure><p>验证：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span> natasha<br></code></pre></td></tr></table></figure><ul><li>用户 harry ，作为次要组还从属于 sysmgrs</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">useradd -G sysmgrs harry</span><br></code></pre></td></tr></table></figure><p>验证：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span> harry<br></code></pre></td></tr></table></figure><ul><li>用户 sarah ，无权访问系统上的交互式 shell 且不是 sysmgrs 的成员</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">useradd  sarah -s <span class="hljs-regexp">/sbin/</span>nologin<br></code></pre></td></tr></table></figure><blockquote><p><em>非交互式shell可以是</em><code>*/bin/false*</code><em>或</em><code>*/sbin/nologin*</code></p></blockquote><p>验证：<br>sarah无法使登入ssh或者查看shell: <code>grep sarah /etc/passed</code></p><ul><li>natasha 、 harry 和 sarah 的密码应当都是 flectrag</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> flectrag | passwd <span class="hljs-params">--stdin</span> natasha<br><span class="hljs-keyword">echo</span> flectrag | passwd <span class="hljs-params">--stdin</span> harry<br><span class="hljs-keyword">echo</span> flectrag | passwd <span class="hljs-params">--stdin</span> sarah<br></code></pre></td></tr></table></figure><p>验证：<br>natasha和harry可以使用密码登入ssh</p><h2 id="配置-cron-作业"><a href="#配置-cron-作业" class="headerlink" title="配置 cron 作业"></a>配置 cron 作业</h2><p>配置 cron 作业，该作业每隔 2 分钟运行并执行以下命令:<br>logger “EX200 in progress”，以用户 natasha 身份运行</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">crontab -u natasha -e<br>*<span class="hljs-string">/2</span> * * * * logger <span class="hljs-string">&quot;EX200 in progress&quot;</span><br></code></pre></td></tr></table></figure><p>验证：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">grep</span> EX200 /var/<span class="hljs-built_in">log</span>/<span class="hljs-keyword">messages</span><br></code></pre></td></tr></table></figure><h2 id="创建协作目录"><a href="#创建协作目录" class="headerlink" title="创建协作目录"></a>创建协作目录</h2><p>创建具有以下特征的协作目录 &#x2F;home&#x2F;managers ：</p><ul><li>&#x2F;home&#x2F;managers 的组用权是 sysmgrs</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chgrp</span> sysmgrs /home/managers<br></code></pre></td></tr></table></figure><ul><li>目录应当可被 sysmgrs 的成员读取、写入和访问，但任何其他用户不具这些权限。（当然，root 用户有权访问系统上的所有文件和目录）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> g+rw,o-rw /home/managers<br></code></pre></td></tr></table></figure><ul><li>&#x2F;home&#x2F;managers 中创建的文件自动将组所有权设置到 sysmgrs 组</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> g+s /home/managers<br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -ld /home/managers<br></code></pre></td></tr></table></figure><p>去<code>/home/managers</code>中创建文件，查看文件属性，确认后删除该文件。</p><h2 id="配置-NTP"><a href="#配置-NTP" class="headerlink" title="配置 NTP"></a>配置 NTP</h2><p>配置您的系统，使其成为 materials.example.com 的 NTP 客户端。（注：materials.example.com 是 classroom.example.com 的 DNS 别名）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /etc/chrony.conf<br><span class="hljs-comment"># 添加配置</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>materials.example.com iburst<br><span class="hljs-comment"># 重启服务</span><br>systemctl restart chronyd<br><span class="hljs-comment"># 开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> chronyd<br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">chronyc sources</span><br></code></pre></td></tr></table></figure><h2 id="配置-autofs"><a href="#配置-autofs" class="headerlink" title="配置 autofs"></a>配置 autofs</h2><p>配置 autofs ，以按照如下所述自动挂载远程用户的主目录：</p><ul><li>materials.example.com ( 172.25.254.254 ) NFS 导出 &#x2F;rhome 到您的系统。此文件系统包含为用户 remoteuser1 预配置的主目录</li><li>remoteuser1 的主目录是 materials.example.com:&#x2F;rhome&#x2F;remoteuser1</li><li>remoteuser1 的主目录应自动挂载到本地 &#x2F;rhome 下的 &#x2F;rhome&#x2F;remoteuser1</li><li>主目录必须可供其用户写入</li><li>remoteuser1 的密码是 flectrag</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#新建编辑</span><br>vim /etc/auto.master.d/rhcsa.autofs<br><span class="hljs-comment">#添加以下内容</span><br>/rhome /etc/rhcsa.misc<br><span class="hljs-comment">#新建编辑/etc/rhcsa.misc</span><br>vim /etc/rhcsa.misc<br>remoteuser1     -fstype=nfs,rw    materials.example.com:/rhome/remoteuser1<br></code></pre></td></tr></table></figure><blockquote><p><em>注意&#x2F;rhome&#x2F;remoteuser1 如果有多级目录如&#x2F;rhome&#x2F;b&#x2F;c&#x2F;remoteuser1，则需要在rhcsa.autofs配置多级&#x2F;rhome&#x2F;a&#x2F;b。</em></p></blockquote><p>重启配置：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">systemctl restart <span class="hljs-built_in">auto</span>fs<br></code></pre></td></tr></table></figure><p>开机启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> autofs<br></code></pre></td></tr></table></figure><p>验证：<br><code>su - remoteuser1</code> 或者<code>cd /rhome/remoteuse1</code></p><h2 id="配置-var-tmp-fstab-权限"><a href="#配置-var-tmp-fstab-权限" class="headerlink" title="配置 &#x2F;var&#x2F;tmp&#x2F;fstab 权限"></a>配置 &#x2F;var&#x2F;tmp&#x2F;fstab 权限</h2><p>将文件 &#x2F;etc&#x2F;fstab 复制到 &#x2F;var&#x2F;tmp&#x2F;fstab 。配置 &#x2F;var&#x2F;tmp&#x2F;fstab 的权限以满足如下条件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -a /etc/fstab /var/tmp/fstab<br></code></pre></td></tr></table></figure><ul><li>文件 &#x2F;var&#x2F;tmp&#x2F;fstab 自 root 用户所有<br>无需修改</li><li>文件 &#x2F;var&#x2F;tmp&#x2F;fstab 属于组 root<br>无需修改</li><li>文件 &#x2F;var&#x2F;tmp&#x2F;fstab 应不能被任何人执行<br>无需修改</li><li>用户 natasha 能够读取和写入 &#x2F;var&#x2F;tmp&#x2F;fstab<br><code>setfacl -m u:natasha:rw /var/tmp/fstab</code></li><li>用户 harry 无法写入或读取 &#x2F;var&#x2F;tmp&#x2F;fstab<br><code>setfacl -m u:harry:- /var/tmp/fstab</code></li><li>所有其他用户（当前或未来）能够读取 &#x2F;var&#x2F;tmp&#x2F;fstab<br>无需修改</li></ul><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看文件信息</span><br><span class="hljs-built_in">ls</span> -ld /var/tmp/fstab<br><span class="hljs-comment"># 验证文件权限</span><br>getfacl /var/tmp/fstab<br></code></pre></td></tr></table></figure><blockquote><p><em>查看帮助里面的例子：</em><code>*man setfacl |grep -A8 -i example*</code></p></blockquote><h2 id="配置用户帐号"><a href="#配置用户帐号" class="headerlink" title="配置用户帐号"></a>配置用户帐号</h2><p>配置用户 manalo ，其用户 ID 为 3533。此用户的密码应当为 flectrag。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 创建用户并设置uid</span><br>useradd -u 3533 manalo<br><span class="hljs-comment"># 设置密码</span><br><span class="hljs-keyword">echo</span> flectrag | passwd <span class="hljs-params">--stdin</span> manalo<br></code></pre></td></tr></table></figure><p>验证：</p><p>查看uid:<code>id manalo</code><br>验证密码:<code>ssh manalo @localhost</code></p><p>或者使用远程执行ssh命令验证:<code>ssh manalo@localhost id</code></p><h2 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h2><p>查找当 jacques 所有的所有文件并将其副本放入 &#x2F;root&#x2F;findfiles 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -user jacques -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> -a &#123;&#125; /root/findfiles/ \;<br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /root/findfiles<br></code></pre></td></tr></table></figure><p>找出&#x2F;etc目录下大小超过5MB的文件，并将其副本放入 &#x2F;root&#x2F;findfiles 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find /etc/ -size +5M -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> -a &#123;&#125; /root/findfiles/ \;<br></code></pre></td></tr></table></figure><p>验证:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /root/findfiles<br></code></pre></td></tr></table></figure><h2 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h2><p>查找文件 &#x2F;usr&#x2F;share&#x2F;xml&#x2F;iso-codes&#x2F;iso_639_3.xml 中包含字符串 ng 的所有行。将所有这些行的副本按原始顺序放在文件 &#x2F;root&#x2F;list 中。 &#x2F;root&#x2F;list 不得包含空行，且所有行必须是 &#x2F;usr&#x2F;share&#x2F;xml&#x2F;iso-codes&#x2F;iso_639_3.xml 中原始行的确切副本。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> ng <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/xml/i</span>so-codes<span class="hljs-regexp">/iso_639_3.xml &gt; /</span>root/list<br></code></pre></td></tr></table></figure><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /root/list<br></code></pre></td></tr></table></figure><h2 id="创建存档"><a href="#创建存档" class="headerlink" title="创建存档"></a>创建存档</h2><p>创建一个名为 &#x2F;root&#x2F;backup.tar.gz 的 tar 存档，其应包含 &#x2F;usr&#x2F;local 的 tar 存档，其应包含 &#x2F;usr&#x2F;local 的内容。该 tar 存档必须使用 gzip 进行压缩。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tar -zcvf <span class="hljs-regexp">/root/</span>backup.tar.gz <span class="hljs-regexp">/usr/</span>local<br></code></pre></td></tr></table></figure><p>验证：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 查看文件类型</span><br>file <span class="hljs-regexp">/root/</span>backup.tar.gz<br><span class="hljs-comment"># 查看压缩包内容</span><br>tar -tf <span class="hljs-regexp">/root/</span>backup.tar.gz<br></code></pre></td></tr></table></figure><blockquote><p><em>gzip压缩或bzip2压缩查阅参数</em><code>*man tar |egrep &#39;gzip|bzip2&#39;*</code></p></blockquote><h2 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h2><p>配置sudo提权，允许admins组的成员可以以root身份执行命令，且不需要输入密码。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 复制模板</span><br><span class="hljs-keyword">grep</span> wheel /etc/sudoers &gt; <span class="hljs-regexp">/etc/sud</span>oers.d/admins<br><span class="hljs-comment"># 编辑/etc/sudoers.d/admins内容</span><br>%admins ALL=(ALL)       NOPASSWD: ALL<br></code></pre></td></tr></table></figure><h2 id="密码过期"><a href="#密码过期" class="headerlink" title="密码过期"></a>密码过期</h2><p>设置新建用户的密码20天过期。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 编辑配置文件</span><br><span class="hljs-attribute">vim</span> /etc/login.defs<br><span class="hljs-comment"># 修改密码20天过期</span><br><span class="hljs-attribute">PASS_MAX_DAYS</span>   <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h2 id="配置容器使其自动启动"><a href="#配置容器使其自动启动" class="headerlink" title="配置容器使其自动启动"></a>配置容器使其自动启动</h2><p>利用注册服务器上的 rsyslog 镜像，创建一个名为 logserver 的容器 这两道容器题目需要结合来做，根据步骤来做题。</p><ul><li>面向 wallah 用户，配置一个 systemd 服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 步骤四</span><br><span class="hljs-comment"># 创建systemd 用户目录</span><br><span class="hljs-built_in">mkdir</span> -p ~/.config/systemd/user<br><span class="hljs-comment"># 进入systemd 用户目录</span><br><span class="hljs-built_in">cd</span> .config/systemd/user/<br></code></pre></td></tr></table></figure><ul><li>该服务命名为 container-logserver ，并在系统重启时自动启动，无需干预</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 步骤五</span><br><span class="hljs-comment"># 停止容器服务</span><br>podman <span class="hljs-literal">stop</span> logserver<br><span class="hljs-comment"># 检查 systemd 控制权的状态</span><br>loginctl enable-linger wallah<br>loginctl show-<span class="hljs-keyword">user</span> <span class="hljs-title">wallah</span><br><span class="hljs-comment"># 生成systemd服务</span><br>podman generate systemd -n logserver  -f<br><span class="hljs-comment"># 开机启动</span><br>systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">enable</span> --now container-logserver.service<br><span class="hljs-comment"># 查看状态</span><br>systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">status</span> container-logserver<br></code></pre></td></tr></table></figure><blockquote><p><em>注意题目描述服务命名为 container-logserver，这里创建时不需要额外加container，直接使用logserver创建后会自动加上。</em></p></blockquote><p>验证：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 查看Linger=no是否变为yes</span><br>loginctl show-<span class="hljs-keyword">user</span> <span class="hljs-title">wallah</span><br><span class="hljs-comment"># 查看是否开机启动</span><br>systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">is-enabled</span>  container-logserver.service<br></code></pre></td></tr></table></figure><blockquote><p><em>如果重新生成了systemc服务，并且是同名的。则使用</em><code>*systemctl --user daemon-reload*</code><em>刷新生效</em></p></blockquote><h2 id="为容器配置持久存储"><a href="#为容器配置持久存储" class="headerlink" title="为容器配置持久存储"></a>为容器配置持久存储</h2><p>通过以下方式扩展上一个任务的服务</p><ul><li>配置主机系统的 journald 日志以在系统重启后保留数据，并重新启动日志记录服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 步骤一# 先查看所需要的所有者和所属组</span><br>ll -d /run/log/journal<br><span class="hljs-comment"># 检查目录/var/log/journal 是否存在，没有就创建</span><br><span class="hljs-built_in">mkdir</span> /var/log/journa<br><span class="hljs-comment"># 和/run/log/journal一样的用户和组权限</span><br><span class="hljs-built_in">chown</span> root:systemd-journal /var/log/journal<br><span class="hljs-built_in">chmod</span> 2755 /var/log/journa<br><span class="hljs-comment"># 重启日志记录服务systemctl </span><br>restart systemd-journald<br><span class="hljs-comment"># 设置容器永久化</span><br>vim /etc/systemd/journald.conf<br><span class="hljs-comment"># 将Storage=auto内容修改为Storage=persistent</span><br></code></pre></td></tr></table></figure><ul><li>将主机 &#x2F;var&#x2F;log&#x2F;journal目录下任何以 *.journal 的文件复制到 &#x2F;home&#x2F;wallah&#x2F;container_logfile 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 步骤二</span><br><span class="hljs-comment"># 将日志拷贝到指定目录</span><br><span class="hljs-built_in">cp</span> -a /var/log/journal/*/*.journal /home/wallah/container_logfile/<br><span class="hljs-comment"># 修改文件权限</span><br><span class="hljs-built_in">chown</span> -R wallah /home/wallah/<br><span class="hljs-comment"># 修改wallah密码</span><br><span class="hljs-built_in">echo</span> flectrag | passwd --stdin wallah<br></code></pre></td></tr></table></figure><ul><li>将服务配置为在启动时自动将 &#x2F;home&#x2F;wallah&#x2F;container_logfile 挂载到容器中的 &#x2F;var&#x2F;log&#x2F;journal 下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">步骤三</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ssh到wallah</span><br>ssh wallah @node1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">登入镜像仓库podman login registry.domain250.example.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取镜像podman pull rhel8/rsyslog</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器并挂载目录podman run -d --name logserver -v /home/wallah/container_logfile:/var/log/journal:Zregistry.domain250.example.com/rhel8/rsyslog</span><br></code></pre></td></tr></table></figure><blockquote><p><em>登入时提示错误</em>Error: error authenticating creds for “registry.domain250.example.com”: error pinging docker registry registry.domain250.example.com: Get <a href="https://registry.domain250.example.com/v2/">https://registry.domain250.example.com/v2/</a>: x509: certificate has expired or is not yet valid<em>，解决思路：</em> <code>*man podman login |grep -A8 certificates*</code></p></blockquote><p>验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在容器里执行命令查看日志文件podman <span class="hljs-built_in">exec</span> logserver <span class="hljs-built_in">ls</span> /var/log/journal</span><br></code></pre></td></tr></table></figure><h2 id="设置-root-密码"><a href="#设置-root-密码" class="headerlink" title="设置 root 密码"></a>设置 root 密码</h2><p>将 node2 的 root 密码设置为 flectrag 。您需要获得系统访问权限才能进行此操作。 这道题是在不知道node2密码的前提下设置root密码。</p><p>关机，开机（使用重启时来不及打开控制台就进入系统了）。在第一个选项中输入e，进入编辑模式，在<strong>Linux</strong>开头的那行ctrl+e，进入末尾，空格，输入<code>rd.break</code>,然后按<code>ctrl+x</code>，等待进入<strong>switch_root</strong>终端界面后,在终端输入命令:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount -o remount,rw <span class="hljs-regexp">/sysroot/</span><br>chroot <span class="hljs-regexp">/sysroot/</span><br><span class="hljs-comment"># 修改root密码</span><br>echo flectrag | passwd --stdin root<br>touch /.autorelabel<br><span class="hljs-keyword">exit</span><br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><h2 id="预先创建2G的分区-dev-vdb1-并用于创建卷组testvg"><a href="#预先创建2G的分区-dev-vdb1-并用于创建卷组testvg" class="headerlink" title="预先创建2G的分区&#x2F;dev&#x2F;vdb1,并用于创建卷组testvg"></a>预先创建2G的分区&#x2F;dev&#x2F;vdb1,并用于创建卷组testvg</h2><p>提示: lvm结构 从下到上 pp pv vg lg</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 创建pp</span><br><span class="hljs-comment"># 查看块设备</span><br><span class="hljs-attribute">lsblk</span><br><span class="hljs-comment"># 分区</span><br><span class="hljs-attribute">fdisk</span> /dev/vdb<br><span class="hljs-comment"># 进入fdisk交互界面</span><br><span class="hljs-comment"># 查看分区信息</span><br><span class="hljs-attribute">p</span><br><span class="hljs-comment"># 增加新分区</span><br><span class="hljs-attribute">n</span><br><span class="hljs-comment"># 添加主分区(p）或扩展分区(e)</span><br><span class="hljs-attribute">p</span><br><span class="hljs-comment"># 分区信息，前2个默认即可,直接回车</span><br><span class="hljs-attribute">Partition</span> number (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>, default <span class="hljs-number">1</span>):<br><span class="hljs-attribute">First</span> sector (<span class="hljs-number">2095106</span>-<span class="hljs-number">8388607</span>, default <span class="hljs-number">2097152</span>):<br><span class="hljs-comment"># 设置结束分区大小</span><br><span class="hljs-attribute">Last</span> sector, +sectors or +size&#123;K,M,G,T,P&#125; (<span class="hljs-number">2097152</span>-<span class="hljs-number">8388607</span>, default <span class="hljs-number">8388607</span>): +<span class="hljs-number">2</span>G<br><span class="hljs-comment"># 保存</span><br><span class="hljs-attribute">w</span><br><span class="hljs-comment"># 再次查看块设备</span><br><span class="hljs-attribute">lsblk</span><br><span class="hljs-comment"># 创建pv</span><br><span class="hljs-attribute">pvcreate</span> /dev/vdb1<br><span class="hljs-attribute">Physical</span> volume <span class="hljs-string">&quot;/dev/vdb1&quot;</span> successfully created.<br><span class="hljs-comment">#查看</span><br><span class="hljs-attribute">pvs</span><br><span class="hljs-comment"># 创建vg</span><br><span class="hljs-attribute">vgcreate</span> testvg /dev/vdb1<br><span class="hljs-attribute">Volume</span> group <span class="hljs-string">&quot;testvg&quot;</span> successfully created<br><span class="hljs-comment"># 查看</span><br><span class="hljs-attribute">vgs</span><br></code></pre></td></tr></table></figure><h2 id="创建大小为200M的逻辑卷-dev-testvg-vo-格式化为xfs文件系统，并挂载在-mnt-vo上"><a href="#创建大小为200M的逻辑卷-dev-testvg-vo-格式化为xfs文件系统，并挂载在-mnt-vo上" class="headerlink" title="创建大小为200M的逻辑卷&#x2F;dev&#x2F;testvg&#x2F;vo,格式化为xfs文件系统，并挂载在&#x2F;mnt&#x2F;vo上"></a>创建大小为200M的逻辑卷&#x2F;dev&#x2F;testvg&#x2F;vo,格式化为xfs文件系统，并挂载在&#x2F;mnt&#x2F;vo上</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建lv</span><br>lvcreate -L 200M -n vo testvg<br>Logical volume <span class="hljs-string">&quot;vo&quot;</span> created.<br><span class="hljs-comment"># 查看</span><br>lvs<br><span class="hljs-comment"># 格式化</span><br>mkfs.xfs /dev/testvg/vo<br><span class="hljs-comment">#查看块信息</span><br>blkid<br>/dev/mapper/testvg-vo: UUID=<span class="hljs-string">&quot;61414b60-5003-48ed-94ec-14a6a7d69b67&quot;</span> TYPE=<span class="hljs-string">&quot;xfs&quot;</span><br><span class="hljs-comment"># 永久挂载</span><br>vim /etc/fstab<br><span class="hljs-comment"># 添加以下内容</span><br>dev/mapper/testvg-vo /mnt/vo xfs defaults        0 0<br><span class="hljs-comment"># 刷新挂载</span><br>mount -a<br><span class="hljs-comment"># 查看</span><br><span class="hljs-built_in">df</span> -hT<br></code></pre></td></tr></table></figure><h2 id="设置逻辑卷大小"><a href="#设置逻辑卷大小" class="headerlink" title="设置逻辑卷大小"></a>设置逻辑卷大小</h2><p>将逻辑卷 vo 及其文件系统的大小调整到 230 MiB。确保文件系统内容保持不变。注：分区大小很少与请求的大小完全相同，因此可以接受范围为 217 MiB 到 243 MiB 的大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ext4</span><br><span class="hljs-comment"># 查看volo逻辑卷</span><br><span class="hljs-built_in">df</span> -hT |grep vo<br>/dev/mapper/myvol-vo ext4      175M  1.6M  160M   1% /reports<br><span class="hljs-comment"># 扩展逻辑卷</span><br>lvextend -L 230M /dev/mapper/myvol-vo<br><span class="hljs-comment"># 应用扩展(ext4格式),后面跟随逻辑卷的路径</span><br>resize2fs /dev/mapper/myvol-vo<br><span class="hljs-comment"># 如果是xfs格式</span><br><span class="hljs-comment"># xfs_growfs /reports</span><br><span class="hljs-comment"># xfs</span><br><span class="hljs-built_in">df</span> -hT |grep vo<br>/dev/mapper/testvg-vo xfs       195M   12M  184M   6% /mnt/vo<br>lvextend -L 300M /dev/mapper/testvg-vo<br><span class="hljs-comment"># xfs后面跟随挂载点路径</span><br>xfs_growfs /mnt/vo<br></code></pre></td></tr></table></figure><blockquote><p><em>注意：</em><code>*lvextend -L 230M /dev/mapper/myvol-vo*</code><em>和</em><code>*resize2fs /dev/mapper/myvol-vo*</code><em>可以合并为一步</em><code>*lvextend -L 230M -r /dev/mapper/myvol-vo*</code></p></blockquote><h2 id="添加交换分区"><a href="#添加交换分区" class="headerlink" title="添加交换分区"></a>添加交换分区</h2><p>向您的系统添加一个额外的交换分区 756MiB 。交换分区应在系统启动时自动挂载。不要删除或以任何方式改动系统上的任何现有交换分区。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 做题要先lsblk查看块设备，能在同个块上做的就在同块上做，保留完整的块做后面的题</span><br><span class="hljs-meta"># 查看块设备，找到符合大小的块设备</span><br>lsblk<br>fdisk /dev/vdb<br><span class="hljs-meta"># 新建分区</span><br>n<br><span class="hljs-meta"># 划分分区大小</span><br>Partition <span class="hljs-built_in">number</span> (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>, <span class="hljs-literal">default</span> <span class="hljs-number">3</span>):<br>First sector (<span class="hljs-number">2095106</span><span class="hljs-number">-8388607</span>, <span class="hljs-literal">default</span> <span class="hljs-number">2097152</span>):<br>Last sector, +sectors <span class="hljs-literal">or</span> +size&#123;K,M,G,T,P&#125; (<span class="hljs-number">2097152</span><span class="hljs-number">-8388607</span>, <span class="hljs-literal">default</span> <span class="hljs-number">8388607</span>): +<span class="hljs-number">756</span>M<br><span class="hljs-meta"># 转化分区</span><br>t<br><span class="hljs-meta"># 选择分区3</span><br>Partition <span class="hljs-built_in">number</span> (<span class="hljs-number">1</span><span class="hljs-number">-3</span>, <span class="hljs-literal">default</span> <span class="hljs-number">3</span>): <span class="hljs-number">3</span><br><span class="hljs-meta"># 选择swap(82  Linux swap / So)</span><br><span class="hljs-built_in">Hex</span> code (type L <span class="hljs-keyword">to</span> list all codes): <span class="hljs-number">82</span><br><span class="hljs-meta"># 保存</span><br>w<br>partprobe /dev/vdb<br><span class="hljs-meta"># 格式化分区</span><br>mkswap /dev/vdb3<br><span class="hljs-meta"># 编辑永久挂载</span><br>vim /etc/fstab<br>/dev/vdb3 none swap defaults <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-meta"># 刷新fstab挂载</span><br>swapon -a<br>swapon -s<br></code></pre></td></tr></table></figure><h2 id="创建逻辑卷"><a href="#创建逻辑卷" class="headerlink" title="创建逻辑卷"></a>创建逻辑卷</h2><p>根据如下要求，创建新的逻辑卷：</p><ul><li>逻辑卷取名为 qa ，属于 qagroup 卷组，大小为 60 个扩展块</li><li>qagroup 卷组中逻辑卷的扩展块大小应当为 16 MiB</li><li>使用 ext3 文件系统格式化新逻辑卷。该逻辑卷应在系统启动时自动挂载到 &#x2F;mnt&#x2F;qa 下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk /dev/vdb<br><span class="hljs-comment"># 新建分区</span><br>n<br><span class="hljs-comment"># 划分分区大小</span><br>Selected partition 4<br>First sector (2095106-8388607, default 3645440):<br>Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (3645440-8388607, default 8388607): +1200M<br><span class="hljs-comment"># 转化分区</span><br>t<br><span class="hljs-comment"># 选择分区3</span><br>Partition number (1-3, default 3): 3<br><span class="hljs-comment"># 选择LVM(Linux LVM)</span><br>Hex code (<span class="hljs-built_in">type</span> L to list all codes): 8e<br><span class="hljs-comment"># 保存</span><br>w<br>partprobe /dev/vdb<br><span class="hljs-comment"># 创建物理卷</span><br>pvcreate /dev/vdb4<br><span class="hljs-comment"># 创建卷组</span><br>vgcreate -s 16 qagroup /dev/vdb4<br><span class="hljs-comment"># 创建逻辑卷</span><br>lvcreate -l 60 -n qa qagroup<br><span class="hljs-comment"># 格式化exe3</span><br>mkfs.ext3 /dev/qagroup/qa<br><span class="hljs-comment"># 创建挂载目录</span><br><span class="hljs-built_in">mkdir</span> /mnt/qa<br><span class="hljs-comment"># 配置永久挂载点</span><br>vim /etc/fstab<br>/dev/qagroup/qa /mnt/qa  ext3 defaults 0 0<br><span class="hljs-comment"># 刷新fstab</span><br>mount -a<br></code></pre></td></tr></table></figure><h2 id="创建-VDO-卷"><a href="#创建-VDO-卷" class="headerlink" title="创建 VDO 卷"></a>创建 VDO 卷</h2><p>根据如下要求，创建新的 VDO 卷：</p><ul><li>使用未分区的磁盘</li><li>该卷的名称为 vdough</li><li>该卷的逻辑大小为 50G</li><li>该卷使用 xfs 文件系统格式化</li><li>该卷（在系统启动时）挂载到 &#x2F;vbread 下</li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 搜索vod的包</span><br><span class="hljs-string">yum</span> <span class="hljs-string">list</span> *<span class="hljs-string">vdo</span>*<br><span class="hljs-comment"># 在找到的软件包中安装这2个包名</span><br><span class="hljs-string">yum</span> -<span class="hljs-string">y</span> <span class="hljs-string">install</span> <span class="hljs-string">kmod-kvdo</span>.<span class="hljs-string">x86_64</span>  <span class="hljs-string">vdo</span>.<span class="hljs-string">x86_64</span><br><span class="hljs-comment"># 查看是否有服务了</span><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-unit-files</span> |<span class="hljs-string">grep</span> <span class="hljs-string">vod</span><br><span class="hljs-comment"># 查看服务状态</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">status</span> <span class="hljs-string">vdo</span><br><span class="hljs-comment"># 启动服务</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">start</span> <span class="hljs-string">vdo</span><br><span class="hljs-comment"># 利用帮助找选项</span><br><span class="hljs-string">vdo</span> <span class="hljs-string">create</span> <span class="hljs-built_in">--help</span> |<span class="hljs-string">grep</span> <span class="hljs-string">Size</span><br><span class="hljs-comment"># 根据题目创建vdo</span><br><span class="hljs-string">vdo</span> <span class="hljs-string">create</span> <span class="hljs-built_in">--name=vdough</span> <span class="hljs-built_in">--device=/dev/vdc</span> <span class="hljs-built_in">--vdoLogicalSize=50G</span><br><span class="hljs-comment"># 快速格式化xfs</span><br><span class="hljs-string">mkfs</span>.<span class="hljs-string">xfs</span> -<span class="hljs-string">K</span> /<span class="hljs-string">dev</span>/<span class="hljs-string">mapper</span>/<span class="hljs-string">vdough</span><br><span class="hljs-comment"># 创建挂载目录</span><br><span class="hljs-string">mkdir</span> /<span class="hljs-string">vbread</span><br><span class="hljs-comment"># 配置永久挂载文件</span><br><span class="hljs-string">vim</span> /<span class="hljs-string">etc</span>/<span class="hljs-string">fstab</span><br><span class="hljs-comment"># 如果不配置_netdev或写错了，系统会启动不起来，并进入emergency模式</span><br>/<span class="hljs-string">dev</span>/<span class="hljs-string">mapper</span>/<span class="hljs-string">vdough</span> /<span class="hljs-string">vbread</span>  <span class="hljs-string">xfs</span>  <span class="hljs-string">defaults</span>,<span class="hljs-string">_netdev</span>  <span class="hljs-string">0</span> <span class="hljs-string">0</span><br><span class="hljs-comment"># 刷新fstab</span><br><span class="hljs-string">mount</span> -<span class="hljs-string">a</span><br><span class="hljs-comment"># 查看</span><br><span class="hljs-string">df</span> -<span class="hljs-string">hT</span><br></code></pre></td></tr></table></figure><blockquote><p><em>利用帮助:</em> <code>*man vdo |grep create*</code> <em>和</em><code>*man vdo |grep defaults*</code></p></blockquote><h2 id="配置系统调优"><a href="#配置系统调优" class="headerlink" title="配置系统调优"></a>配置系统调优</h2><p>为您的系统选择建议的 tuned 配置集并将它设为默认设置。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 查看系统推荐的配置</span><br>tuned-adm recommend<br><span class="hljs-keyword">virtual</span>-guest<br><span class="hljs-meta"># 查看目前使用的配置</span><br>tuned-adm active<br>Current active profile: throughput-performance<br><span class="hljs-meta"># 设置推荐的配置</span><br>tuned-adm profile <span class="hljs-keyword">virtual</span>-guest<br><span class="hljs-meta"># 验证修改后的配置</span><br>tuned-adm active<br>Current active profile: <span class="hljs-keyword">virtual</span>-guest<br></code></pre></td></tr></table></figure><h2 id="删除逻辑卷"><a href="#删除逻辑卷" class="headerlink" title="删除逻辑卷"></a>删除逻辑卷</h2><ol><li>卸载文件系统，并删除&#x2F;etc&#x2F;fstab中的记录</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">unmount</span> /dev/vg0/<span class="hljs-number">1</span>v01<br></code></pre></td></tr></table></figure><ol><li>删除逻辑卷</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lvremove</span> /dev/vg0/<span class="hljs-number">1</span>v01<br></code></pre></td></tr></table></figure><ol><li>删除卷组</li></ol><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">vgremove v<span class="hljs-name">g0</span><br></code></pre></td></tr></table></figure><ol><li>删除物理卷</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pvremove <span class="hljs-regexp">/dev/</span>sdb1 <span class="hljs-regexp">/dev/</span>db2<br></code></pre></td></tr></table></figure><h2 id="查找拷贝"><a href="#查找拷贝" class="headerlink" title="查找拷贝"></a>查找拷贝</h2><p>在&#x2F;usr&#x2F;bin 目录下创建一个 repwis 脚本，查找&#x2F;usr 目录大小范围在 10–50K 之间并且组 id 不为 root 的文件且拥有 sgid 的文件，把查到的文件结果拷贝到&#x2F;root&#x2F;myfiles文件夹内。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#/bin/bash</span><br><span class="hljs-keyword">if</span> [ ! -d /root/myfiles ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">mkdir</span> /root/myfiles<br><span class="hljs-keyword">fi</span><br>find /usr -<span class="hljs-built_in">type</span> f -a \( -size +10k -size -50k \) -a \( ! -group root \) -a \( -perm /2000 \) -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> -a &#123;&#125; /root/myfiles \;<br></code></pre></td></tr></table></figure><h2 id="欢迎语"><a href="#欢迎语" class="headerlink" title="欢迎语"></a>欢迎语</h2><p>登录到普通用户后提示一句欢迎语’hello word !’或者用户在登陆前显示欢迎语提示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置登入后的欢迎语（登入系统输入账号后）</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;hello word !&#x27;</span> &gt;&gt; /etc/motd<br><span class="hljs-comment"># 配置登入前的欢迎语（登入系统输入账号前）</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;hello word !&#x27;</span> &gt;&gt; /etc/issue<br></code></pre></td></tr></table></figure><h2 id="查找文件-1"><a href="#查找文件-1" class="headerlink" title="查找文件"></a>查找文件</h2><p>在&#x2F;usr&#x2F;bin 目录下创建一个 repwis 脚本，查找&#x2F;usr&#x2F;目录下小于 10M 并且组 id 不为 root 的文 件，把查找到的文件放在&#x2F;root&#x2F;myfiles 文件夹内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find /usr -<span class="hljs-built_in">type</span> f -a  \( -size -10M \) -a \( ! -group root \)  -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> -a &#123;&#125; /root/myfiles \;<br></code></pre></td></tr></table></figure><h2 id="查找文件-2"><a href="#查找文件-2" class="headerlink" title="查找文件"></a>查找文件</h2><p>在&#x2F;usr&#x2F;bin 目录下创建一个 repwis 脚本，查找&#x2F;usr&#x2F; 具有粘贴位是 4（u 的位置上有 s 位）， 其他 ugo 是什么权限， 不管。且组 id 不为 root 的文件，把查找到的文件放在&#x2F;root&#x2F;myfiles文件夹内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find /usr -<span class="hljs-built_in">type</span> f -a \( -perm /4000 \) -a \( ! -group root  \) -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> -a &#123;&#125; /root/myfiles \;<br></code></pre></td></tr></table></figure><h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><p>对 diff 用户设置默认权限：</p><ul><li>用户新创建的文件权限都为：444 r — r — r —</li><li>同一个用户下新创建的目录权限为：554 dr-xr-xr —</li></ul><p>如果既要求了文件的默认权限 xxx，也要求了目录的默认权限 yyy。<br>则 umask 的值以目录来算，即 umask&#x3D;777-yyy，不用管文件。<br>比如目录的默认权限为 554，文件的默认权限为 444。<br>则 umask 可以设置为 777–554&#x3D;223，不用管文件的默认权限了。<br>如果题目只要求设置文件的默认权限 xxx，并没有说目录的默认权限是什么。<br>则 umask&#x3D;666-xxx<br>算出来 umask 值为 zzz 之后。<br>用户 vim ~用户&#x2F;.bash_profile，添加 umask zzz 这里 zzz 是你算出来的数字。</p><h2 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h2><p>在节点上使用 bob 用户写一个脚本 rhcsa，然后执行 rhcsa,执行后输出<strong>it is ok</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 查看用户的环境变量</span><br>echo <span class="hljs-variable">$PATH</span><br><span class="hljs-regexp">/home/</span>bob<span class="hljs-regexp">/.local/</span>bin:<span class="hljs-regexp">/home/</span>bob<span class="hljs-regexp">/bin:/u</span>sr<span class="hljs-regexp">/local/</span>bin:<span class="hljs-regexp">/usr/</span>bin:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin:/u</span>sr/sbin<br>mkdir <span class="hljs-regexp">/home/</span>bob/bin<br><span class="hljs-comment"># 编辑脚本</span><br>vim <span class="hljs-regexp">/home/</span>bob<span class="hljs-regexp">/bin/</span>rhcsa<br><span class="hljs-comment">#/bin/bash</span><br>echo <span class="hljs-string">&quot;it is ok&quot;</span><br><span class="hljs-comment"># 设置可执行权限</span><br>chmod +x <span class="hljs-regexp">/home/</span>bob<span class="hljs-regexp">/bin/</span>rhcsa<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>podman</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bug报告写作指南</title>
    <link href="/blog/2021/10/Bug%E6%8A%A5%E5%91%8A%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97.html"/>
    <url>/blog/2021/10/Bug%E6%8A%A5%E5%91%8A%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此翻译参考了网络中现有的中文翻译，在此基础上做了些语义调整，同时在原先中文的基础上增加了部分新增的英文内容。</p><p>原文使用的是 Bugzilla 这个 Bug 追踪工具，你可以将其代替成你所使用的缺陷管理软件或系统。</p><h2 id="为什么你要读这份指南"><a href="#为什么你要读这份指南" class="headerlink" title="为什么你要读这份指南"></a>为什么你要读这份指南</h2><p>简单地说，如果你报告 Bug 越有效, 工程师完全修复它的可能性就越大。<br>这份 Bug 写作指南是针对新手在书写有效的 Bug 报告方面进行指导的常规指南，并非每个建议都正好适用于你的软件项目。</p><h2 id="如何写一份有用的-Bug-报告"><a href="#如何写一份有用的-Bug-报告" class="headerlink" title="如何写一份有用的 Bug 报告"></a>如何写一份有用的 Bug 报告</h2><p>有用的 Bug 报告是用于正确修复 Bug 的。因此一份有用的 Bug 报告通常的有两个特征：</p><ol><li><strong>可复现</strong>：如果工程师不能复现或最终证明这一 Bug 存在,工程师或许会将它标记为 “我这没问题（WORKSFORME）”或 ”无效反馈（INVALID ）“，并且继续进行下一个 Bug 的修复工作。任何你能提供的详尽描述将为工程师修复 Bug 提供帮助。</li><li><strong>详细精确</strong>：如果工程师能越早隔离、定位问题，就越可能方便地修复。（如果程序员或测试人员不得不像破译密码一般去寻找跟踪分析 Bug，那么他们将花费比修复或测试问题更多的时间去诅咒 Bug 提交人。）</li></ol><p>让我们举一个例子：你正在测试的应用程序是一个网络浏览器，在访问 foo.com 网站时崩溃了，因此你想写一个 Bug 报告:</p><ul><li><strong>糟糕的 Bug 报告</strong>：“我的浏览器崩溃了。我正在访问 foo.com。我和比尔-盖茨打高尔夫，所以你最好解决这个问题，否则我就向他报告你。顺便说一下,你的 “返回 “图标看起来像一只被压扁的啮齿动物。丑陋极了。还有我的祖母的主页看上去外观也不正确，或者，它们全被搞乱了。祝好运。”</li><li><strong>有用的 Bug 报告</strong>：“我每次进入<a href="http://www.foo.com,在windows/">www.foo.com，在Windows</a> 2000系统上使用2002-02-25的版本时都会崩溃。我还重启了Linux，并使用2002-02-24的Linux版本再现了这个问题。我发现每次崩溃都发生在绘制这个页面位于上端的 Foo 横幅的时候。我分析了页面，发现除非你删除 ” border &#x3D;0″属性，否则下列图片链接将导致应用程序崩溃 ：<IMG SRC="http://www.foo.com/images/topics/topicfoos.gif" width="34" height="44" border="0" alt="News">”</li></ul><h2 id="如何在-Bugzilla-中输入你有用的-Bug-报告"><a href="#如何在-Bugzilla-中输入你有用的-Bug-报告" class="headerlink" title="如何在 Bugzilla 中输入你有用的 Bug 报告"></a>如何在 Bugzilla 中输入你有用的 Bug 报告</h2><p>在你输入你发现的 Bug 前，应使用 Bugzilla 查询页检查是否你发现的是已知并被报告的 Bug。（如果你发现的 Bug 同第 37 条已经知道的结果相同，你报告的话，就可能骚扰工程师，从而影响工程师修复 Bug 的效率。）</p><p>下一步,确认你发现的 Bug 是在最新的版本中所发生的。（工程师更倾向于对那些他们正在编写的代码中的严重问题感兴趣，而不是对以前那些废弃代码中数以百计的 Bug 进行修复。）</p><p>如果你已经在当前版本中发现了一个新的 Bug，请在 Bugzilla 中报告：</p><ol><li>从你的 Bugzilla 主页中,选择“Enter a new bug”。</li><li>选择你发现 Bug 的产品。</li><li>输入你的电子邮件地址、密码，然后按“Login”按钮。（如果你遗忘或还没有得到密码,让密码正文框空白，并且按 ” E-mail me a password “按钮，不久你将收到包含你的密码的电子邮件。）</li></ol><p>现在，填写那张出现的表格。以下说明表格中的所有含义：</p><h3 id="你在哪儿发现了-Bug？"><a href="#你在哪儿发现了-Bug？" class="headerlink" title="你在哪儿发现了 Bug？"></a>你在哪儿发现了 Bug？</h3><ul><li><strong>产品：在哪一个产品中你发现了 Bug？</strong><br>你在上一页已选择，所以你不能在这编辑</li><li><strong>版本：在产品的哪一个版本中你找到了 Bug？</strong><br>（如果有的话）</li><li><strong>产品单元：在产品的哪一个单元中存在 Bug？</strong><br>Bugzilla 在你输入一个 Bug 时，要求你必须选择一个产品单元。（如果你无法确定所列产品单元的意思，单击产品单元链接，那将链接到对每个产品单元的详细描述，这会帮助你作出最好选择。）</li><li><strong>OS：在哪一个操作系统（OS）中你找到了这个 Bug？（例如 Linux、Windows 2000、Mac OS 9。）</strong><br>如果你知道这个 Bug 会发生在所有 OS 中，请选择“All”，否则请选择相应的你发现 Bug 的 OS，如果列表中没有出现你的 OS，请选择“Other”。</li></ul><h3 id="这个-Bug-有多重要？"><a href="#这个-Bug-有多重要？" class="headerlink" title="这个 Bug 有多重要？"></a>这个 Bug 有多重要？</h3><ul><li><strong>严重性：这个 Bug 的破坏性有多大？</strong><br>这项值默认为“普通（normal）”。（要为一个特定的 Bug 界定最适当的严重性，单击严重性链接，你会看到每个严重程度的描述。）</li></ul><h3 id="谁将跟踪解决-Bug？"><a href="#谁将跟踪解决-Bug？" class="headerlink" title="谁将跟踪解决 Bug？"></a>谁将跟踪解决 Bug？</h3><ul><li><strong>指定给：哪一个工程师将负责修复这个 Bug？</strong><br>在你提交 Bug 报告后，Bugzilla 将自动把 Bug 分配给默认工程师；填写正文框将允许你用手工方式把它分配给其他工程师。（要查看每个产品单元的默认工程师列表,请单击产品单元链接。）</li><li><strong>Cc：还有哪些人将收到这个 Bug 修复更新的电子邮件?</strong><br>列出其他需要通过电子邮件收到这个 Bug 修复更新的人的完整的电子邮件地址。您可以输入任意多的电子邮件地址，用空格或逗号隔开，只要这些人有Bugzilla帐户。</li></ul><h3 id="关于这个Bug你还能告诉工程师什么？"><a href="#关于这个Bug你还能告诉工程师什么？" class="headerlink" title="关于这个Bug你还能告诉工程师什么？"></a>关于这个Bug你还能告诉工程师什么？</h3><ul><li><strong>摘要：你如何用大约60个或更少的字符来描述这个错误？</strong><br>一个好的摘要应该能快速而独特地识别一个错误报告。否则，工程师无法通过摘要来有意义地识别你的bug，而且在浏览10页的bug列表时，往往不会注意到你的bug报告。</li></ul><p>一个有用的摘要可能是 “PCMCIA安装在Tosh Tecra 780DVD w&#x2F; 3c589C上失败”。”软件失败 “或 “安装问题 “将是不好的摘要的例子。</p><ul><li><strong>描述：</strong></li></ul><p>请在这个领域提供一个详细的问题报告。你的错误的接收者很可能希望得到以下信息：<br><strong>概括描述：</strong>更详细地扩展总结。<br>在NSGetFactory中拖动选择任何页面都会使Mac的构建崩溃<br><strong>Bug复现的步骤</strong>：最小化的、易于操作的、会触发错误的步骤。包括任何特殊的设置步骤。</p><ol><li>查看任何网页。(我使用了默认的样本页。 resource:&#x2F;res&#x2F;samples&#x2F;test0.html)</li><li>拖动选择该页面。(具体来说，在按住鼠标按钮的同时，将鼠标指针从浏览器内容区域的任何一点向下拖动到浏览器内容区域的底部)</li></ol><p><strong>目前的结果</strong>：执行上述步骤后，应用程序做了什么。<br>该应用程序崩溃了。下面是MacsBug的堆栈爬行。<br><strong>期望的结果</strong>：如果不存在这个错误，应用程序应该做什么。</p><p>窗口应向下滚动。滚动的内容应该被选中。<br>(或者，至少，应用程序不应该崩溃）。<br><strong>时间及硬件平台</strong>：第一次出现这个Bug的时间及硬件平台。<br>在Mac OS 9.0上构建2002-03-15<br><strong>其它环境及硬件平台</strong>：Bug是否出现在其他硬件平台或浏览器上。</p><ul><li>也出现在<br>Mozilla (2002-03-15 build on Windows NT 4.0)</li><li>不出现在<br>Mozilla (2002-03-15 build on Red Hat Linux; feature not supported)<br>Internet Explorer 5.0 (在Windows NT 4.0上运行的版本)<br>Netscape Communicator 4.5 (在Mac OS 9.0上发布)</li></ul><p><strong>其它信息</strong>：任何其他调试信息。对应崩溃的错误：</p><ul><li><strong>Win32</strong>: 如果你收到华生医生的错误( Dr. Watson error), 请注意崩溃的类型，以及应用程序崩溃的模块。(例如：apprunner.exe中的访问违规)</li><li><strong>Mac OS</strong>: 如果你运行的是MacsBug，请提供一个how和一个sc的结果:</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">*** MACSBUG STACK CRAWL OF CRASH (Mac OS)<br>Calling chain using A6/R1 links <br>Back chain  ISA  Caller <br><span class="hljs-number">00000000</span>    PPC  <span class="hljs-number">0BA85E74</span>   <br><span class="hljs-number">03AEFD80</span>    PPC  <span class="hljs-number">0B742248</span>   <br><span class="hljs-number">03AEFD30</span>    PPC  <span class="hljs-number">0B50FDDC</span>  NSGetFactory+<span class="hljs-number">027FC</span><br>PowerPC unmapped memory exception <span class="hljs-built_in">at</span> <span class="hljs-number">0B512BD0</span> NSGetFactory+<span class="hljs-number">055F0</span><br></code></pre></td></tr></table></figure><p>你已经完成了一篇不错的bug报告！</p><p>在确认你的输入无误后，请按“t提交（Commit）”按钮，现在你的Bug报告已经存入Bugzilla数据库。</p><h2 id="关于写好-Bug-报告的更多信息"><a href="#关于写好-Bug-报告的更多信息" class="headerlink" title="关于写好 Bug 报告的更多信息"></a>关于写好 Bug 报告的更多信息</h2><ol><li><strong>有用的Bug报告的一般提示</strong></li></ol><p><strong>使用一个明确的结构，这样你的错误报告就很容易被浏览。</strong>错误报告的用户通常需要立即访问您的错误的特定部分。如果您安装的Bugzilla支持Bugzilla帮助器，请使用它。</p><p><strong>避免可爱，如果它需要清晰度</strong>。没有人会在凌晨3点时因为你那有趣的错误标题而发笑，因为他们不记得如何找到你的错误。</p><p><strong>每个报告只有一个bug</strong>。完全不同的人通常会修复、验证和优先处理不同的bug。如果你在一份报告中混入了大量的bug，正确的人可能不会及时发现你的bug，或者根本不会发现。某些bug也比其他的更重要。当一个错误报告包含四个不同的问题时，不可能对其进行优先排序，这些问题的重要性各不相同。</p><p><strong>没有一个错误是不值得报告的</strong>。除非你正在阅读源代码，否则你无法看到实际的软件错误，如空指针 – 你会看到它们的可见表现，如应用程序最终崩溃时的故障。严重的软件问题可以通过表面上微不足道的方式表现出来。无论如何要把它们归档。</p><ol start="2"><li><strong>如何以及为什么要写好Bug总结？</strong></li></ol><p><strong>你想给错误接收者留下一个好的第一印象。</strong>就像《纽约时报》的标题引导读者从几十种选择中找到相关的文章一样，你的bug摘要是否会暗示你的bug报告值得从几十种或几百种选择中阅读？</p><p>相反，像安装问题这样的模糊的bug摘要会迫使审查安装bug的人浪费时间打开你的bug来确定它是否重要。</p><p><strong>你的bug经常会被它的摘要所搜索到</strong>。就像你用Google通过直觉搜索关键词来找到网页一样，其他人也会找到你的bug。描述性的bug摘要自然是富含关键词的，而且更容易找到。</p><p>例如，如果你搜索 “列表”、”终端 “或 “路径”，你会发现一个题为 “将图标从列表视图拖到gnome终端（gnome-terminal）不会粘贴路径 “的错误。这些搜索关键词不会发现一个题为 “拖动图标不能粘贴 “的错误。</p><p>问问自己，”有人会从这个摘要中理解我的错误吗？” 如果是这样，你已经写了一个很好的摘要。</p><p><strong>不要写像这样的标题:</strong></p><ol><li>“无法安装” - 为什么无法安装？当你尝试安装时会发生什么？</li><li>“严重的性能问题” - ……当你做什么的时候会出现这些问题？</li><li>“返回按钮不生效” - 生效过吗？还是根本没有？</li></ol><p><strong>好的错误标题：</strong></p><ol><li>“如果存在Mozilla M18包，1.0升级安装失败” - 解释了问题和背景。</li><li>“如果在Red Hat 6.2（RPM 3）系统上启动RPM 4安装程序会崩溃” - 解释了发生的情况和背景。</li></ol><p>（完）</p><p><strong>参考</strong></p><ul><li><a href="http://wallace.westminster.lib.co.us/bugzilla-custom/default-ticket-writing.html">Bug Writing Guidelines</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>翻译转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
      <tag>翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户登入测试用例设计</title>
    <link href="/blog/2021/10/%E7%94%A8%E6%88%B7%E7%99%BB%E5%85%A5%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1.html"/>
    <url>/blog/2021/10/%E7%94%A8%E6%88%B7%E7%99%BB%E5%85%A5%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1.html</url>
    
    <content type="html"><![CDATA[<h2 id="划分维度"><a href="#划分维度" class="headerlink" title="划分维度"></a>划分维度</h2><p>软件测试根据维度划分为两大需求：</p><ol><li>显式功能性需求</li><li>隐式功能性需求</li></ol><blockquote><p>显式功能性需求（Functional requirement）指的是软件本身需要实现的具体功能，对应的是隐式功能性需求(Non-functional requirement）</p></blockquote><p>隐式功能性需求主要涉三大方面:</p><ol><li>安全性</li><li>性能</li><li>兼容性</li></ol><p>因此，设计测试用例的时候可以根据上述划分来设计。</p><h2 id="显式功能性需求测试用例设计"><a href="#显式功能性需求测试用例设计" class="headerlink" title="显式功能性需求测试用例设计"></a>显式功能性需求测试用例设计</h2><ul><li>输入已注册的用户名和正确的密码，验证是否登录成功</li><li>输入已注册的用户名和不正确的密码，验证是否登录失败，并且提示信息正确</li><li>输入未注册的用户名和任意密码，验证是否登录失败，并且提示信息正确</li><li>用户名和密码两者都为空，验证是否登录失败，并且提示信息正确</li><li>用户名和密码两者之一为空，验证是否登录失败，并且提示信息正确</li><li>如果登录功能启用了验证码功能，在用户名和密码正确的前提下，输入正确的验证码，验证是否登录成功</li><li>如果登录功能启用了验证码功能，在用户名和密码正确的前提下，输入错误的验证码，验证是否登录失败，并且提示信息正确</li><li>用户名和密码是否大小写敏感</li><li>页面上的密码框是否加密显示</li><li>后台系统创建的用户第一次登录成功时，是否提示修改密码</li><li>忘记用户名和忘记密码的功能是否可用</li><li>前端页面是否根据设计要求限制用户名和密码长度</li><li>如果登录功能需要验证码，点击验证码图片是否可以更换验证码，更换后的验证码是否可用</li><li>刷新页面是否会刷新验证码</li><li>如果验证码具有时效性，需要分别验证时效内和时效外验证码的有效性</li><li>用户登录成功但是会话超时后，继续操作是否会重定向到用户登录界面</li><li>不同级别的用户，比如管理员用户和普通用户，登录系统后的权限是否正确</li><li>页面默认焦点是否定位在用户名的输入框中</li><li>快捷键 Tab 和 Enter 等，是否可以正常使用</li><li>网络延迟或者弱网或者切换网络或者断网时正常登录是否正常</li><li>是否支持第三方登录</li><li>用户名密码是否支持特殊字符和中文等</li><li>登录用户限制，比如同时支持10个用户登录，同时9个或者11个用户登录是否正常或者提示信息正确</li><li>未激活的用户是否可以登录</li><li>被停用的用户是否可以登录</li><li>登录的操作日志记录是否准确</li><li>登录有实效性是否控制正确</li><li>为空和输入空字符串时的校验是否一致</li><li>使用中文键盘输入字母时和使用英文键盘输入字母时传给后端的字符长度是否一致</li><li>输入账号密码时对键盘格式是否有要求比如数字键盘</li><li>密码一栏是否需要设置明暗码切换按钮</li><li>输入账号密码格式不规范时是否将按钮设置为不可点击</li><li>输入栏是否设置快速删除按钮</li><li>是否用到缓存</li><li>用户名和密码是否对空格敏感</li><li>密码是否有明文和暗文显示两种模式</li><li>更改密码后是否还能用之前的密码登录</li><li>一个用户是否具备多种登录方式(用户名，手机号，邮箱…)</li></ul><h2 id="隐式功能性需求测试用例设计（三大方面）"><a href="#隐式功能性需求测试用例设计（三大方面）" class="headerlink" title="隐式功能性需求测试用例设计（三大方面）"></a>隐式功能性需求测试用例设计（三大方面）</h2><h3 id="安全性测试用例设计"><a href="#安全性测试用例设计" class="headerlink" title="安全性测试用例设计"></a>安全性测试用例设计</h3><ul><li>用户密码后台存储是否加密</li><li>用户密码在网络传输过程中是否加密</li><li>密码是否具有有效期，密码有效期到期后，是否提示需要修改密码</li><li>不登录的情况下，在浏览器中直接输入登录后的 URL 地址，验证是否会重新定向到用户登录界面</li><li>密码输入框是否不支持复制和粘贴</li><li>密码输入框内输入的密码是否都可以在页面源码模式下被查看</li><li>用户名和密码的输入框中分别输入典型的“SQL 注入攻击”字符串，验证系统的返回页面</li><li>用户名和密码的输入框中分别输入典型的“XSS 跨站脚本攻击”字符串，验证系统行为是否被篡改</li><li>连续多次登录失败情况下，系统是否会阻止后续的尝试以应对暴力破解</li><li>同一用户在同一终端的多种浏览器上登录，验证登录功能的互斥性是否符合设计预期</li><li>同一用户先后在多台终端的浏览器上登录，验证登录是否具有互斥性</li><li>是否可以使用登录的API发送登录请求，并绕开验证码校验</li><li>是否可以用抓包工具抓到的请求包直接登录</li><li>截取到的token等信息，是否可以在其他终端上直接使用，绕开登录，token过期时间</li><li>是否可记住密码，记住的密码保存是否加密</li><li>记住密码是否有有效期，有有效期，过期之后是否会清空密码</li><li>GDPR相关的测试，用户登录过程中log中是否有个人信息明文打印</li><li>密码强弱性校验</li><li>登录成功后的session时效设置</li><li>安全性方面异地登录校验、更换设备登录校验、登录信息异常是否考虑账号冻结停用</li></ul><h3 id="性能压力测试用例设计"><a href="#性能压力测试用例设计" class="headerlink" title="性能压力测试用例设计"></a>性能压力测试用例设计</h3><ul><li>单用户登录的响应时间是否小于 3 秒</li><li>单用户登录时，后台请求数量是否过多</li><li>高并发场景下用户登录的响应时间是否小于 5 秒</li><li>高并发场景下服务端的监控指标是否符合预期</li><li>高集合点并发场景下，是否存在资源死锁和不合理的资源等待</li><li>长时间大量用户连续登录和登出，服务器端是否存在内存泄漏</li></ul><h3 id="兼容性测试用例设计"><a href="#兼容性测试用例设计" class="headerlink" title="兼容性测试用例设计"></a>兼容性测试用例设计</h3><ul><li>不同浏览器下，验证登录页面的显示以及功能正确性；</li><li>相同浏览器的不同版本下，验证登录页面的显示以及功能正确性；</li><li>不同移动设备终端的不同浏览器下，验证登录页面的显示以及功能正确性；</li><li>不同分辨率的界面下，验证登录页面的显示以及功能正确性。</li></ul><p>当然，除了上面罗列的测试用例外，还会存在一些遗漏的测试点没有覆盖到。大多数情况下，是不可能进行穷尽测试的。一般采用基于风险驱动的模式，有所侧重地选择测试范围和设计测试用例，以寻求缺陷风险和研发成本之间的平衡。</p><blockquote><p><strong>穷尽测试</strong>是指包含了软件输入值和前提条件所有可能组合的测试方法，完成穷尽测试的系统里应该不残留任何未知的软件缺陷。</p></blockquote><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>每一个解决方案都是下一个问题的来源，要真正理解问题，那至少对自己的解决方案提出三个可能出错的地方。<br>                                                                             –《你的灯亮着吗》Donald C. Gaus</p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
      <category>业务架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
      <tag>测试用例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大型电商系统的搜索链路业务架构</title>
    <link href="/blog/2020/11/%E5%A4%A7%E5%9E%8B%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%9C%E7%B4%A2%E9%93%BE%E8%B7%AF%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84.html"/>
    <url>/blog/2020/11/%E5%A4%A7%E5%9E%8B%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%9C%E7%B4%A2%E9%93%BE%E8%B7%AF%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84.html</url>
    
    <content type="html"><![CDATA[<h2 id="大型电商系统的搜索链路业务架构"><a href="#大型电商系统的搜索链路业务架构" class="headerlink" title="大型电商系统的搜索链路业务架构"></a>大型电商系统的搜索链路业务架构</h2><pre><code class=" mermaid">graph关键词搜索--&gt;李宁冬动运鞋--敏感词、表情符过滤--&gt;搜索词重写--&gt;纠错--李宁冬季运动鞋--&gt;NLP处理--组装搜索造句--&gt;搜索引擎--&gt;是否有结果--&gt;YES--&gt;综合排序--&gt;返回结果是否有结果--&gt;NO--&gt;是否经过丢词处理--&gt;是--&gt;返回猜你喜欢是否经过丢词处理--&gt;否--&gt;搜索引擎纠错--&gt;类目预测--辅助排序--&gt;搜索引擎关键词搜索--&gt;经纬度--辅助排序--&gt;搜索引擎关键词搜索--&gt;用户特征获取--辅助排序--&gt;搜索引擎</code></pre><p>其中，在步骤<strong>NLP处理</strong>中，将搜索关键字转化处理类似的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;李宁&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;brandSynonyms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;erke&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;鞋&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;categorySynoyms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;鞋子&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;normalTerms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;秋季&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;termSynonyms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;秋天&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;秋&quot;</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;运动&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;termSynonyms&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;跑步&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;运动款&quot;</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在步骤<strong>综合排序</strong>中，根据以下算法项进行综合排序：</p><ul><li>文本相关性</li><li>品牌命中</li><li>类名命中</li><li>店铺评分</li><li>用户特征</li><li>类目预测</li><li>流量倾斜</li><li>距离</li><li>其他</li></ul><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
      <category>业务架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>电商系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ribbon简介和入门</title>
    <link href="/blog/2020/04/Ribbon%E7%AE%80%E4%BB%8B%E5%92%8C%E5%85%A5%E9%97%A8.html"/>
    <url>/blog/2020/04/Ribbon%E7%AE%80%E4%BB%8B%E5%92%8C%E5%85%A5%E9%97%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="Ribbon介绍"><a href="#Ribbon介绍" class="headerlink" title="Ribbon介绍"></a>Ribbon介绍</h2><p>Ribbon是Netflix发布的负载均衡器，有助于控制HTTP客户端行为。为Ribbon配置服务提供地址列表<br>后，Ribbon就可基于负载均衡算法，自动帮助服务消费者请求。<br>Ribbon默认提供的负载均衡算法：轮询，随机,重试法,加权。当然，我们可用自己定义负载均衡算法。</p><h3 id="Ribbon实践"><a href="#Ribbon实践" class="headerlink" title="Ribbon实践"></a>Ribbon实践</h3><p><img src="/blog/./assets/image-asifss1jjk0hiuyywy1mqns.PNG" alt="业务介绍"></p><p>如上图，当用户下单调用 hailtaxi-order 服务的时候，该服务会调用 hailtaxi-driver ，此时如果是抢单过程，查询压力也会很大，我们可以为 hailtaxi-driver 做集群，做集群只需要把工程复制多份即可，多个工程如下图：</p><p><img src="/blog/./assets/image-9lmfsov6eazrzqaazwai32m.PNG" alt="本地伪集群配置"></p><p>在idea中将项目的启动配置复制一份出来，修改启动端口号</p><p><img src="/blog/./assets/image-agvr7hq73x9lg01v3hersj7.PNG" alt="修改启动端口"></p><p>调用测试，访问：<a href="http://localhost:18082/order%E8%B0%83%E7%94%A8%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%E5%B7%B2%E7%BB%8F%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%BA%86%EF%BC%8C">http://localhost:18082/order调用，可以发现已经实现负载均衡了，</a> 18081 和 18085 ， 18086 服务默认是轮询访问。</p><h3 id="Ribbon算法"><a href="#Ribbon算法" class="headerlink" title="Ribbon算法"></a>Ribbon算法</h3><p>我们上面没做任何相关操作，只是把服务换成了多个就实现了负载均衡，这是因为OpenFeign默认使用了Ribbon的轮询算法,如下图依赖包，引入OpenFeign的时候会传递依赖Ribbon包：</p><p><img src="/blog/./assets/image-oe6d8tbp0dt7m31a5alyihg.PNG" alt="OpenFeign依赖"></p><p><img src="/blog/./assets/image-fz9srp8zoiundd5a8kqwtl3.PNG" alt="依赖树"></p><p>Ribbon支持多种负载均衡算法，我们可以按照自己的需求使用相关算法，在 hailtaxi-order 配置类中</p><p>配置如下规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">* 负载均衡算法设置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Bean</span> <span class="hljs-comment">//要交给容器管理</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">randomRule</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//随机算法</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br><span class="hljs-comment">//重试算法</span><br><span class="hljs-comment">//return new RetryRule();</span><br><span class="hljs-comment">//加权法</span><br><span class="hljs-comment">//return new ZoneAvoidanceRule();</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>RoundRobinRule</p><p>轮询</p></li><li><p>RandomRule</p><p>随机算法</p></li><li><p>RetryRule</p><p>重试算法。该算法先按照轮询的策略获取服务,如果获取服务失败则在指定的时间内会进行重试，获取可用的服务。</p></li><li><p>ZoneAvoidanceRule</p><p>加权算法。会根据平均响应时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越大。刚启动时如果同统计信息不足，则使用轮询的策略，等统计信息足够会切换到自身规则。</p></li></ul><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Ribbon</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>Ribbon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenFeign简介和入门</title>
    <link href="/blog/2020/04/OpenFeign%E7%AE%80%E4%BB%8B%E5%92%8C%E5%85%A5%E9%97%A8.html"/>
    <url>/blog/2020/04/OpenFeign%E7%AE%80%E4%BB%8B%E5%92%8C%E5%85%A5%E9%97%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="OpenFeign前身"><a href="#OpenFeign前身" class="headerlink" title="OpenFeign前身"></a>OpenFeign前身</h2><ul><li>Feign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端。</li><li>Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。</li><li>Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务。</li><li>Feign支持的注解和用法请参考官方文档：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></li><li>Feign本身不支持Spring MVC的注解，它有一套自己的注解。</li></ul><h2 id="OpenFeign介绍"><a href="#OpenFeign介绍" class="headerlink" title="OpenFeign介绍"></a>OpenFeign介绍</h2><p>OpenFeign是Spring Cloud 在Feign的基础上支持了Spring MVC的注解，如@RequesMapping等，是一</p><p>个轻量级的Http封装工具对象,大大简化了Http请求，使得我们对服务的调用转换成了对本地接口方法的</p><p>调用。</p><p>OpenFeign 的 @FeignClient 可以解析SpringMVC的 @RequestMapping 注解下的接口，并通过动态代</p><p>理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p><ul><li>集成了Ribbon的负载均衡功能</li><li>集成Hystrix的熔断器功能</li><li>支持请求压缩</li><li>大大简化了远程调用的代码，同时功能还增强啦</li><li>以更加优雅的方式编写远程调用代码，并简化重复代码</li></ul><p><img src="/blog/./assets/image-ptms6zvcztuu9ajffq5ht16.PNG" alt="业务分析"></p><p><strong>需求：</strong></p><p>如上图，我们现在要实现打车用户打车下单，打车下单的时候需要匹配指定司机并更改司机状态，由之</p><p>前空闲状态改成接单状态。</p><p><strong>技术支持：</strong></p><p>这时候就涉及到 hailtaxi-order 服务调用 hailtaxi-driver 服务了，此时如果使用HttpClient工具，</p><p>操作起来非常麻烦，我们可以使用 SpringCloud OpenFeign 实现调用。</p><h2 id="OpenFeign实践"><a href="#OpenFeign实践" class="headerlink" title="OpenFeign实践"></a>OpenFeign实践</h2><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>使用OpenFeign实现服务之间调用，可以按照如下步骤实现：</p><ol><li><p>导入openfeign依赖</p></li><li><p>编写openfeign客户端接口-将请求地址写到该接口上</p></li><li><p>消费者启动引导类开启openfeign功能注解</p></li><li><p>访问接口测试</p></li><li><p>导入依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置feign--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>&lt;/dependency<br></code></pre></td></tr></table></figure><ol start="2"><li>创建Feign客户端接口</li></ol><p>修改 hailtaxi-api 创建 xyz.maojun.driver.feign.DriverFeign 接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;hailtaxi-driver&quot;)</span><span class="hljs-comment">//value = &quot;hailtaxi-driver&quot;指定服务的名字</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DriverFeign</span> &#123;<br><span class="hljs-comment">/****</span><br><span class="hljs-comment">* 更新司机信息，该方法和hailtaxi-driver服务中的方法保持一致</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PutMapping(value = &quot;/driver/status/&#123;id&#125;/&#123;status&#125;&quot;)</span><br>Driver <span class="hljs-title function_">status</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(value = &quot;id&quot;)</span>String id, <span class="hljs-meta">@PathVariable(value =</span></span><br><span class="hljs-meta"><span class="hljs-params">&quot;status&quot;)</span>Integer status)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Feign会通过动态代理，帮我们生成实现类。</p><ul><li>注解@FeignClient声明Feign的客户端，注解value指明服务名称</li><li>接口定义的方法，采用SpringMVC的注解。Feign会根据注解帮我们生成URL地址</li><li>注解@RequestMapping中的&#x2F;driver，不要忘记。因为Feign需要拼接可访问地址</li></ul><ol start="3"><li>Controller调用</li></ol><p>修改 hailtaix-order 的下单方法，在下单方法中调用 DriverFeign 修改司机状态，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DriverFeign driverFeign;<br><span class="hljs-comment">/***</span><br><span class="hljs-comment">* 下单</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-keyword">public</span> OrderInfo <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//修改司机信息 司机ID=1</span><br><span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> driverFeign.status(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//创建订单</span><br><span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderInfo</span>(<span class="hljs-string">&quot;No&quot;</span>+((<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">10000</span>)), (<span class="hljs-type">int</span>)<br>(Math.random()*<span class="hljs-number">100</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;深圳北站&quot;</span>, <span class="hljs-string">&quot;罗湖港&quot;</span>, driver);<br>orderInfoService.add(orderInfo);<br><span class="hljs-keyword">return</span> orderInfo;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>启用OpenFeign</li></ol><p>上面所有业务逻辑写完了，但OpenFeign还并未生效，我们需要在 hailtaxi-order 中开启OpenFeign ，只需要在 OrderApplication 启动类上添加 @EnableFeignClients(basePackages &#x3D;<br>“xyz.maojun.driver.feign”) 即可。</p><p>测试地址：<a href="http://localhost:18082/order">http://localhost:18082/order</a></p><p><img src="/blog/./assets/image-macazyaszgdh6y4zfe5ig3d.PNG" alt="请求访问"></p><p>数据库查询验证：</p><p><img src="/blog/./assets/image-sertor17n2m3fkkankwo45k.PNG" alt="数据库验证"></p><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p>为了获得服务请求的参数和返回值，我们经常使用的一个做法就是打印日志。你可以在程序中使用 log.info 或者log.debug 方法将服务请求的入参和返回值一一打印出来。如果远程调用组件能自己实现调用参数的日志打印，这个事情不就完美解决了么！下面来看怎么做。</p><ol><li>首先，你需要在配置文件中指定 FeignClient 接口的日志级别为 Debug。这样做是因为OpenFeign 组件默认将日志信息以 debug 模式输出，而默认情况下 Spring Boot 的日志级别是Info，因此我们必须将应用日志的打印级别改为 debug 后才能看到 OpenFeign 的日志。</li><li>在应用的上下文中使用代码的方式声明 Feign 组件的日志级别。这里的日志级别并不是我们传统意义上的 Log Level，它是 OpenFeign 组件自定义的一种日志级别，用来控制 OpenFeign 组件向日志中写入什么内容</li></ol><blockquote><p>因为@FeignClient注解修饰的客户端在被代理时，都会创建一个新的Feign.Logger实例。我们需要额外通过配置类的方式指定这个日志的级别才可以。</p></blockquote><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li><p>在application.yml配置文件中开启日志级别配置</p></li><li><p>编写配置类，定义日志级别bean。</p></li><li><p>在接口的@FeignClient中指定配置类</p></li><li><p>重启项目，测试访问</p></li><li><p>普通日志等级配置</p><p>在 hailtaxi-order 的配置文件中设置包下的日志级别都为debug：\</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br><span class="hljs-attr">level:</span><br><span class="hljs-attr">xyz.maojun:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure></li><li><p>Feign日志等级配置</p></li></ol><p>在 hailtaxi-order 启动类 OrderApplication 中创建 Logger.Level ,定义日志级别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">* 日志级别</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLoggerLevel</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> Logger.Level.FULL;<br>&#125;<br></code></pre></td></tr></table></figure><p>Feign支持4种级别：</p><ol><li><p>NONE：不记录任何日志，默认值</p></li><li><p>BASIC：只记录服务请求的 URL、HTTP Method、响应状态码（如 200、404 等）和服务调用的执行</p><p>时间</p></li><li><p>HEADERS：在 BASIC 的基础上，还记录了请求和响应中的 HTTP Headers</p></li><li><p>FULL：在 HEADERS 级别的基础上，还记录了服务请求和服务响应中的 Body 和 metadata，FULL</p><p>级别记录了最完整的调用信息。</p></li></ol><p>重启项目，即可看到每次访问的日志。</p><h3 id="超时判定"><a href="#超时判定" class="headerlink" title="超时判定"></a>超时判定</h3><p>超时判定是一种保障可用性的手段。如果你要调用的目标服务的 RT（Response Time）值非常高，那么</p><p>你的调用请求也会处于一个长时间挂起的状态，这是造成服务雪崩的一个重要因素。为了隔离下游接口</p><p>调用超时所带来的的影响，我们可以在程序中设置一个超时判定的阈值，一旦下游接口的响应时间超过</p><p>了这个阈值，那么程序会自动取消此次调用并返回一个异常。</p><p>超时配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br><span class="hljs-attr">client:</span><br><span class="hljs-attr">config:</span><br><span class="hljs-comment">#全局默认配置</span><br><span class="hljs-attr">default:</span><br><span class="hljs-comment">#网络连接阶段1秒超时 单位毫秒</span><br><span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">1000</span><br><span class="hljs-comment">#服务请求响应阶段5秒超时</span><br><span class="hljs-attr">readTimeout:</span> <span class="hljs-number">5000</span><br><span class="hljs-comment">#针对某个特定服务的超时配置</span><br><span class="hljs-attr">hailtaxi-driver:</span><br><span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">1000</span><br><span class="hljs-attr">readTimeout:</span> <span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>降级逻辑是在远程服务调用发生超时或者异常（比如 400、500 Error Code）的时候，自动执行的一段</p><p>业务逻辑。你可以根据具体的业务需要编写降级逻辑，比如执行一段兜底逻辑将服务请求从失败状态中</p><p>恢复，或者发送一个失败通知到相关团队提醒它们来线上排查问题。</p><p>OpenFeign 支持两种不同的方式来指定降级逻辑，一种是定义 fallback 类，另一种是定义 fallback 工</p><p>厂。</p><p>譬如这里使用 fallback 工厂，编写xyz.maojun.driver.feign.fallback.DriverFeignFallBackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DriverFeignFallBackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;DriverFeign&gt;<br>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> DriverFeign <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable cause)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DriverFeign</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Driver <span class="hljs-title function_">status</span><span class="hljs-params">(String id, Integer status)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;走降级&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>();<br>&#125;<br>&#125;;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在feign接口上指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(</span><br><span class="hljs-meta">name = &quot;hailtaxi-driver&quot;</span><br><span class="hljs-meta">,fallbackFactory = DriverFeignFallBackFactory.class</span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure><p>opfeign默认集成了hystrix，但未开启，需要开启，降级才生效。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br><span class="hljs-attr">hystrix:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><p>用户在网络请求过程中，如果网络不佳、传输数据过大，会造成体验差的问题，我们需要将传输数据压缩提升体验。SpringCloud OpenFeign支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。</p><p>通过配置开启请求与响应的压缩功能，在openfeign的客户端配置，即 hailtaxi-order 中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br><span class="hljs-attr">compression:</span><br><span class="hljs-attr">request:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启请求压缩</span><br><span class="hljs-attr">response:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启响应压缩</span><br></code></pre></td></tr></table></figure><p>也可以对请求的数据类型，以及触发压缩的大小下限进行设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br><span class="hljs-attr">compression:</span><br><span class="hljs-attr">request:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启请求压缩</span><br><span class="hljs-attr">mime-types:</span> <span class="hljs-string">text/html,application/xml,application/json</span> <span class="hljs-comment"># 设置压缩的数据类型</span><br><span class="hljs-attr">min-request-size:</span> <span class="hljs-number">2048</span> <span class="hljs-comment"># 设置触发压缩的大小下限</span><br><span class="hljs-comment">#以上数据类型，压缩大小下限均为默认值</span><br><span class="hljs-attr">response:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启响应压缩</span><br></code></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>用 Feign 来调用远程服务，比如远程服务的权限验证，需要在 header 中传递 token 之类的。在方法中显式传递又过于麻烦了，这时候就可以考虑使用 Feign 提供的 RequestInterceptor 接口，只要实现了该接口，那么 Feign 每次做远程调用之前都可以被它拦截下来再进行包装。</p><ol><li>在 hailtaxi-api 中创建拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 1、直接实现接口</span><br><span class="hljs-comment">* 2、继承 BaseRequestInterceptor</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestInterceptor</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(RequestTemplate template)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> template.url();<br>Map&lt;String, Collection&lt;String&gt;&gt; headers = template.headers();<br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> template.method();<br>Map&lt;String, Collection&lt;String&gt;&gt; queries = template.queries();<br>    Request.<span class="hljs-type">Body</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> template.requestBody();<br>log.info(<span class="hljs-string">&quot;url=&#123;&#125;,headers=&#123;&#125;,method=&#123;&#125;,queries=&#123;&#125;,body=</span><br><span class="hljs-string">&#123;&#125;&quot;</span>,url,headers,method,queries,body);<br><span class="hljs-comment">//添加头信息</span><br>template.header(<span class="hljs-string">&quot;GlobalId&quot;</span>, UUID.randomUUID().toString());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在 hailtaxi-order 中创建配置类，加入容器即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorConfiguration</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RequestInterceptor <span class="hljs-title function_">interceptor</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRequestInterceptor</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(完)</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>OpenFeign</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>OpenFeign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Consul简介和入门</title>
    <link href="/blog/2020/04/Consul%E7%AE%80%E4%BB%8B%E5%92%8C%E5%85%A5%E9%97%A8.html"/>
    <url>/blog/2020/04/Consul%E7%AE%80%E4%BB%8B%E5%92%8C%E5%85%A5%E9%97%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="Consul介绍"><a href="#Consul介绍" class="headerlink" title="Consul介绍"></a>Consul介绍</h2><p>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案相比较，Consul 的方案更“一站式”，内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key&#x2F;Value 存储、多数据中心方案，不再需要依赖其它工具（比如 ZooKeeper 等）。使用起来也较为简单。Consul 使用 Go 语言编写，因此具有天然可移植性(支持Linux、windows和MacOS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级容器可无缝配合。</p><p>Consul和其他服务注册和发现框架的对比：</p><table><thead><tr><th align="center">对比项</th><th align="center">euerka</th><th align="center">Consul</th><th align="center">zookeeper</th><th align="center">etcd</th></tr></thead><tbody><tr><td align="center">服务健康检查</td><td align="center">可配支持</td><td align="center">服务状态，内  存，硬盘等</td><td align="center">(弱)长连接， keepalive</td><td align="center">连接心跳</td></tr><tr><td align="center">多数据中心</td><td align="center">&#x2F;</td><td align="center">支持</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td></tr><tr><td align="center">ky存储服务</td><td align="center">&#x2F;</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">一致性</td><td align="center">&#x2F;</td><td align="center">raft</td><td align="center">paxos</td><td align="center">raft</td></tr><tr><td align="center">cap</td><td align="center">ap</td><td align="center">Cp</td><td align="center">Cp</td><td align="center">Cp</td></tr><tr><td align="center">使用接口(多语  言能力)</td><td align="center">http</td><td align="center">支持http和dns</td><td align="center">客户端</td><td align="center">http&#x2F;grpc</td></tr><tr><td align="center">watch支持</td><td align="center">支持long polling&#x2F;大  部分增量</td><td align="center">全量&#x2F;支持long   polling</td><td align="center">支持</td><td align="center">支持long  polling</td></tr><tr><td align="center">自身监控</td><td align="center">metrics</td><td align="center">metrics</td><td align="center">&#x2F;</td><td align="center">metrics</td></tr><tr><td align="center">安全</td><td align="center">&#x2F;</td><td align="center">acl &#x2F;https</td><td align="center">acl</td><td align="center">https支持    (弱)</td></tr><tr><td align="center">spring cloud  集成</td><td align="center">已支持</td><td align="center">已支持</td><td align="center">已支持</td><td align="center">已支持</td></tr></tbody></table><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li><p>服务发现</p></li><li><p>健康检查</p></li><li><p>Key&#x2F;Value 存储</p></li><li><p>多数据中心</p></li><li><p>社区活跃</p></li></ul><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li><p>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft。</p></li><li><p>支持多数据中心，内外网的服务采用不同的端口进行监听。  多数据中心集群可以避免单数据中心的 单点故障,而其部署则需要考虑网络延迟, 分片等情况等。  zookeeper 和 etcd 均不提供多数据中心 功能的支持。</p></li><li><p>支持健康检查。  etcd 不提供此功能。</p></li><li><p>支持 http 和 dns 协议接口。  zookeeper 的集成较为复杂, etcd 只支持 http 协议。</p></li><li><p>官方提供 web 管理界面, etcd 无此功能。</p></li><li><p>综合比较, Consul 作为服务注册和配置管理的新星, 比较值得关注和研究。</p></li><li><p>提供了rest api 便于集成：  <a href="https://www.consul.io/api-docs/index">https://www.consul.io/api-docs/index</a></p></li></ul><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><ul><li>client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。</li><li>server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。每个数据中心的 server 数量推荐为 3 个或是 5 个。</li></ul><p>Consul 客户端、服务端还支持跨中心的使用，更加提高了它的高可用性。</p><h4 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h4><ul><li>agent</li></ul><p>组成 consul 集群的每个成员上都要运行一个 agent，可以通过 consul agent 命令来启动。agent可以运</p><p>行在 server 状态或者 client 状态。自然的，运行在 server 状态的节点被称为 server 节点；运行在</p><p>client 状态的节点被称为 client 节点。</p><ul><li>server 节点</li></ul><p>负责组成 cluster 的复杂工作（选举server 自行选举一个 leader、状态维护、转发请求到 leader），以</p><p>及 consul 提供的服务（响应RPC 请求），以及存放和复制数据。考虑到容错和收敛，一般部署 3 ~ 5 个</p><p>比较合适。</p><ul><li>client 节点</li></ul><p>负责转发所有的 RPC 到 server 节点。本身无状态，且轻量级，因此，可以部署大量的client 节点。</p><ul><li>数据中心</li></ul><p>虽然数据中心的定义似乎很明显，但仍有一些细微的细节必须考虑。我们将一个数据中心定义为一个私</p><p>有、低延迟和高带宽的网络环境。这不包括通过公共互联网的通信，但是为了我们的目的，单个EC2 区</p><p>域内的多个可用区域将被视为单个数据中心的一部分。</p><p>另外，server 自行选举一个 leader。虽然 Consul 可以运行在一台 server ，但是建议使用 3 到 5 台来避免失败情况下数据的丢失。每个数据中心建议配置一个 server 集群。</p><p>在基础设施中需要发现其他服务的组件可以查询任何一个 Consul 的 server 或者agent，Agent 会自动</p><p>转发请求到 server。每个数据中心运行了一个 Consul server 集群。当一个跨数据中心的服务发现和配置请求创建时，本地Consul Server 转发请求到远程的数据中心并返回结果。</p><p><img src="/blog/./assets/image-1db1r20an3eb0kb55xm13r5.PNG" alt="consul流程图"></p><h4 id="现服务注册和发现"><a href="#现服务注册和发现" class="headerlink" title="现服务注册和发现"></a>现服务注册和发现</h4><p><img src="/blog/./assets/image-tpv569baonfctdmlcvmofiw.PNG" alt="服务注册和发现"></p><p>Consul在项目中发挥服务注册与发现的功能，我们讲解下它的工作原理：</p><ol><li>当Producer启动的时候，会向Consul发送一个post请求，并向Consul传输自己的IP和Port。</li><li>Consul 接收到Producer的注册后，每隔10s（默认）会向Producer发送一个健康检查的请求，检验Producer是否健康。</li><li>当Consumer以Http的方式向Producer发起请求，会先从Consul中拿到一个存储服务IP和Port的临时表，从表中拿到Producer的IP和Port后再发送请求。</li><li>该临时表每隔10s会更新，只包含有通过了健康检查的Producer。</li></ol><h2 id="Consul安装"><a href="#Consul安装" class="headerlink" title="Consul安装"></a>Consul安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载地址：<a href="https://www.consul.io/downloads.html%EF%BC%9B">https://www.consul.io/downloads.html；</a></p><p>历史版本下载地址：<a href="https://releases.hashicorp.com/consul/">https://releases.hashicorp.com/consul/</a></p><p><img src="/blog/./assets/image-cvvvcvvbm9hx838328hk75b.PNG" alt="下载安装"></p><p>下载后解压添加到环境变量到path中。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>consul server运行，参考如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">agent -server -bootstrap-expect 1 -data-dir<br>server -node=n1 -ui -client=0.0.0.0 -<span class="hljs-built_in">bind</span>=192.168.10.11<br></code></pre></td></tr></table></figure><ul><li>-server 定义 agent 运行在 server 模式</li><li>-bootstrap-expect 1 在一个 datacenter 中期望提供的 server 节点数目，当该值提供的时候，consul一直等到达到指定 sever 数目的时候才会引导整个集群。这里我们为了方便演示只启动一个服务端</li><li>-data-dir 参数设置 Consul 自己的维护的数据存储路径</li><li>-node&#x3D;n1 节点在集群中的名称，在一个集群中必须是唯一的，默认是该节点的主机名</li><li>bind&#x3D;192.168.10.11 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是 0.0.0.0</li><li>-datacenter&#x3D;dc1 指定当前数据中心名字，该参数可以不设置</li><li>-ui 指定可以以 UI 的方式呈现，当前的 UI 访问地址是:http:&#x2F;&#x2F;本机 IP:8500</li><li>-client&#x3D;0.0.0.0 consul 服务侦听地址，这个地址提供 HTTP、DNS、RPC 等服务，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成 0.0.0.0，我们当前配置为对外提供地址。</li></ul><p>完整启动选项参数见官方文档：<a href="https://www.consul.io/docs/agent/options">https://www.consul.io/docs/agent/options</a></p><p>启动后访问控制台UI: <a href="http://192.168.10.11:8500/">http://192.168.10.11:8500/</a></p><p><img src="/blog/./assets/image-flbmbpu8upwukh1i88fudah.PNG" alt="控制台UI"></p><ul><li>Services ：服务信息。</li><li>Nodes ：节点信息，Consul支持集群。</li><li>Key&#x2F;Value ：存储的动态配置信息。</li><li>ACL ：权限信息。</li><li>Intentions ：通过命令的方式对consul进行管理。</li></ul><p>consul client运行，参考命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./consul agent -data-dir /opt/itcast/springcloud/data/client -node=n2 -ui -client=0.0.0.0 -<span class="hljs-built_in">bind</span>=192.168.10.30 -<span class="hljs-built_in">join</span> 192.168.10.11<br></code></pre></td></tr></table></figure><p>通过以上两步操作，就启动了一个完整的数据中心。如果为了方便使用，可以使用如下命令启动一个agent server。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">consul agent -dev<br></code></pre></td></tr></table></figure><h2 id="Consul实践"><a href="#Consul实践" class="headerlink" title="Consul实践"></a>Consul实践</h2><p>项目中要想使用Consul作为服务注册中心，只需要引入如下依赖包，在启动类上添加</p><p>@EnableDiscoveryClient 注解，并在 application.yml 中添加Consul服务地址即可：</p><ol><li>添加依赖</li></ol><p>在项目 hailtaxi-order 添加依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--consul--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>添加 @EnableDiscoveryClient 注解</li></ol><p>在 hailtaxi-order 启动类 OrderApplication 上添加 @EnableDiscoveryClient 注解。</p><ol start="3"><li>配置Consul服务信息</li></ol><p>在 application.yml 中添加Consul服务信息：</p><p><img src="/blog/./assets/image-vgqy0uuer4lpnoldvmqtig3.PNG" alt="配置信息"></p><p>Yaml配置信息如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">application:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">hailtaxi-order</span><br><span class="hljs-attr">datasource:</span><br><span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"># 使用docker启动MySQL数据库：</span><br><span class="hljs-comment"># 1. docker run -itd --name mysql-hailtaxi -p 3306:3306 -v</span><br><span class="hljs-string">/opt/itcast/spring-cloud/data/mysql:/var/lib/mysql</span> <span class="hljs-string">-v</span> <span class="hljs-string">/opt/itcast/springcloud/sql/:/opt/sql</span> <span class="hljs-string">-e</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=123456</span> <span class="hljs-string">mysql:8.0</span><br><span class="hljs-comment"># 2. docker exec -it mysql-hailtaxi bash</span><br><span class="hljs-comment"># 3. 执行sql语句</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://linux30:3306/hailtaxi-order?</span><br><span class="hljs-string">useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br><span class="hljs-attr">cloud:</span><br><span class="hljs-comment">#Consul配置</span><br><span class="hljs-attr">consul:</span><br><span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8500</span><br><span class="hljs-attr">discovery:</span><br><span class="hljs-comment">#注册到Consul中的服务名字</span><br><span class="hljs-attr">service-name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br><span class="hljs-comment">#注册的服务的实例 Id，最好不要重复，这里参考官网建议的方式 带随机数</span><br><span class="hljs-comment">#instance-id:</span><br><span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;vcap.application.instance_id:$&#123;spring.application.i</span><br><span class="hljs-string">nstance_id:$&#123;random.value&#125;&#125;&#125;</span><br><span class="hljs-comment"># 自定义实例id为:应用名:ip:port</span><br><span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ipaddress&#125;:$&#123;server.port&#125;</span><br><span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 开启服务注册</span><br><span class="hljs-attr">register:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 开启服务发现</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#2 分钟之后健康检查未通过取消注册</span><br><span class="hljs-attr">health-check-critical-timeout:</span> <span class="hljs-string">2m</span><br><span class="hljs-comment">#consul 健康检查的轮询周期</span><br><span class="hljs-attr">health-check-interval:</span> <span class="hljs-string">10s</span><br><br></code></pre></td></tr></table></figure><ol start="4"><li>Consul服务数据</li></ol><p><img src="/blog/./assets/image-9gec8m7u1xih4kpfghke7am.PNG" alt="服务数据"></p><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Consul</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Consul</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo简介与原理</title>
    <link href="/blog/2020/04/Dubbo%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%8E%9F%E7%90%86.html"/>
    <url>/blog/2020/04/Dubbo%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%8E%9F%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<h2 id="Dubbo架构体系"><a href="#Dubbo架构体系" class="headerlink" title="Dubbo架构体系"></a>Dubbo架构体系</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Dubbo是一个高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无缝集成。同时Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：</p><ol><li>面向接口的远程方法调用。</li><li>智能容错和负载均衡。</li><li>服务自动注册和发现。</li></ol><h3 id="运行架构"><a href="#运行架构" class="headerlink" title="运行架构"></a>运行架构</h3><p><img src="/blog/./assets/image-ofctlzky2dk2e8v8gaq4i6t.PNG" alt="image-ofctlzky2dk2e8v8gaq4i6t"></p><h4 id="节点角色"><a href="#节点角色" class="headerlink" title="节点角色"></a>节点角色</h4><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><h4 id="调用关系"><a href="#调用关系" class="headerlink" title="调用关系"></a>调用关系</h4><ol><li><p>服务容器负责启动，加载，运行服务提供者。</p></li><li><p>服务提供者在启动时，向注册中心注册自己提供的服务。</p></li><li><p>服务消费者在启动时，向注册中心订阅自己所需的服务。</p></li><li><p>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p></li><li><p>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p></li><li><p>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p></li></ol><blockquote><p>dubbo 的特点有连通性、健壮性、伸缩性、以及向未来架构的升级性。</p></blockquote><h3 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h3><p><img src="/blog/./assets/image-3gg2d8fkulhczchlfayf754.PNG" alt="Dubbo调用设计"></p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>图中左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。</li><li>图中从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表层之间的依赖关系，每一层都可以剥离上层被复用，其中，Service 和Config 层为 API，其它各层均为 SPI。</li><li>图中绿色小块的为扩展接口，蓝色小块为实现类，图中只显示用于关联各层的实现类。</li><li>图中蓝色虚线为初始化过程，即启动时组装链，红色实线为方法调用过程，即运行时调时链，紫色三角箭头为继承，可以把子类看作父类的同一个节点，线上的文字为调用的方法</li></ul><h4 id="各层说明"><a href="#各层说明" class="headerlink" title="各层说明"></a>各层说明</h4><ul><li><p>config 配置层</p><p>对外配置接口，以 ServiceConfig ,ReferenceConfig 为中心，可以直接初始化配置类，也可以通过spring 解析配置生成配置类。</p></li><li><p>proxy 服务代理层</p><p>服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton, 以 ServiceProxy 为中心，扩展接口为ProxyFactory。</p></li><li><p>registry 注册中心层</p><p>封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 RegistryFactory , Registry , RegistryService。</p></li><li><p>cluster 路由层</p><p>封装多个提供者的路由及负载均衡，并桥接注册中心，以 Invoker 为中心，扩展接口为 Cluster , Directory ,Router , LoadBalance。</p></li><li><p>monitor 监控层</p><p>RPC 调用次数和调用时间监控，以 Statistics 为中心，扩展接口为 MonitorFactory , Monitor , MonitorService。</p></li><li><p>protocol 远程调用层</p><p>封装 RPC 调用，以 Invocation , Result 为中心，扩展接口为 Protocol , Invoker , Exporter。</p></li><li><p>exchange 信息交换层</p><p>封装请求响应模式，同步转异步，以Request , Response 为中心，扩展接口为 Exchanger ,ExchangeChannel , ExchangeClient , ExchangeServer。</p></li><li><p>transport 网络传输层</p><p>抽象 mina 和 netty 为统一接口，以Message 为中心，扩展接口为 Channel , Transporter , Client ,Server , Codec。</p></li><li><p>serialize 数据序列化层</p><p>可复用的一些工具，扩展接口为Serialization , ObjectInput , ObjectOutput , ThreadPool。</p></li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="源码拉取"><a href="#源码拉取" class="headerlink" title="源码拉取"></a>源码拉取</h4><p>通过以下命令获取最新的dubbo项目源码</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>git clone https://github.<span class="hljs-keyword">com</span>/apache/dubbo.git dubbo<br></code></pre></td></tr></table></figure><p><img src="/blog/./assets/image-a0hfuid4bus35o8pjxxxcgd.PNG" alt="dubbo-2.7.2源码"></p><p>下载源码导入工程后，跳过测试并进行编译。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">[ERROR] Failed to execute goal<br>org.xolstice.maven.plugins:protobuf-maven-<br>plugin: <span class="hljs-number">0.</span> <span class="hljs-number">5.</span> <span class="hljs-number">1</span> :compile (<span class="hljs-keyword">default</span>) on project dubbo-<br>serialization-protobuf: Missing:<br>[ERROR] - ---------<br>[ERROR] <span class="hljs-number">1</span> ) com.google.protobuf:protoc:exe:windows-<br>x <span class="hljs-number">86</span> _ <span class="hljs-number">64</span> : <span class="hljs-number">3.</span> <span class="hljs-number">7.</span> <span class="hljs-number">1</span><br>[ERROR]<br>[ERROR] Try downloading the file manually from the<br>project website.<br>[ERROR]<br>[ERROR] Then, install it using the command:<br>[ERROR] mvn install:install-file -<br>DgroupId=com.google.protobuf - DartifactId=protoc -<br>Dversion= <span class="hljs-number">3.</span> <span class="hljs-number">7.</span> <span class="hljs-number">1</span> - Dclassifier=windows-x <span class="hljs-number">86</span> _ <span class="hljs-number">64</span> -<br>Dpackaging=exe - Dfile=/path/to/file<br>[ERROR]<br>[ERROR] Alternatively, <span class="hljs-keyword">if</span> you host your own<br>repository you can deploy the file there:<br>[ERROR] mvn deploy:deploy-file -<br>DgroupId=com.google.protobuf - DartifactId=protoc -<br>Dversion= <span class="hljs-number">3.</span> <span class="hljs-number">7.</span> <span class="hljs-number">1</span> - Dclassifier=windows-x <span class="hljs-number">86</span> _ <span class="hljs-number">64</span> -<br>Dpackaging=exe - Dfile=/path/to/file - Durl=[url] -<br>DrepositoryId=[id]<br>[ERROR]<br>[ERROR] Path to dependency:<br>[ERROR] <span class="hljs-number">1</span> ) org.apache.dubbo:dubbo-serialization-<br>protobuf:jar: <span class="hljs-number">2.</span> <span class="hljs-number">7.</span> <span class="hljs-number">8</span><br>[ERROR] <span class="hljs-number">2</span> ) com.google.protobuf:protoc:exe:windows-<br>x <span class="hljs-number">86</span> _ <span class="hljs-number">64</span> : <span class="hljs-number">3.</span> <span class="hljs-number">7.</span> <span class="hljs-number">1</span><br>[ERROR]<br>[ERROR] - ---------<br>[ERROR] <span class="hljs-number">1</span> required artifact is missing.<br>[ERROR]<br>[ERROR] <span class="hljs-keyword">for</span> artifact:<br>[ERROR] org.apache.dubbo:dubbo-serialization-<br>protobuf:jar: <span class="hljs-number">2.</span> <span class="hljs-number">7.</span> <span class="hljs-number">8</span><br>[ERROR]<br>[ERROR] from the specified remote repositories:<br>[ERROR] apache.snapshots<br>(https:<span class="hljs-comment">//repository.apache.org/snapshots,</span><br>releases=<span class="hljs-literal">false</span>, snapshots=<span class="hljs-literal">true</span>),<br>[ERROR] alimaven<br>(http:<span class="hljs-comment">//maven.aliyun.com/nexus/content/groups/public/,</span><br>releases=<span class="hljs-literal">true</span>, snapshots=<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>根据报错解决问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mvn install:install-file -DgroupId=com.google.protobuf-DartifactId=protoc -Dversion=<span class="hljs-number">3.7</span><span class="hljs-number">.1</span> -Dclassifier=windows-x86_64 -Dpackaging=exe -Dfile=C:\Users\maojun\test\protoc-<span class="hljs-number">3.7</span><span class="hljs-number">.1</span>-windows-x86_64.exe<br></code></pre></td></tr></table></figure><h4 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h4><p>dubbo源码各个模块的相关作用：</p><p>dd<img src="/blog/./assets/image-ivymjilkeodmg19pyqke383.PNG" alt="源码结构"></p><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h4 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h4><ul><li><p>dubbo-common 公共逻辑模块</p><p>包括 Util 类和通用模型。</p></li><li><p>dubbo-remoting 远程通讯模块</p><p>相当于 Dubbo 协议的实现，如果RPC 用 RMI协议则不需要使用此包。</p></li><li><p>dubbo-rpc 远程调用模块</p><p>抽象各种协议，以及动态代理，只包含一对一的调用，不关心集群的管理。</p></li><li><p>dubbo-cluster 集群模块</p><p>将多个服务提供方伪装为一个提供方，包括：负载均衡, 容错，路由等，集群的地址列表可以是静态配置的，也可以是由注册中心下发。</p></li><li><p>dubbo-registry 注册中心模块</p><p>基于注册中心下发地址的集群方式，以及对各种注册中心的抽象。</p></li><li><p>dubbo-monitor 监控模块</p><p>统计服务调用次数，调用时间的，调用链跟踪的服务。</p></li><li><p>dubbo-config 配置模块</p><p>是 Dubbo 对外的 API，用户通过 Config 使用Dubbo，隐藏 Dubbo 所有细节。</p></li><li><p>dubbo-container 容器模块</p><p>是一个 Standlone 的容器，以简单的Main 加载 Spring 启动，因为服务通常不需要 Tomcat&#x2F;JBoss 等 Web容器的特性，没必要用 Web 容器去加载服务。</p></li></ul><h4 id="环境导入"><a href="#环境导入" class="headerlink" title="环境导入"></a>环境导入</h4><p>导入到IDEA中。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li>安装zookeeper</li><li>修改demo案例，配置zookeeper地址</li><li>启动服务提供者，启动服务消费者</li></ol><h4 id="管理控制台"><a href="#管理控制台" class="headerlink" title="管理控制台"></a>管理控制台</h4><ol><li><a href="https://github.com/apache/dubbo-admin">下载管理控制台</a></li><li>进入源码目录， 进行打包编译</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mvn clean <span class="hljs-keyword">package</span> -Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>构建成功提示：</p><p><img src="/blog/./assets/image-8d61uru53nes6o12oejf5xt.PNG" alt="构建完成"></p><ol start="3"><li>启动后台管理服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> mvn clean <span class="hljs-keyword">package</span> - Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="/blog/./assets/image-exqvt54zjjlud8ngxir9jsl.PNG" alt="启动服务"></p><ol start="4"><li>管理后台</li></ol><p>地址： <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a></p><p>默认账户名和密码都为root，进入管控台， 可以看到所启动的服务端与消费端。</p><p><img src="/blog/./assets/image-rg710jvtsndtjaeusw132fp.PNG" alt="管控台"></p><h3 id="Dubbo实践"><a href="#Dubbo实践" class="headerlink" title="Dubbo实践"></a>Dubbo实践</h3><h4 id="与SpringBoot的整合"><a href="#与SpringBoot的整合" class="headerlink" title="与SpringBoot的整合"></a>与SpringBoot的整合</h4><p>基于Zookeeper实现Dubbo与Spring Boot的集成整合。</p><h5 id="项目POM依赖"><a href="#项目POM依赖" class="headerlink" title="项目POM依赖"></a>项目POM依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo-version</span>&gt;</span> 2. 7. 8 <span class="hljs-tag">&lt;/<span class="hljs-name">dubbo-version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span> 2. 3. 0 .RELEASE&lt;/spring-<br>boot.version&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Spring Boot - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;spring-boot-</span><br><span class="hljs-comment">dependencies&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;spring-boot.version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="hljs-comment">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;!-- Apache Dubbo - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo-dependencies-</span><br><span class="hljs-comment">bom&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;dubbo-version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="hljs-comment">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;dubbo-version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;exclusions&gt;</span><br><span class="hljs-comment">&lt;exclusion&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;spring&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;/exclusion&gt;</span><br><span class="hljs-comment">&lt;exclusion&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;servlet-</span><br><span class="hljs-comment">api&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;/exclusion&gt;</span><br><span class="hljs-comment">&lt;exclusion&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;log 4 j&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;log 4 j&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;/exclusion&gt;</span><br><span class="hljs-comment">&lt;/exclusions&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;/dependencies&gt;</span><br><span class="hljs-comment">&lt;/dependencyManagement&gt;</span><br><span class="hljs-comment">&lt;dependencies&gt;</span><br><span class="hljs-comment">&lt;!-- Dubbo Spring Boot Starter - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo-spring-boot-</span><br><span class="hljs-comment">starter&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;dubbo-version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;!-- Dubbo核心组件 - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;!--Spring Boot 依赖 - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;spring-boot-starter-</span><br><span class="hljs-comment">web&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;spring-boot.version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;!-- Zookeeper客户端框架 - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt; 4. 0. 1 &lt;/version&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;!-- Zookeeper dependencies - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo-dependencies-</span><br><span class="hljs-comment">zookeeper&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;dubbo-version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="hljs-comment">&lt;exclusions&gt;</span><br><span class="hljs-comment">&lt;exclusion&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.slf 4 j&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;slf 4 j-log 4 j 12 &lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;/exclusion&gt;</span><br><span class="hljs-comment">&lt;/exclusions&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;/dependencies&gt;</span><br></code></pre></td></tr></table></figure><p>Dubbo采用2.7.8版本， Spring Boot采用的是2.3.0.RELEASE版本。</p><p>如果依赖下载出现问题， 可以指定具体的仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>apache.snapshots.https<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Apache Development Snapshot<br>Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://repository.apache.org/content/repositories/s<br>napshots<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h5 id="公用RPC接口工程"><a href="#公用RPC接口工程" class="headerlink" title="公用RPC接口工程"></a>公用RPC接口工程</h5><p>为便于客户端与服务端的RPC接口引用， 定义了一个订单服务接口， 用于测试验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderService</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取订单详情</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> orderId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>String <span class="hljs-title function_">getOrder</span><span class="hljs-params">(Long orderId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="生产者POM依赖"><a href="#生产者POM依赖" class="headerlink" title="生产者POM依赖"></a>生产者POM依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Dubbo Spring Boot Starter - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo-spring-boot-</span><br><span class="hljs-comment">starter&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;dubbo-version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;!-- Dubbo 核心依赖 - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;!-- 公用RPC接口依赖 - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;xyz.maojun&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo-spring-</span><br><span class="hljs-comment">interface&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;/dependencies&gt;</span><br></code></pre></td></tr></table></figure><h6 id="RPC服务接口"><a href="#RPC服务接口" class="headerlink" title="RPC服务接口"></a>RPC服务接口</h6><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs wren">@<span class="hljs-title class_">DubboService</span>(<span class="hljs-variable">version</span> <span class="hljs-operator">=</span><br><span class="hljs-string">&quot;$&#123;dubbo.spring.provider.version&#125;&quot;</span>)<br><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-variable">implements</span><br><span class="hljs-title class_">OrderService</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 服务端口</span><br><span class="hljs-comment">*/</span><br>@<span class="hljs-title class_">Value</span>(<span class="hljs-string">&quot;$&#123;server.port&#125;&quot;</span>)<br><span class="hljs-variable">private</span> <span class="hljs-title class_">String</span> <span class="hljs-variable">serverPort</span>;<br>@<span class="hljs-title class_">Value</span>(<span class="hljs-string">&quot;$&#123;dubbo.spring.provider.version&#125;&quot;</span>)<br><span class="hljs-variable">private</span> <span class="hljs-title class_">String</span> <span class="hljs-variable">serviceVersion</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取订单详情</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> orderId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getOrder</span>(<span class="hljs-params">Long</span> <span class="hljs-params">orderId</span>) &#123;<br><span class="hljs-title class_">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;get order detail</span><br><span class="hljs-string">,orderId=&quot;</span><span class="hljs-operator">+</span><span class="hljs-variable">orderId</span> <span class="hljs-operator">+</span><span class="hljs-string">&quot;,serverPort=&quot;</span><span class="hljs-operator">+</span><span class="hljs-variable">serverPort</span><br><span class="hljs-operator">+</span><span class="hljs-string">&quot;,serviceVersion=&quot;</span><span class="hljs-operator">+</span><span class="hljs-variable">serviceVersion</span>;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">result</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">result</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过DubboService注解， 声明为RPC服务，version可以标识具体的版本号， 消费端需匹配保持一致。</p><h6 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server.port=</span> <span class="hljs-number">18081</span><br><span class="hljs-comment"># 应用程序名称</span><br><span class="hljs-string">spring.application.name=dubbo-spring-provider</span><br><span class="hljs-comment"># Dubbo服务扫描路径</span><br><span class="hljs-string">dubbo.scan.base-packages=xyz.maojun</span><br><span class="hljs-comment"># Dubbo 通讯协议</span><br><span class="hljs-string">dubbo.protocol.name=dubbo</span><br><span class="hljs-comment"># Dubbo服务提供的端口， 配置为- 1 ，代表为随机端口 默认</span><br><span class="hljs-number">20880</span><br><span class="hljs-string">dubbo.protocol.port=-</span> <span class="hljs-number">1</span><br><span class="hljs-comment">## Dubbo 注册器配置信息</span><br><span class="hljs-string">dubbo.registry.address=zookeeper://</span> <span class="hljs-attr">127. 0. 0. 1 :</span> <span class="hljs-number">2181</span><br><span class="hljs-string">dubbo.registry.file</span> <span class="hljs-string">=</span> <span class="hljs-string">$&#123;user.home&#125;/dubbo-</span><br><span class="hljs-string">cache/$&#123;spring.application.name&#125;/dubbo.cache</span><br><span class="hljs-string">dubbo.spring.provider.version</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-number">0</span><span class="hljs-string">.</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h6 id="Spring-Boot启动程序"><a href="#Spring-Boot启动程序" class="headerlink" title="Spring Boot启动程序"></a>Spring Boot启动程序</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"># 服务端口<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;xyz.maojun&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DubboSpringProviderApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(DubboSpringProviderApplicatio<br>n.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h5 id="消费者POM依赖"><a href="#消费者POM依赖" class="headerlink" title="消费者POM依赖"></a>消费者POM依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Dubbo Spring Boot Starter - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo-spring-boot-</span><br><span class="hljs-comment">starter&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;dubbo-version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;!-- 公用RPC接口依赖 - -&gt;</span><br><span class="hljs-comment">&lt;dependency&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;xyz.maojun&lt;/groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;dubbo-spring-</span><br><span class="hljs-comment">interface&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="hljs-comment">&lt;/dependency&gt;</span><br><span class="hljs-comment">&lt;/dependencies&gt;</span><br></code></pre></td></tr></table></figure><h6 id="消费端调用"><a href="#消费端调用" class="headerlink" title="消费端调用"></a>消费端调用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span><br>LoggerFactory.getLogger(getClass());<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 订单服务接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@DubboReference(version =&quot;$&#123;dubbo.spring.provider.version&#125;&quot;)</span><br><span class="hljs-keyword">private</span> OrderService orderService;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取订单详情接口</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> orderId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RequestMapping(&quot;/getOrder&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrder</span><span class="hljs-params">(Long orderId)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>result =<br>orderService.getOrder(orderId);<br>&#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>logger.error(e.getMessage(), e);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="-4"><a href="#-4" class="headerlink" title=""></a></h5><h6 id="工程配置-1"><a href="#工程配置-1" class="headerlink" title="工程配置"></a>工程配置</h6><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-attr">server.port</span>= <span class="hljs-string">18084</span><br><span class="hljs-comment">#服务名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">dubbo-spring-consumer</span><br><span class="hljs-comment">#服务版本号</span><br><span class="hljs-attr">dubbo.spring.provider.version</span> = <span class="hljs-string">1. 0. 0</span><br><span class="hljs-comment">#消费端注册器配置信息</span><br><span class="hljs-attr">dubbo.registry.address</span>=<span class="hljs-string">zookeeper:// 127. 0. 0. 1 : 2181</span><br><span class="hljs-attr">dubbo.registry.file</span> = <span class="hljs-string">$&#123;user.home&#125;/dubbo-</span><br><span class="hljs-attr">cache/$&#123;spring.application.name&#125;/dubbo.cache</span><br></code></pre></td></tr></table></figure><h6 id="Spring-Boot启动程序-1"><a href="#Spring-Boot启动程序-1" class="headerlink" title="Spring Boot启动程序"></a>Spring Boot启动程序</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;xyz.maojun&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DubboSpringConsumerApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(DubboSpringConsumerApplicatio<br>n.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="工程调用验证"><a href="#工程调用验证" class="headerlink" title="工程调用验证"></a>工程调用验证</h5><ol><li>启动ZK注册中心</li><li>启动服务端， 运行DubboSpringProviderApplication</li><li>启动消费端， 运行DubboSpringConsumerApplication</li><li>请求获取订单接口， 地址： <a href="http://127.0.0.1:18084/order/getOrder?orderId=1001">http://127.0.0.1:18084/order/getOrder?orderId=1001</a></li></ol><p>调用成功：</p><p><img src="/blog/./assets/image-udh8pihyio84whkpyqspo5b.PNG" alt="调用成功"></p><h3 id="Dubbo高阶配置"><a href="#Dubbo高阶配置" class="headerlink" title="Dubbo高阶配置"></a>Dubbo高阶配置</h3><h4 id="覆盖关系"><a href="#覆盖关系" class="headerlink" title="覆盖关系"></a>覆盖关系</h4><p>官方文档： <a href="https://dubbo.apache.org/zh/docsv2.7/user/configuration/">https://dubbo.apache.org/zh/docsv2.7/user/configuration/</a></p><ol><li><p>通过ProviderConfig配置全局超时（可通过yml配置覆盖）</p></li><li><p>在@DubboService注解上配置接口超时</p></li><li><p>在@DubboService注解上配置接口方法超时</p></li><li><p>在消费方进行配置，查看覆盖情况</p></li></ol><h4 id="覆盖规则"><a href="#覆盖规则" class="headerlink" title="覆盖规则"></a>覆盖规则</h4><p><img src="/blog/./assets/image-03ngyrfq45zdgvrrpsbwuty.PNG" alt="覆盖规则"></p><h4 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h4><ol><li>方法级优先;</li><li>接口级次之;</li><li>全局配置再次之。</li><li>如果级别一样，则消费者优先，生产者次之。</li></ol><h4 id="-5"><a href="#-5" class="headerlink" title=""></a></h4><h4 id="服务端超时"><a href="#服务端超时" class="headerlink" title="服务端超时"></a>服务端超时</h4><p>增加配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DubboCustomConfig</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 服务端</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ProviderConfig <span class="hljs-title function_">registryConfig</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ProviderConfig</span> <span class="hljs-variable">providerConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br><span class="hljs-title class_">ProviderConfig</span>();<br><span class="hljs-comment">// 设定超时时间为 5 S</span><br>providerConfig.setTimeout( <span class="hljs-number">5000</span> );<br><span class="hljs-keyword">return</span> providerConfig;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改服务接口实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取订单详情</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> orderId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrder</span><span class="hljs-params">(Long orderId)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 休眠1.5秒</span><br>Thread.sleep(<span class="hljs-number">1500L</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Get Order Detail, Id: &quot;</span> + orderId +<br><span class="hljs-string">&quot;, serverPort: &quot;</span> + serverPort;<br>    &#125;<br></code></pre></td></tr></table></figure><p>客户端调用验证</p><p>请求地址： <a href="http://127.0.0.1:18084/order/getOrder?orderId=123">http://127.0.0.1:18084/order/getOrder?orderId=123</a></p><p> 服务端全局超时设为 2 秒（不触发超时）， 消费端设定超时时间为 1 秒（触发超时）。</p><p> 修改调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 订单服务接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@DubboReference(version =</span><br><span class="hljs-meta">&quot;$&#123;dubbo.spring.provider.version&#125;&quot;, timeout =</span><br><span class="hljs-meta">1000)</span><br><span class="hljs-keyword">private</span> OrderService orderService;<br></code></pre></td></tr></table></figure><p>调用结果， 触发超时：</p><p><img src="/blog/./assets/image-6deg835f0x11eo2w85t796f.PNG" alt="验证超时"></p><p>表明消费端配置优先。</p><p>服务端全局超时设定为1秒（触发超时）， 消费端去掉超时时间配置。触发超时， 表明服务提供方优先级次之。</p><p><img src="/blog/./assets/image-z8w65atrb412ff8vk8a9pcs.PNG" alt="验证超时"></p><h4 id="属性配置优先级"><a href="#属性配置优先级" class="headerlink" title="属性配置优先级"></a>属性配置优先级</h4><p>优先级规则</p><p><img src="/blog/./assets/image-w23jrl0ykmrf8wpqf7xv4ok.PNG" alt="优先级规则"></p><p>优先级从高到低：</p><ul><li>JVM -D 参数；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-Ddubbo.protocol.port=<span class="hljs-number">20881</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>XML（application.yml&#x2F;application.properties）配置会重写dubbo.properties 中的配置。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dubbo:</span><br><span class="hljs-attr">protocol:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">dubbo</span> <span class="hljs-comment"># 通讯协议</span><br><span class="hljs-comment">#port: 20880 # dubbo服务提供方的端口，该值</span><br><span class="hljs-string">是默认值</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">20882</span><br></code></pre></td></tr></table></figure><ul><li>Properties默认配置（dubbo.properties），仅仅作用于以上两者没有配置时，一般配置全局公共配置。</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">dubbo.protocol.port</span>=<span class="hljs-string">20883</span><br></code></pre></td></tr></table></figure><h4 id="-6"><a href="#-6" class="headerlink" title=""></a></h4><h3 id="重试与容错处理机制"><a href="#重试与容错处理机制" class="headerlink" title="重试与容错处理机制"></a>重试与容错处理机制</h3><h4 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h4><ul><li>Failfast Cluster</li></ul><p>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</p><ul><li>Failsafe Cluster</li></ul><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p><ul><li>Failback Cluster</li></ul><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p><ul><li>Forking Cluster</li></ul><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过forks&#x3D;”2” 来设置最大并行数。</p><ul><li>Broadcast Cluster</li></ul><p>广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p><p>调整客户端重试次数,重试次数设定为3次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单服务接口</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-meta">@DubboReference(version =</span><br><span class="hljs-meta">&quot;$&#123;dubbo.spring.provider.version&#125;&quot;,retries = 3)</span><br> <span class="hljs-keyword">private</span> OrderService orderService;<br></code></pre></td></tr></table></figure><p> 修改服务端超时时间模拟超时， 让客户端触发重试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务端全局配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> ProviderConfig <span class="hljs-title function_">registryConfig</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">ProviderConfig</span> <span class="hljs-variable">providerConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br><span class="hljs-title class_">ProviderConfig</span>();<br> providerConfig.setTimeout(<span class="hljs-number">1000</span>);<br> <span class="hljs-keyword">return</span> providerConfig;<br> &#125;<br></code></pre></td></tr></table></figure><p>客户端调用（单个服务）</p><p><a href="http://127.0.0.1:18084/order/getOrder?orderId=123">http://127.0.0.1:18084/order/getOrder?orderId=123</a></p><p>查看服务端控制台，可以看到触发重试机制，加上第一次的调用和3次重试， 共4次。</p><p><img src="/blog/./assets/image-k7kwuhcckwpijc5yalcee86.PNG" alt="超时重试"></p><p>允许多个实例运行， 开启多个服务，再次访问。</p><p><img src="/blog/./assets/image-4ueexpcob5sw60ixk4z137o.PNG" alt="集群重试"></p><p>第一个服务实例，访问两次， 其他每个服务访问一次。</p><h3 id="多版本控制"><a href="#多版本控制" class="headerlink" title="多版本控制"></a>多版本控制</h3><p>启动三个服务端。第一个服务端版本为1.0.0， 第二、三个服务端版本分别为：2.0.0 和3.0.0<br>主要是修改application.properties配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#服务版本号</span><br><span class="hljs-attr">dubbo.spring.provider.version</span> = <span class="hljs-string">2.0.0</span><br></code></pre></td></tr></table></figure><p>启动三个服务提供者，通过 -Ddubbo.spring.provider.version &#x3D;2.0.0 -Dserver.port&#x3D;18082 来启动三个相关的端口不能重复。</p><p> 消费端指定版本号。同样修改application.properties配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#服务版本号</span><br><span class="hljs-attr">dubbo.spring.provider.version</span> = <span class="hljs-string">2.0.0</span><br></code></pre></td></tr></table></figure><p>仍然通过 -Ddubbo.spring.provider.version &#x3D; 2.0.0 来调用不同版本的服务测试时，注释掉超时的代码</p><p>仍是采用超时配置， 通过重试测试验证测试验证结果,请求只会访问至版本号为2.0.0的服务节点上面。</p><h3 id="本地存根调用"><a href="#本地存根调用" class="headerlink" title="本地存根调用"></a>本地存根调用</h3><p><img src="/blog/./assets/image-bydm1ddiojjppwtu69hzuy0.PNG" alt="实现流程"></p><p>把 Stub 暴露给用户，Stub 可以决定要不要去调 Proxy。</p><p> 客户端存根实现，增加service接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceStub</span> <span class="hljs-keyword">implements</span><br><span class="hljs-title class_">OrderService</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> OrderService orderService;<br><span class="hljs-comment">// 构造函数传入真正的远程代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderServiceStub</span><span class="hljs-params">(OrderService</span><br><span class="hljs-params">orderService)</span>&#123;<br><span class="hljs-built_in">this</span>.orderService = orderService;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取订单详情</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> orderId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrder</span><span class="hljs-params">(Long orderId)</span>&#123;<br><span class="hljs-comment">// 在客户端执行, 预先验证参数是否合法，等等</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != orderId) &#123;<br><span class="hljs-keyword">return</span><br>orderService.getOrder(orderId);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;参数校验错误！&quot;</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">//容错处理</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;出现错误：&quot;</span> + e.getMessage();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改客户端调用配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 订单服务接口</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@DubboReference(version =</span><br><span class="hljs-meta">&quot;$&#123;dubbo.spring.provider.version&#125;&quot;,retries = 3, stub</span><br><span class="hljs-meta">=</span><br><span class="hljs-meta">&quot;com.itheima.dubbo.spring.consumer.service.OrderServ</span><br><span class="hljs-meta">iceStub&quot;)</span><br><span class="hljs-keyword">private</span> OrderService orderService;<br></code></pre></td></tr></table></figure><p>stub要配置存根接口的完整路径。</p><p>访问不带参数的地址： <a href="http://127.0.0.1:18084/order/getOrder">http://127.0.0.1:18084/order/getOrder</a></p><p><img src="/blog/./assets/image-efmckq9g1rrri3d9y2yapql.PNG" alt="存根调用"></p><p>会进入存根接口的处理逻辑， 提示校验异常。</p><h3 id="负载均衡机制"><a href="#负载均衡机制" class="headerlink" title="负载均衡机制"></a>负载均衡机制</h3><p>默认负载策略</p><p>Dubbo默认采用的是随机负载策略。</p><p>开启三个服务节点，通过消费端访问验证： <a href="http://127.0.0.1:18084/order/getOrder?orderId=123">http://127.0.0.1:18084/order/getOrder?orderId=123</a></p><p>通过控制后台日志输出， 可以看到每个服务节点呈现不规则的调用。</p><p>Dubbo 支持的负载均衡策略，可用参看源码： AbstractLoadBalance</p><ul><li>Random LoadBalance：默认</li></ul><p>随机，按权重设置随机概率。</p><p>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p><ul><li>RoundRobin LoadBalance</li></ul><p>加权轮询负载均衡，按公约后的权重设置轮询比率。存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</p><ul><li>LeastActive LoadBalance</li></ul><p>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。活跃数其实就是在当前这个服务调用者中当前这个时刻 某个invoker（某个服务提供者的某个接口）某个方法的调用并发数，在调用之前+1 调用之后-1的一个计数器，如果出现多个活跃数相等invoker的时候使用随机算法来选取一个</p><ul><li>ConsistentHash LoadBalance</li></ul><p>一致性 Hash，相同参数的请求总是发到同一提供者。当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</p><blockquote><p>一致性Hash负载均衡涉及到两个主要的配置参数为</p><p><strong>hash.arguments</strong> 与<strong>hash.nodes</strong>。</p><ol><li><strong>hash.arguments</strong> ： 当进行调用时候根据调用方法的哪几个参数生成key，并根据key来通过一致性hash算法来选择调用结点。</li><li><strong>hash.nodes</strong>： 为结点的副本数</li></ol></blockquote><ul><li>ShortestResponseLoadBalance</li></ul><p>最短响应时间负载均衡<br>从多个服务提供者中选择出调用成功的且响应时间最短的服务提供者，由于满足这样条件的服务提供者有可能有多个。所以当选择出多个服务提供者后要根据他们的权重做分析，如果权重一样，则随机。</p><p>源码实现：</p><p>org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance</p><p> Dubbo提供了四种实现：</p><p><img src="/blog/./assets/image-wog3j8ay7sm7xrsj6smyk16.PNG" alt="四种实现"></p><p>四种配置方式：</p><p>优先级从下至上：</p><ul><li>服务端的服务级别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dubbo:service interface=<span class="hljs-string">&quot;...&quot;</span><br>loadbalance=<span class="hljs-string">&quot;roundrobin&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><ul><li>客户端的服务级别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dubbo:reference interface=<span class="hljs-string">&quot;...&quot;</span><br>loadbalance=<span class="hljs-string">&quot;roundrobin&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注意：服务提供者配置后最终也只是同步到消费者端。故一般在消费端配置</p></blockquote><ul><li>服务端方法级别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dubbo:service interface=<span class="hljs-string">&quot;...&quot;</span>&gt;<br>&lt;dubbo:method name=<span class="hljs-string">&quot;...&quot;</span><br>loadbalance=<span class="hljs-string">&quot;roundrobin&quot;</span>/&gt;<br>&lt;/dubbo:service&gt;<br></code></pre></td></tr></table></figure><ul><li>客户端方法级别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dubbo:reference interface=<span class="hljs-string">&quot;...&quot;</span>&gt;<br> &lt;dubbo:method name=<span class="hljs-string">&quot;...&quot;</span><br>loadbalance=<span class="hljs-string">&quot;roundrobin&quot;</span>/&gt;<br> &lt;/dubbo:reference&gt;<br></code></pre></td></tr></table></figure><p>调用验证</p><p>修改客户端的负载策略， 改为轮询策略：</p><blockquote><p>注意很多配置都有三个级别，针对方法的，针对接口的，全局的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DubboReference(version =</span><br><span class="hljs-meta">&quot;$&#123;dubbo.spring.provider.version&#125;&quot;,retries = 3,</span><br><span class="hljs-meta">2 loadbalance = &quot;roundrobin&quot;,</span><br><span class="hljs-meta">3 stub =</span><br><span class="hljs-meta">&quot;xyz.maojun.dubbo.spring.consumer.service.OrderServiceStub&quot;)</span><br></code></pre></td></tr></table></figure><p>开启三个服务节点， 进行访问验证： <a href="http://127.0.0.1:18084/order/g">http://127.0.0.1:18084/order/g</a></p><p>etOrder?orderId&#x3D;123</p><p>会依次轮询进行调用。</p><p> 注意：测试时将服务提供者的版本号都调成一致（1.0.0），超时配置注</p><p>释掉！</p><p>动态权重调整验证</p><p>管理后台地址： <a href="http://127.0.0.1:8080/#">http://127.0.0.1:8080/#</a></p><p>通过管理后台修改服务的权重配置：</p><p><img src="/blog/./assets/image-uge7f3cfqhp7omwtdzrau8r.PNG" alt="管理后台配置权重"></p><p>将两台节点的权重降低至20：</p><p><img src="/blog/./assets/image-0nainutsgxbd1b21ysg0tcm.PNG" alt="权重规则"></p><p>调整后可以看到权重配置已经生效：</p><p><img src="/blog/./assets/image-xu4fu6stfeanc3e0eynsydb.PNG" alt="查看权重"></p><p>通过消费者接口访问， 会发现第一台权重较大的节点， 访问次数会明显增多。</p><h3 id="服务降级运用"><a href="#服务降级运用" class="headerlink" title="服务降级运用"></a>服务降级运用</h3><p>服务动态禁用</p><p>启动单个服务节点，进入Dubbo Admin， 创建动态配置规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">configVersion:</span> <span class="hljs-string">v2.7</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">configs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">side:</span> <span class="hljs-string">provider</span><br><span class="hljs-attr">addresses:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;0.0.0.0:20880&#x27;</span><br><span class="hljs-attr">parameters:</span><br><span class="hljs-attr">timeout:</span> <span class="hljs-number">3000</span><br><span class="hljs-attr">disabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>将disabled属性设为true， 服务禁用， 可以错误提示</p><p><img src="/blog/./assets/image-ap7lali9xsuwd8v8iayp9ns.PNG" alt="服务禁用"></p><p>将disabled属性改为false，则恢复正常访问。</p><p><img src="/blog/./assets/image-mu14jewsnvpux223sq7hgxm.PNG" alt="服务启用"></p><p> 服务降级，配置规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RegistryFactory</span> <span class="hljs-variable">registryFactory</span> <span class="hljs-operator">=</span>ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();<br><span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span>registryFactory.getRegistry(URL.valueOf(<span class="hljs-string">&quot;zookeeper://10.20.153.10:2181&quot;</span>));<br>registry.register(URL.valueOf(<span class="hljs-string">&quot;override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null&quot;</span>));<br></code></pre></td></tr></table></figure><p>mock&#x3D;force:return+null 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</p><p>还可以改为 mock&#x3D;fail:return+null 表示消费方对该服务的方法调用在失败后，再返回 null值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。</p><p>降级测试（force方式）进入Dubbo Admin进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">configVersion:</span> <span class="hljs-string">v2.7</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">configs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">side:</span> <span class="hljs-string">consumer</span><br><span class="hljs-attr">addresses:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">parameters:</span><br><span class="hljs-attr">timeout:</span> <span class="hljs-number">3000</span><br><span class="hljs-attr">mock:</span> <span class="hljs-string">&#x27;force:return null&#x27;</span><br></code></pre></td></tr></table></figure><p>客户端调用， 会直接屏蔽， 并且服务端控制台不会有任何调用记录：</p><p><img src="/blog/./assets/image-rxl2doctkav830fp84p54ai.PNG" alt="返回null"></p><p>降级测试（fail方式）进入Dubbo Admin配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">configVersion:</span> <span class="hljs-string">v2.7</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">configs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">side:</span> <span class="hljs-string">consumer</span><br><span class="hljs-attr">addresses:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">parameters:</span><br><span class="hljs-attr">timeout:</span> <span class="hljs-number">1000</span><br><span class="hljs-attr">mock:</span> <span class="hljs-string">&#x27;fail:return null&#x27;</span><br></code></pre></td></tr></table></figure><p>这里为了触发调用异常， 超时时间缩短为1秒。</p><p>注意这里的超时时间可能不会起作用，最终的超时时间还是得看项目中配置，故在服务提供方将线程休眠时间延长，造成调用超时。客户端调用， 会出现降级显示为空,同时服务端会有调用记录显示（请求会进入服务端，但由于超时， 调用是失败）：</p><p><img src="/blog/./assets/image-i59ctmpgtl1warig85mwupa.PNG" alt="调用失败"></p><h3 id="并发与连接控制"><a href="#并发与连接控制" class="headerlink" title="并发与连接控制"></a>并发与连接控制</h3><p>实际运用， 会碰到高并发与峰值场景， Dubbo是可以做到并发与连接数控制。可使用jmeter进行测试。</p><p><strong>并发数控制</strong></p><ol><li><p>服务端控制</p><p>服务级别</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span> <span class="hljs-attr">executes</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>服务器端并发执行（或占用线程池线程数）不能超过 10 个。</p><p>方法级别</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span></span><br><span class="hljs-tag"><span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sayHello&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">executes</span>=<span class="hljs-string">&quot;3&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:service</span>&gt;</span><br></code></pre></td></tr></table></figure><p>限制具体的方法，服务器端并发执行（或占用线程池线程数）</p><p>不能超过3 个。</p></li><li><p>客户端控制</p></li></ol><p>调用的服务控制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span></span><br><span class="hljs-tag"><span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span> <span class="hljs-attr">actives</span>=<span class="hljs-string">&quot;10&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><p>每客户端并发执行（或占用连接的请求数）不能超过 10 个。</p><p>调用的服务方法控制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span></span><br><span class="hljs-tag"><span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span>&gt;</span><br>2 <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sayHello&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">actives</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br>3 <span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:service</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：dubbo:reference比dubbo:service优先。</p></blockquote><ol start="3"><li>客户端负载配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">loadbalance</span>=<span class="hljs-string">&quot;leastactive&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>负载策略为最小连接数时， Loadbalance 会调用并发数最小的Provider。</p><p>连接数控制</p><ol><li>服务端连接控制</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:provider</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">accepts</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>限制服务器端接受的连接不能超过 10 个</p><ol start="2"><li>客户端连接控制</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">connections</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>限制客户端服务使用连接不能超过 10 个</p><blockquote><p>注意：如果 dubbo:service 和 dubbo:reference 都配了 connections，dubbo:reference 优先。</p></blockquote><p>（完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Dubbo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZooKeeper简介与原理</title>
    <link href="/blog/2020/03/ZooKeeper%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%8E%9F%E7%90%86.html"/>
    <url>/blog/2020/03/ZooKeeper%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%8E%9F%E7%90%86.html</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ZooKeeper 是 Apache 软件基金会的一个软件项目，它为大型分布式计算提供开源的分布式配置服务、同步服务和命名注册 。 </p><p>ZooKeeper 的架构通过冗余服务实现高可用性(CP)。 </p><blockquote><p>最终一致性，通过Zxid保证。</p></blockquote><p>ZooKeeper 的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。 </p><p>一个典型的分布式数据一致性的解决方案，分布式应用程序可以基于它实现诸如数据发布&#x2F;订阅、负载均衡、命名服务、分布式协调&#x2F;通知、集群管理、Master 选举、分布式锁和分布式队列等功能 。</p><p><img src="/blog/./assets/image-yz8dzef528puoo0yk8fg90v.PNG" alt="ZooKeeper介绍"></p><p>分布式协调服务:主要解决分布式应用中经常遇到的数据管理问题 </p><p>ZooKeeper本质是小型的文件存储系统+监听机制的功能。</p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>ZooKeeper本身是一个树形目录服务(名称空间)，非常类似于标准文件系统(树形层次结构)，key-value 的形式存储。名 称 key 由斜线&#x2F;分割的一系列路径元素，ZooKeeper 名称空间中的每个节点都是由一个路径来标识的。 </p><p><img src="/blog/./assets/image-ul3p5wwikfvjxtpwlhich8b.PNG" alt="znode树形结构"></p><ul><li>每个路径下的节点key(完整路径，名称)是唯一的，即同一级节 点 key 名称是唯一的 </li><li>每个节点中存储了节点value和对应的状态属性(多个)</li></ul><blockquote><p>每个znode存储的数据大小至多1MB，所以适合用来做配置文件信息、状态信息存储</p></blockquote><p>znode由3部分组成: </p><ol><li>data </li><li>stat:状态信息:版本，权限，事务id…</li><li>子节点列表</li></ol><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>PERSISTENT</td><td>持久节点，默认</td></tr><tr><td>PERSISTENT SEQUENTIAL</td><td>持久顺序节点，创建时ZooKeeper 会在路径上加上序号作为后缀，非常适合用于分布式锁、分布式选举等场景，创建时添加 -s 参数，如图: <img src="/blog/./assets/image-jo52kummdo0974ht0v6uzc8.PNG" alt="image-jo52kummdo0974ht0v6uzc8"></td></tr><tr><td>EPHEMERAL</td><td>临时节点(不可在拥有子节点)，跟连接会话绑定，临时节点会在客户端会话断开后由zk服务端自动删除。适用于心跳，服务发现等场景，创建时添加-e参数</td></tr><tr><td>EPHEMERAL SEQUENTIAL</td><td>临时顺序节点(不可在拥有子节点)，与持久顺序节点类似，不同之处在于EPHEMERAL_SEQUENTIAL是临时的，会在会话断开后删除，创建时添加 -e -s 参数</td></tr><tr><td>CONTAINER</td><td>容器节点，当子节点都被删除后，Container 也随即删除，创建时添加 -c 参数</td></tr><tr><td>PERSISTENT WITH_TTL</td><td>TTL节点，客户端断开连接后不会自动删除Znode，如果该Znode没有子Znode且在给定TTL时间内无修改，该Znode将会被删除;单位是毫秒;创建时添加 -t 参数</td></tr></tbody></table><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>描述</th><th>用法示例</th><th>说明</th></tr></thead><tbody><tr><td>ls</td><td>查看某个路径下目录列表</td><td>ls [-s] [-w] [-R] path</td><td>path：代表路径，完整路径<br/>-s：返回状态信息<br/>-w：监听节点变化<br/>-R:递归查看某路径下目录列表</td></tr><tr><td>create</td><td>创建节点并赋值</td><td>create [-s] [-e] [-c] [-t ttl] path [data] [acl]</td><td>[-s] [-e]：-s 和 -e 都是可选的，-s 代表顺序节点， -e 代表临<br/>时节点，注意其中 -s 和 -e 可以同时使用的，并且临时节点不<br/>能再创建子节点<br/>path：指定要创建节点的路径，比如 &#x2F;runoob<br/>data：要在此节点存储的数据<br/>acl：访问权限相关，默认是 world，相当于全世界都能访问</td></tr><tr><td>set</td><td>修改节点存储的数据</td><td>set [-s] [-v version] path data</td><td>path：节点路径。<br/>data：需要存储的数据。<br/>[version]：可选项，版本号(可用作乐观锁)</td></tr><tr><td>get</td><td>获取节点数据和状态信息</td><td>get [-s] [-w] path</td><td>-s：返回结果带上状态信息<br/>-w:返回数据并对对节点进行事件监听</td></tr><tr><td>stat</td><td>查看节点状态信息</td><td>stat [-w] path</td><td>path：代表路径<br/>-w:对节点进行事件监听</td></tr><tr><td>delete &#x2F;deleteall</td><td>删除某节点</td><td>delete [-v version] path<br/>deleteall path [-b batch size]</td><td>如果某节点不为空，则不能用delete命令删除</td></tr></tbody></table><h3 id="Znode结构详解"><a href="#Znode结构详解" class="headerlink" title="Znode结构详解"></a>Znode结构详解</h3><table><thead><tr><th>状态属性</th><th>描述</th></tr></thead><tbody><tr><td>cZxid</td><td>创建节点时的事务ID</td></tr><tr><td>ctime</td><td>创建节点时的时间</td></tr><tr><td>mZxid</td><td>最后修改节点时的事务ID</td></tr><tr><td>mtime</td><td>最后修改节点时的时间</td></tr><tr><td>pZxid</td><td>表示该节点的子节点列表最后一次修改的事务ID,添加子节点或删除子节点就会影响子节点列表，但是修改子节点的数据内容则不影响该ID(注意，只有子节点列表 变更了才会变更pzxid,子节点内容变更不会影响pzxid)</td></tr><tr><td>cversion</td><td>子节点版本号，子节点每次修改版本号加1</td></tr><tr><td>dataversion</td><td>数据版本号，数据每次修改该版本号加1</td></tr><tr><td>aclversion</td><td>权限版本号，权限每次修改该版本号加1</td></tr><tr><td>ephemeralOwner</td><td>创建该临时节点的会话的sessionID。  (<strong>如果该节点是持久节点，那么这个属性值为0)</strong></td></tr><tr><td>dataLength</td><td>该节点的数据长度</td></tr><tr><td>numChildren</td><td>该节点拥有子节点的数量(只统计直接子节点的数量)</td></tr></tbody></table><h2 id="Java客户端"><a href="#Java客户端" class="headerlink" title="Java客户端"></a>Java客户端</h2><h3 id="ZooKeeper（不推荐）"><a href="#ZooKeeper（不推荐）" class="headerlink" title="ZooKeeper（不推荐）"></a>ZooKeeper（不推荐）</h3><p>原生API 不支持session超时重连，没有解决watch注册一次就失效的问题，不支持递归操作… </p><h3 id="zkClient"><a href="#zkClient" class="headerlink" title="zkClient"></a>zkClient</h3><p>不支持一些场景（不如需要自己写分布式锁）</p><h3 id="Curator"><a href="#Curator" class="headerlink" title="Curator"></a>Curator</h3><p>提供fluent编程风格，提供了一些应用场景(分布式锁)</p><p><img src="/blog/./assets/image-1ym0vdj4qaffu5bmvzpat51.PNG" alt="curator"></p><h2 id="集群策略"><a href="#集群策略" class="headerlink" title="集群策略"></a>集群策略</h2><p>ZooKeeper 集群节点个数推荐配置奇数个。</p><h3 id="容错率"><a href="#容错率" class="headerlink" title="容错率"></a>容错率</h3><p>需要保证集群能够有半数进行投票</p><ul><li>2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉，但是相对于 单节点服务器，2台服务器还有两个单点故障，所以直接排除了。</li><li>3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉。</li><li>4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉。</li><li>5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉。</li></ul><h3 id="防脑裂"><a href="#防脑裂" class="headerlink" title="防脑裂"></a>防脑裂</h3><p>脑裂集群的脑裂通常是发生在节点之间通信不可达的情况下，集群会分裂成不同的小集群，小集群各自选出自己的leader节点，导致原有的集群出现多个leader节点的情况，这就是脑裂。</p><ul><li>3台服务器，投票选举半数为1.5，一台服务裂开，和另外两台服务器无法通行，这时候2台服务器的集群（2票大于半数1.5票），所以可以选举出leader，而 1 台服务器的集群无法选举。</li><li>4台服务器，投票选举半数为2，可以分成 1,3两个集群或者2,2两个集群，对于 1,3集群，3集群可以选举；对于2,2集群，则不能选择，造成没有leader节点。</li><li>5台服务器，投票选举半数为2.5，可以分成1,4两个集群，或者2,3两集群，这两个集群分别都只能选举一个集群，满足ZooKeeper集群搭建数目。</li></ul><p>以上分析，我们从容错率以及防止脑裂两方面说明了3台服务器是搭建集群的最少数目，4台发生脑裂时会造成没有leader节点的错误</p><h2 id="选举策略"><a href="#选举策略" class="headerlink" title="选举策略"></a>选举策略</h2><h3 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h3><p><strong>Paxos</strong>算法是基于消息传递且具有高度容错特性的一致性算法，是目前公认的解决分布式一致性问题最有效的算法之一，其解决的问题就是在分布式系统中如何就某个值（决议）达成一致，paxos是一个分布式选举算法。</p><p>该算法定义了三种角色</p><ul><li>Proposer：提案(决议)发起者</li><li>Acceptor：提案接收者，可同意或不同意</li><li>Learners：虽然不同意提案，但也只能被动接收学习；或者是后来的，只能被动接受</li></ul><p>提案遵循少数服从多数的原则，过半原则。</p><p><img src="/blog/./assets/image-20240331223712515.png" alt="Paxos"></p><h3 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h3><p>ZooKeeper使用的是ZAB协议作为数据一致性的算法， ZAB（ZooKeeper Atomic Broadcast ） 全称为：原子消息广播协议。在Paxos算法基础上进行了扩展改造而来的，ZAB协议设计了支持原子广播、崩溃恢复，ZAB协议保证Leader广播的变更序列被顺序的处理。</p><p>四种状态，其中三种跟选举有关</p><ul><li><p>LOOKING：系统刚启动时或者Leader崩溃后正处于选举状态</p></li><li><p>FOLLOWING：Follower节点所处的状态，同步leader状态，参与投票</p></li><li><p>LEADING：Leader所处状态</p></li><li><p>OBSERVING，观察状态,同步leader状态，不参与投票</p></li></ul><p>选举时也是半数以上通过才算通过。</p><p><img src="/blog/./assets/image-ewm2gwjmmzzf1ko832yqo3z.PNG" alt="选举策略源码"></p><h2 id="数据读写"><a href="#数据读写" class="headerlink" title="数据读写"></a>数据读写</h2><h3 id="读请求"><a href="#读请求" class="headerlink" title="读请求"></a>读请求</h3><p>当Client向ZooKeeper发出读请求时，无论是Leader还是Follower，都直接返回查询结果。</p><p><img src="/blog/./assets/image-1wzkjowkzmmqcy3j5z8aw5c.PNG" alt="读请求"></p><h3 id="Leader写请求"><a href="#Leader写请求" class="headerlink" title="Leader写请求"></a>Leader写请求</h3><p>Client向Leader发出写请求，Leader将数据写入到本节点，并将数据发送到所有的Follower节点，等待<br>Follower节点返回，当Leader接收到一半以上节点(包含自己)返回写成功的信息之后，返回写入成功消息给client。</p><p><img src="/blog/./assets/image-uagebw4oi1xhvunuxbu5wv7.PNG" alt="leader写请求"></p><h3 id="follow写请求"><a href="#follow写请求" class="headerlink" title="follow写请求"></a>follow写请求</h3><p>Client向Follower发出写请求,Follower节点将请求转发给Leader,Leader将数据写入到本节点，并将数据发送到所有的Follower节点,等待Follower节点返回,当Leader接收到一半以上节点(包含自己)返回写成功的信息之后，返回写入成功消息给原来的Follower,原来的Follower返回写入成功消息给Client。</p><p><img src="/blog/./assets/image-mpt2jgq8fcmgz1z49gj6t00.PNG" alt="follow写请求"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>分布式锁，指在分布式环境下，保护跨进程、跨主机、跨网络的共享资源，实现互斥访问，保证一致性；在zk中，锁就是一个数据节点。</p><ul><li>普通实现</li></ul><p>​注册临时节点，谁注册成功谁获取锁，其他监听该节点的删除事件，一旦被删除，通知其他客户端，再次重复该流程；此为最简单的实现，但存在惊群效应问题。</p><blockquote><p>惊群效应:ZooKeeper分布式锁场景中的羊群效应指的是所有的客户端都尝试对一个临时节点去加锁，当一个锁被占有的时候，其他的客户端都会监听这个临时节点。一旦锁被释放，ZooKeeper反向通知添加监听的客户端，然后大量的客户端都尝试去对同一个临时节点创建锁，最后也只有一个客户端能获得锁，但是大量的请求造成了很大的网络开销，加重了网络的负载，影响ZooKeeper的性能。</p></blockquote><ul><li><p>优化实现</p><p>所有服务要获取锁时都去ZooKeeper中注册一个临时顺序节点，并将基本信息写入临时节点 。</p><p>所有服务获取节点列表并判断自己的节点是否是最小的那个，谁最小谁就获取了 锁 。</p><p>未获取锁的客户端添加对前一个节点删除事件的监听 。</p><p>锁释放&#x2F;持有锁的客户端宕机后，节点被删除 。</p><p>下一个节点的客户端收到通知，重复上述流程。</p><p><img src="/blog/./assets/image-sshlbgrqu3bnrm4vgs4vihk.PNG" alt="临时顺序节点"></p></li></ul><h4 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h4><p>又称读锁。如果事务T1对数据对象O1加上了共享锁，那么当前事务只能对O1进行读取操作，其他事务也只能对这个数据对象加共享锁，直到该数据对象上的所有共享锁都被释放。</p><h4 id="排它锁"><a href="#排它锁" class="headerlink" title="排它锁"></a>排它锁</h4><p>又称写锁或独占锁。如果事务T1对数据对象O1加上了排他锁，那么在整个加锁期间，只允许事务T1对O1进行读取或更新操作，其他任务事务都不能对这个数据对象进行任何操作，直到T1释放了排他锁。</p><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>ZooKeeper可以将临时有序节点分为读锁节点和写锁节点 </p><ul><li>当操作是读请求，也就是要获取共享锁，如果没有比自己更小的节点，或比自己小的节点都是读请求，则可以获取到读锁。 若比自己小的节点中有写请求，则当前客户端无法获取到读锁，只能等待前面的写请求完成。 </li><li>如果操作是写请求，也就是要获取独占锁，如果没有比自己更小的节点，则表示当前客户端可以直接获取到写锁，对数据进行修改。 如果发现有比自己更小的节点，无论是读操作还是写操作，当前客户端都无法获取到写锁，等待前面所有的操作完成。</li></ul><p><img src="/blog/./assets/image-1osbsxakddusbnlnb0f5qtk.PNG" alt="读写分离"></p><h4 id="Curator锁实现"><a href="#Curator锁实现" class="headerlink" title="Curator锁实现"></a>Curator锁实现</h4><p><img src="/blog/./assets/image-z826nbt7109likaekz6yn8z.PNG" alt="curator锁实现"></p><ul><li>InterProcessMutex：分布式可重入排它锁（可重入可以借助LocalMap存计数器）</li><li>InterProcessSemaphoreMutex：分布式排它锁</li><li>InterProcessMultiLock：将多个锁作为单个实体管理的容器</li><li>InterProcessReadWriteLock：分布式读写锁</li></ul><h3 id="分布式队列"><a href="#分布式队列" class="headerlink" title="分布式队列"></a>分布式队列</h3><h3 id="数据发布订阅"><a href="#数据发布订阅" class="headerlink" title="数据发布订阅"></a>数据发布订阅</h3><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h3 id="分布式命名服务"><a href="#分布式命名服务" class="headerlink" title="分布式命名服务"></a>分布式命名服务</h3><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>ZooKeeper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ZooKeeper</tag>
      
      <tag>分布式</tag>
      
      <tag>注册中心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网架构发展与演变过程</title>
    <link href="/blog/2020/03/%E4%BA%92%E8%81%94%E7%BD%91%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95%E4%B8%8E%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B.html"/>
    <url>/blog/2020/03/%E4%BA%92%E8%81%94%E7%BD%91%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95%E4%B8%8E%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B.html</url>
    
    <content type="html"><![CDATA[<h2 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h2><h3 id="单体模式"><a href="#单体模式" class="headerlink" title="单体模式"></a>单体模式</h3><p>早期系统多以单体业务为主，逐个业务线各自扩张。</p><p>系统也多呈现为多个mvc独立运行状态。</p><p>以电商为例，可能按B2B，B2C，C2C不断扩张，每个业务一套系统，每个系统一个维护团队。</p><p><img src="/blog/./assets/image-x2jg6ndr89044xfxdi.PNG" alt="单体架构"></p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>代理层设置不同的二级域名，如b2b.example.com，b2c.example.com，分发给不同的服务器。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>粒度较粗：纯以业务为导向，往往形成业务团队各自为战，新业务线出现时疯狂扩张。</li><li>重复开发：相同功能可能在不同业务的项目中被重复开发，比如短信发送、支付、财务统计。</li><li>资源浪费</li><li>数据孤岛</li></ul><h3 id="中台战略"><a href="#中台战略" class="headerlink" title="中台战略"></a>中台战略</h3><p>特点就是共享。中台需要根据业务来决定，不能未了中台化而做中台。</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>中台在 2015 由阿里提出，其实是阿里共享业务技术部的成型过程。</p><p>中台是一种企业架构而不是单纯的技术层面，目前几乎各大电商都进行着中台化的建设。</p><p>中台不是什么新奇东西，实际上是“共享“理念在业务、系统、组织架构上的一种落地与实施。</p><p>关键词：共享、节约成本、协作。</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>单体业务模式带来很多问题：</p><ul><li><p>技术架构上：</p><ul><li><p>有些相同功能，各个团队重复建设和维护带来的重复投资。</p></li><li><p>业务系统间的集成和协作成本高昂。</p></li><li><p>不利于基础性业务的沉淀和持续发展。</p></li></ul></li><li><p>组织架构上：</p><ul><li>部门在单体模式下往往每个项目一个团队。团队跟随项目疯狂扩展，利用率低。</li></ul></li><li><p>中台类比之下：</p><ul><li><p>中台模式下，基础业务也下沉到技术部门，甚至通过技术反推业务正向发展。</p></li><li><p>下层业务，变化不大的业务持续沉淀，接口像滚雪球一样越来越完善。</p></li><li><p>上层业务，跟业务模式和运营产品有关的系统变化迅速，对底层接口封装组合即可。</p></li></ul></li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>以经典电商中台划分为例：</p><p><img src="/blog/./assets/image-i13acsxt4j8xcf3p44.PNG" alt="中台架构"></p><h5 id="业务中台"><a href="#业务中台" class="headerlink" title="业务中台"></a>业务中台</h5><p>业务中台基于公共服务的沉淀，需要积累一些基础的业务服务。</p><p>这些服务在 B2B，B2C 等系统中都会具备，是相同的。</p><ul><li>商品中心：商品、类目、sku、spu</li><li>交易中心：订单、状态流转、条目、支付</li><li>营销中心：促销、优惠券、活动</li><li>会员中心：账户、基本信息、收发货地址、商铺商家信息</li><li>仓储中心：仓库、库存</li><li>物流中心：发货信息、自主物流或外部物流对接</li><li>…</li></ul><h5 id="技术中台"><a href="#技术中台" class="headerlink" title="技术中台"></a>技术中台</h5><p>与业务无关的基础沉淀，技术类内容可以在各个团队之间共享。</p><ul><li><p>基础架构：核心类库、公共框架、基础服务、服务治理框架</p></li><li><p>中间件：分布式缓存、分布式消息、数据存储（db，nosql）、分布式文件、分布式调度</p></li><li><p>自动化运维：监控中心、资源管理、配置中心、发布中心、日志平台</p></li><li><p>自动化测试：任务协同、基础测试、性能测试、接口测试、持续集成</p></li><li><p>运维中台，将开发层和系统层的内容分开</p></li><li><p>…</p></li></ul><h5 id="数据中台"><a href="#数据中台" class="headerlink" title="数据中台"></a>数据中台</h5><p>数据中台不是数据平台，也不是数据仓库，这三者是有区别的。</p><p>举个例子：数据平台可以理解为数据库，数据仓库类比为报表。而数据中台更贴近上层业务，带着业务属性。同样以接口形式为其他上层各个业务线提供持续调用。</p><ul><li><p>数据抽取：从db，nosql，日志等各个来源提供抽取接口</p></li><li><p>数据接口：为上层业务提供需要的定制化业务数据接口</p></li><li><p>数据分析：行业分析与决策、数据驱动运营</p></li><li><p>人工智能：用户画像、商品推荐</p></li><li><p>可视化：数据大屏、信息展示、活动报表等</p></li><li><p>…</p></li></ul><h5 id="服务接入层"><a href="#服务接入层" class="headerlink" title="服务接入层"></a>服务接入层</h5><p>即大中台，小前台的前台，电商中直面用户的B2B,B2C等各个业务线。</p><ul><li>现有的业务模式、流程等根据市场及时调整，变化非常快。</li><li>新的业务线可以被快速实现，不需要再重复开发底层的中台业务，调取中台接口组装即可。</li></ul><h2 id="数据架构"><a href="#数据架构" class="headerlink" title="数据架构"></a>数据架构</h2><h3 id="单数据库"><a href="#单数据库" class="headerlink" title="单数据库"></a>单数据库</h3><p>早在2003-2004淘宝V1.0就使用mysql，V1.1换成oracle，直到 2007 数据库重新往mysql回迁。<br>这个阶段往往引发追逐商业大型db如oracle（淘宝v1.1 ， mysql→oracle）</p><p><img src="/blog/./assets/image-qzi0r0fhntuahdm0t0.PNG" alt="单数据库"></p><h4 id="方案-1"><a href="#方案-1" class="headerlink" title="方案"></a>方案</h4><p>java web项目直接通过jdbc，连接单一的数据库，读写扎堆在一块，单库上的机器io及cpu性能很快达到<br>上限</p><ul><li>数据库：mysql、oracle、sqlserver、db2等</li><li>持久层框架：jdbc，hibernate，jpa，mybatis</li></ul><h3 id="主从读写"><a href="#主从读写" class="headerlink" title="主从读写"></a>主从读写</h3><p>淘宝从oracle换回mysql的历程中实现了主从库部署与读写分离。</p><p><img src="/blog/./assets/image-6q3de494yufdlc5elq.PNG" alt="读写分离"></p><h5 id="方案-2"><a href="#方案-2" class="headerlink" title="方案"></a>方案</h5><p>java web应用层连接多个数据库，数据库之间形成主从关系，主库上写，从库上读。读写压力被分散。</p><ul><li>数据库集群：一主多从、双主单写</li><li>应用层开发：多数据源支持，spring multi datasource</li><li>中间件：Sharding-JDBC，Mycat</li></ul><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li>数据延迟：从主库到从库之间数据需要经过网络传输，不可避免的有延迟。</li><li>开发层面：需要开发框架具备多数据源的支持，以及自动化的数据源切换。</li><li>单库瓶颈：业务越来越多，表数量越来越多。出现单个库几百张表的现象。</li><li>数据局限：依然无法解决单表大数据的问题，比如订单积累达到亿级，即使在从库，关联查询依然奇慢无比。</li></ul><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><p>2004-2007，淘宝V2.1，分库。分库更多是基于业务，分表更多是基于数据记录或字段。</p><p><img src="/blog/./assets/image-nq7fsnebif12kfike3.PNG" alt="分库分表"></p><h5 id="方案-3"><a href="#方案-3" class="headerlink" title="方案"></a>方案</h5><p>主从库的写入依然是有一个统一的主库入口。随着业务量的提升，继续细粒度化拆分</p><ul><li><p>业务分库：订单库，产品库，活动库，会员库</p></li><li><p>横向分表：（拆记录） 3 个月内订单，半年内订单，更多订单</p></li><li><p>纵向分表：（拆字段）name、phone一张表，info、address一张表，俩表id一致</p></li></ul><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><ul><li>分库<ul><li>不同的数据库，所以无法使用数据库事务，而分布式事务的效果并不理想，多采用幂等和最终一致性方案。</li></ul></li><li>分表<ul><li>拆了再聚合是一对矛盾，例如按下单时间维度的分表，需要按用户排序统计变得异常困难。<br>中间件：Sharding-JDBC，Mycat，Atlas</li></ul></li></ul><h3 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h3><p>2006-2007，淘宝V2.2架构，分布式缓存Tair引入。</p><p><img src="/blog/./assets/image-mu04tw0appzyki4x4u.PNG" alt="高速缓存"></p><h5 id="方案-4"><a href="#方案-4" class="headerlink" title="方案"></a>方案</h5><p>数据库往往是系统的瓶颈，根据数据的冷热划分，热点数据如类目、商品基础信息放在缓存中，其他数据延迟加载</p><ul><li>ehcache：非分布式，简单，易维护，可用性一般</li><li>memcache：性能可靠，纯内存，客户端需要自己实现，无持久化</li><li>redis：性能可靠，纯内存，自带分片，集群，哨兵，支持持久化，几乎成为当前的标准方案</li></ul><h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h5><ul><li><p>缓存策略</p><ul><li>冷热数据的存放，缓存与db的边界需要把控，重度依赖可能引发问题</li></ul></li><li><p>缓存陷阱</p><ul><li>击穿（单一 key过期），穿透（不存在的 key），雪崩（多个 key 同时过期）</li></ul></li><li><p>数据一致性</p><ul><li>缓存和 db 之间因为同一份数据保存了两份，自然带来了一致性问题</li></ul></li></ul><h3 id="数据多样化"><a href="#数据多样化" class="headerlink" title="数据多样化"></a>数据多样化</h3><p>一个网站中，数据库和缓存只是一种基本的存储手段，除了这些，随着网站架构的发展其他各种形式的存储结构相继涌现：</p><p><img src="/blog/./assets/image-xz83il0ner45c12p9e.PNG" alt="数据多样化存储"></p><p>2006-2007，淘宝V2.2，分布式存储TFS，分布式缓存Tair，V3.0 加入 nosql Cassandra，搜索引擎<br>升级。<br>数据库全文检索 <em>→</em> 搜索引擎、本地上传 <em>+nfs→</em> 分布式文件系统的演进。</p><h4 id="分布式文件"><a href="#分布式文件" class="headerlink" title="分布式文件"></a>分布式文件</h4><p>商品图片，上传的文件等</p><ul><li><p>hdfs：大数据下的分布式存储</p></li><li><p>fastdfs</p></li><li><p>cephFs</p></li></ul><h4 id="nosql"><a href="#nosql" class="headerlink" title="nosql"></a>nosql</h4><ul><li><p>redis</p></li><li><p>mongodb</p></li><li><p>hbase</p></li><li><p>tidb</p></li></ul><h5 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h5><ul><li>搜索引擎<ul><li>lucene</li><li>solr</li><li>elasticsearch</li></ul></li></ul><h3 id="架构特点"><a href="#架构特点" class="headerlink" title="架构特点"></a>架构特点</h3><ul><li>开发框架支持：存储的数据多样化，要求开发框架架构层面要提供多样化的支撑，并确保访问易用性</li><li>数据运维：多种数据服务器对运维的要求提升，机器的数据维护与灾备工作量加大</li><li>数据安全：多种数据存储的权限，授权与访问隔离需要注意</li></ul><h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h2><h3 id="单机调优"><a href="#单机调优" class="headerlink" title="单机调优"></a>单机调优</h3><p>早年间的项目大多采用mvc开发。</p><p><img src="/blog/./assets/image-jnhbhe6x4vrgnqmnl6.PNG" alt="单体架构"></p><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><p>每个项目成一个mvc结构，部署在应用服务器上。（tomcat、jboss、websphere，weblogic）。</p><p>随着业务扩张，需求迭代，项目变得越来越大，一个war包动辄几百兆。</p><p>崇尚调优，jvm单节点调优甚至接近于强迫症的地步。</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>早年间的Apache+tomcat，后被nginx几乎一统江山。（前后端开发模式的演进： <em>mvc</em> 页面嵌套 <em>→</em> 接口<br>化）</p><p><img src="/blog/./assets/image-c0v6c1qjdkf8e0h7fv.PNG" alt="动静分离"></p><h4 id="方案-5"><a href="#方案-5" class="headerlink" title="方案"></a>方案</h4><ul><li>静态响应：tomcat对静态文件响应一般，提取静态文件，直接由nginx响应</li><li>动态代理：后端api通过代理转发给tomcat应用机器</li></ul><h4 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h4><ul><li><p>开发层面调整：项目结构要同步调整，由原来的一体化mvc转换为后端api+前端形式。</p></li><li><p>前后协调：前后端的分工变得更明确，互相并行开发，独立部署，但也带来了接口协调与约定等沟通问题。</p></li><li><p>跨域问题：后段与前端如果域名不同，可能存在跨域问题（head头，jsonp等手段可以解决）。</p></li></ul><h3 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h3><p>单纯的动静分离只解决了自己服务的项目结构，跨项目接口调用时，必须经过rest请求，不利于服务之<br>间的交互。淘宝V3.0，HSF出现，服务化导向，架构师忙于SOA和系统关系的梳理。</p><p><img src="/blog/./assets/image-hcji5g9jyl56vsoqry.PNG" alt="分布式架构"></p><h4 id="方案-6"><a href="#方案-6" class="headerlink" title="方案"></a>方案</h4><ul><li>公共服务：重复开发的基础服务提取出来，形成服务中心，避免重复造轮子，降低成本，架构团队出现。</li><li>独立性：各自服务独立部署升级，粒度更细，低耦合，高内聚。</li><li>SOA理念诞生：服务治理的范畴，重在服务之间的拆分与统一接口。</li></ul><h4 id="技术手段"><a href="#技术手段" class="headerlink" title="技术手段"></a>技术手段</h4><ul><li><p>异步化：</p><ul><li>rabbitmq </li><li>rocketmq</li><li>kafka</li></ul></li><li><p>RPC：</p><ul><li>dubbo</li></ul></li></ul><h4 id="特点-6"><a href="#特点-6" class="headerlink" title="特点"></a>特点</h4><ul><li><p>界限把控：服务的粒度、拆分和公共服务提炼需要架构师的全局把控。设计不好容易引发混乱。</p></li><li><p>部署升级：服务数量增多，人工部署变的不现实，必须借助自动化运维。</p></li><li><p>服务可用性：抽调的微服务因需要被多个上层业务共享，可用性等级变高，一旦down机就是灾难。</p></li><li><p>熔断和限流：做好服务熔断和限流，提防服务单点瓶颈造成整个系统瘫痪。短信提醒失败不要影响下单。</p></li></ul><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p><img src="/blog/./assets/image-yht298c0fmknupdcuw.PNG" alt="微服务架构"></p><blockquote><p>ESB企业服务总线即微服务中的服务网关。</p></blockquote><h4 id="方案-7"><a href="#方案-7" class="headerlink" title="方案"></a>方案</h4><ul><li>微服务是基于SOA思想，将系统粒度进一步细化而诞生的一种手段</li><li>中台化得以实现，各个中心以及前端业务拆解为多个小的服务单元。</li></ul><h4 id="技术手段-1"><a href="#技术手段-1" class="headerlink" title="技术手段"></a>技术手段</h4><p>微服务经历了从1.0（cloud）到2.0的演化（service mesh），目前企业中主流的解决方案依然是cloud<br>全家桶springcloud。</p><h4 id="特点-7"><a href="#特点-7" class="headerlink" title="特点"></a>特点</h4><p>-<br>  服务拆分：粒度并非越小越好。太小会带来部署维护等一系列成本的上升。</p><ul><li>接口约束：系统增多，各个服务接口的规范化日益重要，要求有统一的服务接口规范，推动企业消息总线的建设</li><li>权限约束：接口不是任意想调就可以调的，做好权限控制，借助oauth2等手段，实现服务之间的权限认证。</li></ul><h2 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h2><h3 id="单机器"><a href="#单机器" class="headerlink" title="单机器"></a>单机器</h3><p>小型网站ALL IN ONE。</p><p><img src="/blog/./assets/image-jnhbhe6x4vrgnqmnl6.PNG" alt="单体架构"></p><h4 id="方案-8"><a href="#方案-8" class="headerlink" title="方案"></a>方案</h4><ul><li>单台机器的性能很快达到上限，就是所说的资源不足了。</li><li>然后开始提升配置，推动高配机器的发展，成本高昂。</li></ul><h4 id="特点-8"><a href="#特点-8" class="headerlink" title="特点"></a>特点</h4><ul><li><p>部署简单：采用web包部署与发布，db等资源同台机器连接，简单易操作。</p></li><li><p>资源争夺：在业务发展的初始阶段尚可支撑，随着访问量的上升，单机性能很快会成为系统瓶颈。</p></li></ul><h3 id="角色划分"><a href="#角色划分" class="headerlink" title="角色划分"></a>角色划分</h3><p>稍微大一点的系统，把数据库、缓存、消息等中间件剥离出去，单独机器来部署。</p><p><img src="/blog/./assets/image-1cfqlhsb488utrhf39.PNG" alt="中间件分离"></p><h4 id="方案-9"><a href="#方案-9" class="headerlink" title="方案"></a>方案</h4><ul><li><p>多台机器：tomcat与mysql各自独占机器资源。</p></li><li><p>针对性扩容：tomcat应用机更注重cpu的运算和内存，mysql更注重io与磁盘性能，针对各自情况扩容。</p></li></ul><h4 id="特点-9"><a href="#特点-9" class="headerlink" title="特点"></a>特点</h4><ul><li>数据维护：可以抽出单独的dba来维护数据库服务器。</li><li>数据安全：需要跨机器访问数据库，链接密码需要注意防范泄漏。</li></ul><h3 id="应用集群"><a href="#应用集群" class="headerlink" title="应用集群"></a>应用集群</h3><p>2004-2005，淘宝V2.0，EJB为核心。V2.1架构下，引入spring框架走向轻量化和集群</p><p><img src="/blog/./assets/image-f1tb62rl5y72y1hntx.PNG" alt="集群部署"></p><h4 id="方案-10"><a href="#方案-10" class="headerlink" title="方案"></a>方案</h4><ul><li><p>apache：早期负载均衡方案，性能一般</p></li><li><p>nginx： 7 层代理，性能强悍，配置简洁，当前不二之选</p></li><li><p>haproxy：性能同样可靠，可做 7 层或 4 层代理。</p></li><li><p>lvs： 4 层代理，性能最强，linux集成，配置麻烦</p></li><li><p>f5： 4 层，硬件负载，财大气粗的不二选择</p></li></ul><h4 id="特点-10"><a href="#特点-10" class="headerlink" title="特点"></a>特点</h4><ul><li><p>session保持：集群环境下，用户登陆需要分布式session做支撑。</p></li><li><p>分布式协同：分布式环境下对资源的加锁要超出线程锁的范畴，上升为分布式锁。</p></li><li><p>调度问题：调度程序不能多台部署，容易跑重复，除非使用分布式调度，如elastic-job。</p></li><li><p>机器状态管理：多台应用机的状态检测与替换需要做到及时性，一般niginx层做故障转移。</p></li><li><p>服务升级：滚动升级成为可能，灰度发布。</p></li><li><p>日志管理：日志文件分散在各个机器，促进集中式日志平台的产生。</p></li></ul><h3 id="多层代理"><a href="#多层代理" class="headerlink" title="多层代理"></a>多层代理</h3><p><img src="/blog/./assets/image-187yh63bfltv2irxqy.PNG" alt="多层代理"></p><h4 id="方案-11"><a href="#方案-11" class="headerlink" title="方案"></a>方案</h4><p>机器规模进一步加大，动静态均有多个nginx负载，入口统一交给lvs负载。多层代理形成。</p><h4 id="特点-11"><a href="#特点-11" class="headerlink" title="特点"></a>特点</h4><p>机房受限：lvs依然是单一节点，即使keepalived做到高可用，流量仍然需要在唯一入口进入。</p><h3 id="异地访问"><a href="#异地访问" class="headerlink" title="异地访问"></a>异地访问</h3><p>淘宝V2.1时代 ， 使用自己的TaobaoCDN。</p><p>将相同的系统部署多份，分散到异地多个机房，或者电信、移动等多个网络中。</p><p>不同地点，不同网络接入的用户，有了不同的访问入口和选择。</p><p><img src="/blog/./assets/image-23zcrj50e3dlibkhle.PNG" alt="异地多活"></p><h4 id="方案-12"><a href="#方案-12" class="headerlink" title="方案"></a>方案</h4><ul><li><p>dns轮询：通过配置多个ip将服务部署到多个机房，通过dns的策略轮询调用，可以实现机房层面的扩容。</p></li><li><p>CDN：就近原则，使用户获得就近的机房访问相关资源，自己投资太大，购买他方需要付费。</p></li></ul><h4 id="特点-12"><a href="#特点-12" class="headerlink" title="特点"></a>特点</h4><p>基本解决了机器部署的扩容问题，随着业务的发展，扩容与收缩变得困难，促进资源调度层面的技术发<br>展。</p><h3 id="云平台"><a href="#云平台" class="headerlink" title="云平台"></a>云平台</h3><p>针对中台化的建设及微服务数量的飙升，部署和运维支撑同步进行着变革。面临微服务的快速部署，资源的弹性伸缩等挑战，容器化与云被推进。</p><p>案例：成百上千的服务数量庞大、大促期间某些微服务的临时扩容。</p><p><img src="/blog/./assets/image-bf1c8izqnxc2o83yww.PNG" alt="云平台"></p><h4 id="方案-13"><a href="#方案-13" class="headerlink" title="方案"></a>方案</h4><ul><li><p>虚拟化：vm方案，Openstack，Vmware，VirtualBox</p></li><li><p>容器化：docker</p></li><li><p>编排：swarm，k8s，k3s</p></li><li><p>云化：容器化解决了资源的快速伸缩，但仍需要企业自备大量机器资源。推动私有云到企业云进化。</p></li></ul><h4 id="特点-13"><a href="#特点-13" class="headerlink" title="特点"></a>特点</h4><ul><li>资源预估：注意资源的回收，降低资源闲置和浪费，例如大促结束后要及时回收。</li><li>运维要求：需要运维层面的高度支撑，门槛比较高。</li><li>预估风险：云瘫痪的故障造成的损失不可估量。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://db-engines.com/en/ranking">数据库流行度排名</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
      <category>架构思想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>业务架构</tag>
      
      <tag>数据架构</tag>
      
      <tag>应用架构</tag>
      
      <tag>部署架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vifm命令行文件管理器入门</title>
    <link href="/blog/2020/03/vifm%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E5%85%A5%E9%97%A8.html"/>
    <url>/blog/2020/03/vifm%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E5%85%A5%E9%97%A8.html</url>
    
    <content type="html"><![CDATA[<p>Vifm是一个实用的类 Vim 快捷键终端文件管理器，可以用来替代图形文件管理器。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ctrl-w hjkl</td><td align="left">切换窗口</td></tr><tr><td align="left">ctrl-w s</td><td align="left">水平分隔</td></tr><tr><td align="left">ctrl-w v</td><td align="left">垂直分隔窗口</td></tr><tr><td align="left">w</td><td align="left">另个窗口预览当前光标文件</td></tr><tr><td align="left">e</td><td align="left">当前窗口预览光标文件</td></tr><tr><td align="left">dd</td><td align="left">删除文件</td></tr><tr><td align="left">:trashes</td><td align="left">查看垃圾箱目录</td></tr><tr><td align="left">lstrash</td><td align="left">查看垃圾桶文件</td></tr><tr><td align="left">:restore</td><td align="left">还原选中的垃圾箱文件</td></tr><tr><td align="left">j,k</td><td align="left">上下移动</td></tr><tr><td align="left">h,l</td><td align="left">在父&#x2F;子目录之间移动</td></tr><tr><td align="left">gg</td><td align="left">移动到文件列表首行</td></tr><tr><td align="left">G</td><td align="left">移动到文件列表末行</td></tr><tr><td align="left">M</td><td align="left">光标移动到窗口中间</td></tr><tr><td align="left">H,L</td><td align="left">光标移动到窗口首末文件</td></tr><tr><td align="left">gh</td><td align="left">返回上级目录</td></tr><tr><td align="left">gl,Enter</td><td align="left">进入目录或打开文件</td></tr><tr><td align="left">dd,d</td><td align="left">删除文件(放入回收站)</td></tr><tr><td align="left">DD,D</td><td align="left">删除文件(不放回收站)</td></tr><tr><td align="left">yy,Y,y</td><td align="left">复制文件</td></tr><tr><td align="left">p</td><td align="left">粘贴文件</td></tr><tr><td align="left">u</td><td align="left">撤销操作</td></tr><tr><td align="left">Space,Tab</td><td align="left">在两个panel之间切换</td></tr><tr><td align="left">&#x2F;</td><td align="left">查找文件</td></tr><tr><td align="left">m[a-zA-Z0-9]</td><td align="left">书签</td></tr><tr><td align="left">‘[a-zA-Z0-9]</td><td align="left">跳转到书签位置</td></tr><tr><td align="left">za</td><td align="left">切换隐藏文件显隐</td></tr><tr><td align="left">zo</td><td align="left">显示隐藏文件</td></tr><tr><td align="left">zm</td><td align="left">不显示隐藏文件</td></tr><tr><td align="left">:fil regex</td><td align="left">隐藏匹配regex的文件</td></tr><tr><td align="left">zO</td><td align="left">显示被:fil命令过滤的文件</td></tr><tr><td align="left">zM</td><td align="left">隐藏被:fil命令过滤的文件</td></tr><tr><td align="left">cp</td><td align="left">更改文件属性权限</td></tr><tr><td align="left">cw</td><td align="left">文件&#x2F;文件夹重命名</td></tr><tr><td align="left">cW</td><td align="left">文件&#x2F;文件夹重命名,不包含扩展名</td></tr><tr><td align="left">ga</td><td align="left">计算文件夹大小</td></tr><tr><td align="left">!prog</td><td align="left">执行系统命令, %f可以用来当前选中文件名</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>软件</tag>
      
      <tag>Vifm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取网站的 favicon 的方式</title>
    <link href="/blog/2020/03/%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99%E7%9A%84favicon%E7%9A%84%E6%96%B9%E5%BC%8F.html"/>
    <url>/blog/2020/03/%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99%E7%9A%84favicon%E7%9A%84%E6%96%B9%E5%BC%8F.html</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>搭建网址导航时，需要获取网站的favicon.ico来增加辨识度和美观度。可以通过以下几种方式获取到网站的favicon.ico.</p><h2 id="域名拼接"><a href="#域名拼接" class="headerlink" title="域名拼接"></a>域名拼接</h2><p>找到网站的的默认路径，然后在地址后面拼接favicon.ico，就是favicon图标的地址了。 </p><p>例如:<a href="https://maojun.xyz/favicon.ico">https://maojun.xyz/favicon.ico</a></p><blockquote><p>注意：如果网站没有配置favicon.ico则会返回404错误</p></blockquote><h2 id="head元素定位"><a href="#head元素定位" class="headerlink" title="head元素定位"></a>head元素定位</h2><p>当域名后面拼接favicon.ico无法获取图标的，可以尝试通过通过首页的<code>head</code>标签中的<code>rel=&quot;shortcut icon&quot;</code>来找到对应的favicon.ico位置。</p><h2 id="在线获取ico工具"><a href="#在线获取ico工具" class="headerlink" title="在线获取ico工具"></a>在线获取ico工具</h2><p>通过Google的链接工具来找到favicon.ico</p><p><a href="https://www.google.com/s2/favicons?domain=maojun.xyz">https://www.google.com/s2/favicons?domain=maojun.xyz</a></p><blockquote><p>把domain后的域名修改成需要查找favicon.ico的网站</p></blockquote><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
      <tag>网页工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下不解压直接修改压缩包内文件</title>
    <link href="/blog/2020/03/Linux%E4%B8%8B%E4%B8%8D%E8%A7%A3%E5%8E%8B%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%86%85%E6%96%87%E4%BB%B6.html"/>
    <url>/blog/2020/03/Linux%E4%B8%8B%E4%B8%8D%E8%A7%A3%E5%8E%8B%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%86%85%E6%96%87%E4%BB%B6.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从 Windows 转到 Linux 桌面发行版后，就对在终端上完成一些工作产生痴迷。比如修改，复制，移动，删除文件等等。加上 Linux 服务器都不带 GUI 工具，能够直接使用命令行可以提高工作效率。</p><h2 id="修改压缩包文件"><a href="#修改压缩包文件" class="headerlink" title="修改压缩包文件"></a>修改压缩包文件</h2><p>VIM 可以直接打开压缩包，然后对想要的压缩文件进行编辑保存，一切都是vim的命令完成。修改后｀wp&#96;就保存退出了。</p><blockquote><p>注意，viｍ 要依赖zip工具来完成打开压缩包。</p></blockquote><h2 id="添加压缩包文件"><a href="#添加压缩包文件" class="headerlink" title="添加压缩包文件"></a>添加压缩包文件</h2><p>如果用图形工具则直接鼠标双击打开压缩包，把想要添加的内容拖拽到压缩包里即可。</p><p> 但是生产上的服务器没有图形工具，若下载本地再上传服务器会显得非常麻烦。可以针对不同的文件使用不同的命令。</p><ul><li><p>tar类型</p><p>添加新文件到压缩包：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar rvf  /path/to/archive.tar  /path/to/newfile.txt<br></code></pre></td></tr></table></figure><p>​更新文件到压缩包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar uvf /path/to/archive.tar  /path/to/newfile.txt<br></code></pre></td></tr></table></figure><ul><li>zip类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ zip -rv zipfile.zip newfile.txt newfile1.txt<br></code></pre></td></tr></table></figure><ul><li>jar类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ jar -uvf jarfile.jar newfile.txt<br></code></pre></td></tr></table></figure><h2 id="从压缩包删除文件"><a href="#从压缩包删除文件" class="headerlink" title="从压缩包删除文件"></a>从压缩包删除文件</h2><ul><li>tar类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ tar -dvf archive.tar filename.txt<br></code></pre></td></tr></table></figure><ul><li>zip类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ zip -d zipfile.zip filename.doc \*.txt<br></code></pre></td></tr></table></figure><ul><li>jar类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ zip -d jarfile.jar file1.txt file2.txt<br></code></pre></td></tr></table></figure><p>（本文完）</p><p><strong>参考链接：</strong></p><ul><li><a href="http://www.lostsaloon.com/technology/how-to-add-files-to-archive-file-in-linux-also-delete-files">how to add new files into an archive file (tar, gz, zip) in linux (also delete files)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终端下的 Emacs 命令使用</title>
    <link href="/blog/2020/03/%E7%BB%88%E7%AB%AF%E4%B8%8B%E7%9A%84emacs%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8.html"/>
    <url>/blog/2020/03/%E7%BB%88%E7%AB%AF%E4%B8%8B%E7%9A%84emacs%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="默认快捷键"><a href="#默认快捷键" class="headerlink" title="默认快捷键"></a>默认快捷键</h2><p><code>Bash</code> 默认绑定的是 <code>Emacs</code> 的快捷键，可以修改成Vi(<code>set - o vi</code>)的操作方式。 学会使用<code>Bash</code>默认的快捷键来操作命令行可以提高效率。</p><p>更多信息可以查看帮助手册：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ man bash<br></code></pre></td></tr></table></figure><h2 id="启动编辑器"><a href="#启动编辑器" class="headerlink" title="启动编辑器"></a>启动编辑器</h2><p><code>Ctrl+x-Ctrl+x</code>打开一个编辑器</p><blockquote><p>根据 $FCEDIT 或 $EDITOR 环境变量打开对应的编辑器,若这两个变量都为空，则运行emacs</p></blockquote><h2 id="控制屏幕"><a href="#控制屏幕" class="headerlink" title="控制屏幕"></a>控制屏幕</h2><ul><li><code>Ctrl+l</code>清屏（同<code>clear</code>命令）</li><li><code>Ctrl+s</code>暂停屏幕输出</li><li><code>Ctrl+q</code>恢复<code>Ctrl+s</code>后的屏幕输出</li></ul><h2 id="控制光标"><a href="#控制光标" class="headerlink" title="控制光标"></a>控制光标</h2><ul><li><p><code>Ctrl+a</code>&#x2F;<code>Home</code>移动光标到行首</p></li><li><p><code>Ctrl+e</code>&#x2F;<code>End</code>移动光标到行尾</p></li><li><p><code>Ctrl+b</code>&#x2F;<code>左箭头&lt;-</code>向左移动一个字符</p></li><li><p><code>Ctrl+f</code>&#x2F;<code>右箭头-&gt;</code>向右移动一个字符</p></li><li><p><code>Ctrl+左箭头&lt;-</code>&#x2F;<code>Alt+b</code>&#x2F;<code>ESC-b</code>向左移动一个单词（以空格分隔)</p></li><li><p><code>Ctrl+右箭头-&gt;</code>&#x2F;<code>Alt+c</code>&#x2F;<code>ESC-f</code>向右移动一个单词（以空格分隔)</p></li></ul><blockquote><p><code>Alt+c</code>向右移动一个单词时会将单词首字母变大写</p></blockquote><h2 id="搜索历史"><a href="#搜索历史" class="headerlink" title="搜索历史"></a>搜索历史</h2><ul><li><code>上箭头</code>&#x2F;<code>下箭头</code>上箭头搜索上一条历史，下箭头相反</li><li><code>Ctrl+p</code>&#x2F;<code>Ctp+n</code>同上下箭头</li><li><code>Ctrl+r</code>搜索匹配的历史关键字</li><li><code>Ctrl+s</code>反向搜索</li><li><code>Ctrl+g</code>取消反向搜索</li></ul><h2 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a>删除文本</h2><ul><li><code>Ctrl+d</code>&#x2F;<code>Delete</code> 删除光标所在的字符</li><li><code>Ctrl+k</code> 删除光标到行尾的的文本</li><li><code>Ctrl+x-Backspace</code> 删除光标到行首的文本</li></ul><h2 id="修改文本"><a href="#修改文本" class="headerlink" title="修改文本"></a>修改文本</h2><ul><li><code>Ctrl+t</code> 光标处字符和前一个字符交换位置</li><li><code>ESC+t</code>与光标前一各单词交换位置（以空格分隔）</li><li><code>ESC+u</code> 将光标所在处单词字符到词尾转大写</li><li><code>ESC+l</code> 将光标所在单词字符到词尾写</li><li><code>Esc+c</code> 将光标所在单词字符转大写，单词光标后字符到词尾转小写</li></ul><h2 id="控制进程"><a href="#控制进程" class="headerlink" title="控制进程"></a>控制进程</h2><ul><li><code>Ctrl+z</code> 挂起当前进程</li><li><code>Ctrl+c</code> 结束当前进程</li><li><code>Ctrl+d</code> 退出Bash（同<code>exit</code>命令）</li></ul><h2 id="Bang-命令"><a href="#Bang-命令" class="headerlink" title="Bang(!)命令"></a>Bang(!)命令</h2><ul><li><code>!!</code> 执行上一条命令</li><li><code>!top</code> 执行最近以top开头的命令</li><li><code>!top:p</code> 只显示但不执行最近以top开头的命令</li><li><code>!$</code> 将上个命令中最后一个单词作为新命令执行（同<code>Alt+.</code>但要回车执行)</li><li><code>!$:p</code> 显示<code>!$</code>要执行的命令</li><li><code>!*</code> 执行上个命令中首单词除外的命令</li><li><code>!*:p</code> 显示<code>!*</code>要执行的命令</li></ul><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSHFS 挂载远程服务器目录</title>
    <link href="/blog/2020/03/SSHFS%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%AE%E5%BD%95.html"/>
    <url>/blog/2020/03/SSHFS%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%AE%E5%BD%95.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>GNU/Linux</code>系统中经常需要用到目录挂载,比如挂载<strong>U盘</strong>,<strong>移动硬盘</strong>等。目录挂载可以使用<code>Linux</code>的<code>mount</code>工具完成。</p><p>有的时候我们希望能将远程服务器上的某个文件夹挂载到本地目录，比如<code>tomcat</code>下的<code>webapps</code>目录，这样不再通过<code>sftp</code>工具拷贝上传了，直接将本地<code>war</code>包拷贝到挂载的<code>webapps</code>目录即可。</p><h2 id="SSHFS"><a href="#SSHFS" class="headerlink" title="SSHFS"></a>SSHFS</h2><p><code>sshfs</code>走的是<code>ssh</code>协议，只需要在本机上安装对应的<code>sshfs</code>客户端即可，通过 <code>sshfs</code> 挂载远程服务器上的目录到本地。常见的<code>sshfs</code>有如下几类：</p><ul><li>Linux平台：<a href="https://web.archive.org/web/20201019221920/https://github.com/libfuse/sshfs">https://github.com/libfuse/sshfs</a></li><li>Mac平台: <a href="https://web.archive.org/web/20201019221920/https://github.com/osxfuse/sshfs">https://github.com/osxfuse/sshfs</a></li><li>Windows平台:<a href="https://web.archive.org/web/20201019221920/https://github.com/feo-cz/win-sshfs">https://github.com/feo-cz/win-sshfs</a></li></ul><p>这里以 <code>pacman</code> 包管理系统为例，<code>pacman</code> 仓库已经提供了 <code>sshfs</code> 的二进制包，所以直接安装即可:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pacman -S sshfs<br></code></pre></td></tr></table></figure><p>安装后先在本地创建一个挂载点:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本机创建一个webapps的挂载目录</span><br>$ sudo <span class="hljs-built_in">mkdir</span> /mnt/webapps <br></code></pre></td></tr></table></figure><blockquote><p>挂载目录可以指定任意位置</p></blockquote><p>使用<code>sshfs</code>命令挂载远程目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sshfs -o allow_other,transform_symlinks [email protected]:/home/user /etc/letsencrypt<br></code></pre></td></tr></table></figure><blockquote><p>参数说明：<code>allow_other</code>:提供访问权限 ; <code>transform_symlinks</code>:挂载软链接。</p></blockquote><p>可能会出现的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fusermount3: option allow_other only allowed <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;user_allow_other&#x27;</span> is <span class="hljs-built_in">set</span> <span class="hljs-keyword">in</span> /etc/fuse.conf<br></code></pre></td></tr></table></figure><p>解决方法：在本机的文件<code>/etc/fuse.conf</code>中取消注释下面的内容:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">user_allow_other<br></code></pre></td></tr></table></figure><blockquote><p>如果没有则自行添加即可。</p></blockquote><p>如果是使用账号密码登入远程服务器的则进行目录挂载的时候需要输入密码。如果想通过<code>ssh密钥</code>登入，需指定密钥的位置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sshfs -o allow_other,transform_symlinks -o IdentityFile=~/.ssh/id_rsa [email protected]:/home/user/webapps /mnt/webapps<br></code></pre></td></tr></table></figure><blockquote><p><code>IdentityFile</code>:指定<code>ssh</code>密钥位置</p></blockquote><p>创建远程目录挂载后，就可以像操作本地目录一样操作远程目录上的文件了。对挂载目录中文件的修改将直接同步给远程目录。</p><p>如果有多个目录需要挂载，重复以上挂载步骤即可。需要注意是,这种挂载仅是临时挂载点，如果本地或者远程机器关机或者重启则需要再次挂载生效。</p><p>如果需要设置永久挂载则需要编辑<code>/etc/fstab</code>文件,设置自动挂载文件系统:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo vim /etc/fstab<br></code></pre></td></tr></table></figure><p>添加以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sshfs<span class="hljs-comment">#[email protected]:/home/user/webapps /mnt/webapps</span><br></code></pre></td></tr></table></figure><blockquote><p>设置完永久挂载点后需要重启生效 最好不要在生产机器上设置永久挂载点，以免本地机器被入侵造成连带损失</p></blockquote><p>设置完远程挂载点后，就可以通过在本地操作挂载目录:除了无法在挂载目录执行程序或使用脚本，其他增删改查操作就可以像本地目录一样操作。</p><p>一个典型用法是，如果您在VPS上托管网站，并且需要定期更改网站。在本地挂载文件系统允许您启动您希望编辑站点的任何代码编辑器，IDE或文本编辑器，您所做的任何更改将在本地计算机上生成后立即反映在虚拟服务器上。</p><p>类似地，在用于编码项目的测试环境在服务器上，它允许非常简易的代码修改，可以立即测试而无需在本地和远程修改代码。</p><p>通过远程目录挂载，我们就可以实现在本地直接通过<code>IDE</code>编辑远程服务器上的文件，实现<strong>本地修改，远程更新</strong>的效果。</p><h2 id="通过跳板机挂载机器"><a href="#通过跳板机挂载机器" class="headerlink" title="通过跳板机挂载机器"></a>通过跳板机挂载机器</h2><p>sshfs 通过跳板机挂载远程服务器,配置配置跳板机和需要跳板机登入的服务器。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host jump<br>    HostName xxx.xxx.xxx.xxx<br>    User xxx<br>    Port 22<br>    IdentityFile ~/.ssh/id_rsa<br><br>Host foo<br>    HostName xxx.xxx.xxx.xxx<br>    Port 22<br>    User xxx<br>    IdentityFile ~/.ssh/id_rsa<br>    ProxyCommand ssh jump -W %h:%p<br></code></pre></td></tr></table></figure><blockquote><p>将上面的<code>xxx</code>替换成实际的服务器<code>IP</code>和用户名。 配置了上面的跳板机，服务器就是可以通过<code>ssh foo</code>连接了，配置中会已经配置使用跳板机的代理。</p></blockquote><p>因为<code>sshfs</code>是基于<code>SSH</code>协议的，也可以通过以下的命令挂载远程的服务器目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sshfs foo:/app/test ~/test<br></code></pre></td></tr></table></figure><blockquote><p>将远程服务器中的<code>/app/test</code>目录挂载到本地家目录的<code>test</code>下。</p></blockquote><p>如果需要卸载挂载点，则可以通过以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo umount /mnt/webapps<br></code></pre></td></tr></table></figure><p>或者下面的命令，两个命令都可以卸载挂载点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo fusermount -u /mnt/webapps<br></code></pre></td></tr></table></figure><p>(本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>SSHFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH 使用 lrzsz 进行上传和下载</title>
    <link href="/blog/2020/03/SSH%E4%BD%BF%E7%94%A8lrzsz%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD.html"/>
    <url>/blog/2020/03/SSH%E4%BD%BF%E7%94%A8lrzsz%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD.html</url>
    
    <content type="html"><![CDATA[<h2 id="SSH上传下载"><a href="#SSH上传下载" class="headerlink" title="SSH上传下载"></a>SSH上传下载</h2><p>通过 <code>SSH</code> 命令连接到服务器，当有上传和下载的需求，通常需要借助其他工具来完成，比如<code>FTP</code>、<code>SFTP</code>工具等。</p><p>这时可以借助 Zmodem 文件传输协议，常见的图形工具<code>Xshell</code>、<code>SecureCRT</code>都是支持<code>Zmodem</code>协议的，但<code>Putty</code>并不支持。</p><p><code>zmodem</code>协议有以下的优点:</p><ol><li>通过<code>rz</code>、<code>sz</code>命令，简化了上传和下载的步骤。</li><li>上传和下载不需要再次输入用户密码.</li></ol><p>为了使用 <code>Zmodem</code> 协议上传和下载文件，首先安装支持该协议的工具。 其中<a href="https://web.archive.org/web/20201024060121/https://wiki.maojun.xyz/#lrzsz">lrzsz</a>就是该协议的实现工具之一。<code>lrzsz</code>这个工具只适合传输小文件，不适合传输大型文件。大文件传输更推荐使用<code>Rsync</code>传输，支持增量差异传输。</p><h2 id="zssh-和-lrzsz"><a href="#zssh-和-lrzsz" class="headerlink" title="zssh 和 lrzsz"></a>zssh 和 lrzsz</h2><p>如果使用<code>GNU/Linux</code>终端则需要安装。这里以的<code>pacman</code>包管理 Linux 操作系统为例，在命令行执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 让ssh支持zmodem协议</span><br>$ sudo pacman -S zssh <br><span class="hljs-comment"># 提供rz,sz命令</span><br>$ sudo pacman -S lrzsz <br></code></pre></td></tr></table></figure><p>lrzsz 常用的两个命令来上传和下载文件：</p><ul><li>rz: 接受文件</li><li>sz: 发送文件</li></ul><blockquote><p>方便记忆可以将<code>r</code>记忆为receive,<code>s</code>记忆为send</p></blockquote><p>在使用上要将 <code>ssh</code> 替换成 <code>zssh</code> 命令，即支持<code>zmodem</code>协议的<code>ssh</code>。 <code>zssh</code>和<code>ssh</code>使用上并无差异，例如原先使用<code>ssh</code>连接服务器的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh user@password<br></code></pre></td></tr></table></figure><p>使用<code>zssh</code>命令替换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zssh user@password<br></code></pre></td></tr></table></figure><p>本地安装<code>lrzsz</code>后，再去对应的服务器上安装。这里以 <code>yum</code> 包管理为例安装 <code>lrzsz</code> ,输入以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo yum -y install lrzsz<br></code></pre></td></tr></table></figure><p>安装后就可以模拟测试文件传输，如果使用命令行终端则使用<code>zssh</code>连接安装了<code>lrzsz</code>的服务器。如果使用<code>Xshell</code>等图形工具正常连接即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ zssh user@password<br>Press ^@ (C-Space) to enter file transfer mode, <span class="hljs-keyword">then</span> ? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>连接成功后可以看到一行命令提示，如果要使用<code>zssh</code>则输入<code>ctrl+2（@）</code>快捷键即可切换。(若不是<code>zssh</code>登入服务器没有该提示)。</p><p>如果需要上传文件到服务器，使用<code>xshell</code>等支持<code>Zmodem</code>协议的图形工具，直接输入命令<code>rz</code>接收文件,<code>xshell</code>会打开一个窗口可以方便的选择文件上传。</p><p>使用终端模拟工具则在当前服务器使用<code>ctrl+2</code>切换到<code>zssh</code>窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 快捷键输入`ctrl+2`切换到`zssh`</span><br><span class="hljs-comment"># 查看一下本地目录</span><br>zssh&gt;<span class="hljs-built_in">pwd</span><br><span class="hljs-comment"># 查看本地文件</span><br>zssh&gt;<span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 上传`foo.txt`文件到服务器</span><br>zssh&gt;sz foo.txt<br></code></pre></td></tr></table></figure><blockquote><p>注意：切换到<code>zssh</code>后可以使用本地机器的终端命令。</p></blockquote><p>如果需要下载服务器的文件到本地，使用<code>xshell</code>等支持<code>Zmodem</code>协议的图形工具则可以输入<code>sz</code>加上发送的文件名，<code>xshell</code>会打开一个窗口可以方便的保存文件位置。</p><p>使用终端模拟工具则先用<code>sz</code>命令发送对应的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用`sz`命令发送`bar.txt`</span><br>sz bar.txt <br><span class="hljs-comment"># `sz`命令后会出现一行乱码，然后快捷键`ctrl+2`切换到`zssh`</span><br><span class="hljs-comment"># 查看本机当前位置</span><br>zssh &gt; <span class="hljs-built_in">pwd</span> <br><span class="hljs-comment"># 接收服务器`sz`发送的文件`bar.txt`</span><br>zssh &gt; rz <br></code></pre></td></tr></table></figure><p>使用<code>lrzsz</code>命令可以帮助我们在不使用<code>sftp</code>的情况下传输文件，并且可以方便快捷的上传和下载文件。</p><p>(本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过跳板机连接 SSH 服务器</title>
    <link href="/blog/2020/03/%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E8%BF%9E%E6%8E%A5SSH%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
    <url>/blog/2020/03/%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E8%BF%9E%E6%8E%A5SSH%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="SSH无法直连"><a href="#SSH无法直连" class="headerlink" title="SSH无法直连"></a>SSH无法直连</h2><p>服务器因为安全原因不能直接通过外网访问，要经过中转连接。</p><p>服务器提供了两种方式连接：</p><ol><li>通过堡垒机调用本地 <code>SSH</code> 客户端登入到服务器。</li><li>通过跳板机端口转发访问</li></ol><p>当：</p><ul><li>本机可以访问–&gt;跳板机</li><li>跳板机可以访问–&gt;服务器</li><li>笔记本不能访问—-x服务器</li></ul><p>可以使用跳板机代理访问服务器。</p><h2 id="跳板机"><a href="#跳板机" class="headerlink" title="跳板机"></a>跳板机</h2><p>跳板机正如它的名字一样，可以在本机和服务器之间提供一个跳板。本地主机 A 可以直接访问 B 主机，但是无法访问 C 主机，但 B 主机可以访问 C 主机。可以通过将 B 主机作为主机 A 的跳板机来间接访问 C 主机。</p><p>服务器提供了跳板机的账号和密码，为了避免每次输入账号密码以及提高登入的安全性。配置生成公钥并上传到跳板机后面就无需输入账号密码了。通过<code>ssh-keygen</code>命令直接一路回车生成的两个文件：</p><ul><li>公钥文件 <code>~/.ssh/id_rsa.pub</code></li><li>私钥文件 <code>~/.ssh/id_rsa</code></li></ul><p>生成的公钥通过以下的命令上传到跳板机:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-copy-id  -i /etc/.ssh/id_rsa user@server<br></code></pre></td></tr></table></figure><blockquote><p>user@server替换为跳板机实际的用户和地址 如果出现<code>bash: sh-copy-id: command not found</code>，则安装<code>openssh-clients</code>解决</p></blockquote><p>上传公钥后，就可以免密登入了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh user@server<br></code></pre></td></tr></table></figure><p>完成跳板机的配置后，如果现在直接通过跳板机访问远程服务器的话是需要远程服务器的账号密码的。</p><p>由于远程服务器的密码由于安全原因能不能使用了。这里可以采用<code>2</code>种方法将本地的公钥上传到远程的服务器。</p><ol><li>借助页面堡垒机登入到<code>sftp</code>，然后将本地之前生成的公钥追加到远程服务器的<code>~/.ssh/authorized_keys</code>文件中。</li><li>借助跳板机，先将公钥上传到跳板机，再通过跳板机追加到远程服务器的<code>~/.ssh/authorized_keys</code>文件中。</li></ol><p>配置完远程服务器的公钥后，就可以实现本机通过跳板机访问服务器免密登入了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -J user@jumpserver user@remoteserver<br></code></pre></td></tr></table></figure><blockquote><p><code>jumpserver</code>为跳板机，<code>remoteserver</code>为远程目的服务器 <code>ssh</code>的<code>-J</code>参数用来指定跳板机，后面空格然后再跟上远程服务器</p></blockquote><p>带端口例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -J user@jumpserver:port user@remoteserver:port<br></code></pre></td></tr></table></figure><p>如果有多层跳板机，同单一跳板机使用<code>-J</code>参数，之间用逗号<code>,</code>分隔跳板机。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ssh -J user@jumpserver1,user@jumpserver2:port user@remoteserver<br></code></pre></td></tr></table></figure><p>通过上面的命令就能通过跳板机访问服务器了。</p><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>可以通过<code>ssh</code>的<code>config</code>文件将以上信息管理起来，编辑<code>~/.ssh/config</code>文件:</p><p>对应的<code>ssh -J user@jumpserver:port  user@remoteserver:port</code>命令的配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 跳板机</span><br>Host jump<br>    HostName jumpIP<br>    User user<br>    Port 22<br>    IdentityFile ~/.ssh/id_rsa<br><br><span class="hljs-comment"># 远程服务器</span><br>Host remote<br>    HostName remoteIP<br>    Port 22<br>    User user<br>    IdentityFile ~/.ssh/id_rsa<br>    ProxyCommand ssh jump -W %h:%p<br></code></pre></td></tr></table></figure><blockquote><ul><li>Host:定义一个名称</li><li>HostName:定义服务器的地址</li><li>User:定义服务器的用户名</li><li>Port:定义服务器的端口</li><li>IdentityFile:定义公钥位置</li><li>proxyCommand:定义代理命令</li><li><code>W</code>参数:通过<code>jump</code>服务器建立隧道连接</li></ul></blockquote><p>如果服务器需要多层跳板机才能访问，可以通过 <code>ssh</code> 的配置文件 <code>config</code> 中的 <code>ProxyJump</code> 来指定跳板机( <code>openssh&gt;=7.3</code> )。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 跳板机1</span><br>Host jump1<br>    HostName jumpIP1<br>    User user<br>    Port 22<br>    IdentityFile ~/.ssh/id_rsa<br><br><span class="hljs-comment"># 跳板机2</span><br>Host jump2<br>    HostName jumpIP2<br>    User user<br>    Port 22<br>    IdentityFile ~/.ssh/id_rsa<br><br>Host remote<br>  HostName remoteIP<br>  ProxyJump jump1,jump2<br></code></pre></td></tr></table></figure><p>配置完成后就可以通过 <code>ssh remote</code> 进行登入，会先经过跳板机 <code>jump1</code> ，然后经过跳板机 <code>jump2</code> 并登入到 <code>remote</code> 服务器。</p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho 默认主题功能增强</title>
    <link href="/blog/2020/03/Typecho%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA.html"/>
    <url>/blog/2020/03/Typecho%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA.html</url>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>在Typecho默认主题优化<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Typecho 默认主题优化 ](https://maojun.xyz/blog/2020/02/Typecho默认主题优化.html)">[1]</span></a></sup>中对 <code>Typecho</code> 的主题进行了一些页面显示优化。在此基础上，增加一些配置让 <code>Typecho</code> 更加实用。</p><h2 id="一言"><a href="#一言" class="headerlink" title="一言"></a>一言</h2><p> <code>Typecho</code> 默认主题的右侧搜索框下有空白区，显示有点空白。增加<strong>一言</strong>功能，让页面每次刷新或打开新页面时都可以显示<strong>一言</strong>，增加页面的趣味性。<strong>一言</strong>可以采用网络接口的方式或者读取本地的方式。这里采用本地读取<strong>一言</strong>,方便后期维护。</p><p>在默认的主题下，编辑 <code>function.php</code> 文件，追加以下内容:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  每日一句</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">one_sentence</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;data.dat&#x27;</span>;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type: text/html; charset=utf-8&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$filename</span> . <span class="hljs-string">&#x27; 数据文件不存在&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">explode</span>(PHP_EOL, <span class="hljs-variable">$data</span>);<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$data</span>[<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-variable">$data</span>)];<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r&quot;</span>,<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$result</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编辑 <code>header.php</code> 文件，找到以下内容所在的行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;nav id=<span class="hljs-string">&quot;nav-menu&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">clearfix</span>&quot; <span class="hljs-title">role</span>=&quot;<span class="hljs-title">navigation</span>&quot;&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">nav</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>&lt;/nav&gt;</code> 之前增加函数调用语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;span <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">kit</span>-<span class="hljs-title">hidden</span>-<span class="hljs-title">tb</span>&quot; <span class="hljs-title">style</span>=&quot;<span class="hljs-title">float</span>:<span class="hljs-title">right</span>&quot;&gt; &lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> <span class="hljs-title">one_sentence</span>();?&gt; &lt;/<span class="hljs-title">span</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>class</code>的样式是让<strong>一言</strong>在小屏幕不显示，宽屏时右对齐。</p></blockquote><p>在<strong>根目录</strong>添加 <code>data.dat</code> 文件,添加需要显示的<strong>一言</strong>内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs dat">往者不可谏，来着犹可追。——《论语·微子》<br>多行不义必自毙。——《左传》<br>敏而好学，不耻下问。——《论语·公冶长》<br>避其锐气，击其惰归。——《孙子兵法·军争》<br>十年树木，百年树人。——《管子·权修》<br>居安思危，思则有备，有备无患。——《左传》<br>天时不如地利，地利不如人和。——《孟子·公孙丑》<br>人谁无过？过而能改，善莫大焉。——《论语》<br>信言不美，美言不信。——老子<br>满招损，谦受益。——《尚书·大禹谟》<br>高岸为谷，深谷为陵。——《诗经·小雅》<br>天作孽，犹可违，自作孽，不可活。——《尚书》<br>言之无文，行而不远。——《左传》<br>三军可夺帅也，匹夫不可夺志也。——《论语·子罕》<br>天行健，君子以自强不息。——《周易·乾·象》<br>皮之不存，毛将焉附。——《左传》<br>路漫漫其修远兮，吾将上下而求索。——屈原《离骚》<br>长太息以掩涕兮，哀民生之多艰。——屈原《离骚》<br>人而无仪，不死何为。——《诗经·鄘风》<br>捐躯赴国难，视死忽如归。——曹植《白马篇》<br>天下之事常成于困约，而败于奢靡。——陆游<br>知之者不如好之者，好之者不如乐之者。——《论语·雍也》<br>志当存高远。——诸葛亮《诫外生书》<br>不去庆父，鲁难未已。——《左传》<br>老吾老，以及人之老；幼吾幼，以及人之幼。——《孟子·梁惠王下》<br>博学之，审问之，慎思之，明辨之，笃行之。——《中庸》<br>人非圣贤，孰能无过。——《训俗遗规》<br>亦余心之所善兮，虽九死其犹未悔。——《屈原·离骚》<br>若要功夫深，铁杵磨成针。——曹学《蜀中广记·上川南道彭山县》<br>少壮不努力，老大徒悲伤。——汉乐府古辞《长歌行》<br>穷则独善其身，达则兼济天下。——《孟子·尽心上》<br>仁者见仁，智者见智。——《易经·系辞上》<br>青，取之于蓝而青于蓝；冰，水为之而寒于水。——《荀子·劝学》<br>千羊之皮，不如一狐之腋。——《史记》<br>余将董道而不豫兮，固将重昏而终身。——《屈原·涉江》<br>高山仰止，景行行止。——《诗经·小雅·车辖》<br>锲而舍之，朽木不折；锲而不舍，金石可镂。——《荀子·劝学》<br>不傲才以骄人，不以宠而作威。——诸葛亮<br>尺有所短；寸有所长。物有所不足；智有所不明。——屈原《卜居》<br>言必信，行必果。——《论语·子路》<br>有志者事竟成。——《后汉书·耿列传》<br>其身正，不令而行；其身不正，虽令不从。——论语·子路<br>三人行，必有我师焉：择其善而从之，其不善者而改之。——《论语·述而》<br>非学无以广才，非志无以成学。——《三国·诸葛亮·诫子书》<br>绳锯木断，水滴石穿。——罗大经《鹤林玉露》<br>君子坦荡荡，小人长戚戚。——孔子<br>老当益壮，宁知白首之心；穷且益坚，不坠青云之志。——王勃<br>尺有所短，寸有所长。——《史记》<br>他山之石，可以攻玉。——《诗经·小雅·鹤鸣》<br>苟余心之端直兮，虽僻远其何伤？——《屈原·涉江》<br>人有不为也，而后可以有为。——《孟子·离娄下》<br>路漫漫其修远今，吾将上下而求索。——屈原<br>孔子登东山而小鲁，登泰山而小天下。——《孟子·尽心上》<br>积土而为山，积水而为海。——《荀子·儒效》<br>生于忧患，死于安乐。——《孟子·告子下》<br>知足不辱，知止不殆。——老子<br>桃李不言，下自成蹊。——《史记》<br>傲不可长，欲不可纵，乐不可极，志不可满。——魏徵<br>既来之，则安之。——《论语·季氏》<br>知己知彼，百战不殆。——《孙子兵法·谋攻》<br>真者，精诚之至也，不精不诚，不能动人。——《庄子·渔夫》<br>独学而无友，则孤陋而寡闻。——《礼记·杂记》<br>勿以恶小而为之，勿以善小而不为。惟贤惟德，能服于人。——刘备<br></code></pre></td></tr></table></figure><blockquote><p>注意：一言的内容不要过长，不然页面显示效果不好。</p></blockquote><p>保存后刷新页面即可查看效果。</p><h2 id="博客总访问"><a href="#博客总访问" class="headerlink" title="博客总访问"></a>博客总访问</h2><p>为了统计博客一共被访问了多少次，可以在页面底部增加统计功能。在默认主题目录下编辑 <code>function.php</code> 内容，追加以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">total_view</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$db</span> = <span class="hljs-title class_">Typecho_Db</span>::<span class="hljs-title function_ invoke__">get</span>();<br>            <span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">fetchAll</span>(<span class="hljs-string">&#x27;SELECT SUM(VIEWS) FROM `typecho_contents`&#x27;</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">number_format</span>(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;SUM(VIEWS)&#x27;</span>]);<br>        &#125;<br></code></pre></td></tr></table></figure><p>然后编辑 <code>footer.php</code> 文件，在 <code>&lt;/footer&gt;</code> 标签前添加：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">_e</span>(<span class="hljs-string">&#x27;Total UV): &#x27;</span>); <span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">get_total_view</span>(<span class="hljs-variable">$this</span>); <span class="hljs-meta">?&gt;</span>.<br></code></pre></td></tr></table></figure><p>保存后刷新页面即可查看效果。</p><h2 id="文章更新时间："><a href="#文章更新时间：" class="headerlink" title="文章更新时间："></a>文章更新时间：</h2><p><code>Typecho </code>默认的文章页面只显示创建时间，而没有更新时间。不方便浏览者知晓页面内容是否有更新变化。同样在默认主题的目录下编辑 <code>post.php</code> 文件,在 <code>&lt;ul class=&quot;post-meta&quot;&gt;&lt;/ul&gt;</code> 下找到之前的<strong>时间</strong>文字并将其修改为<strong>发布时间</strong>，然后在下面增加一行代码显示<strong>更新时间</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;li&gt;<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">_e</span>(<span class="hljs-string">&#x27;更新时间: &#x27;</span>); <span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;modified);<span class="hljs-meta">?&gt;</span>&lt;/li&gt;<br></code></pre></td></tr></table></figure><p>保存刷新页面查看。</p><h2 id="归档页自定义模板"><a href="#归档页自定义模板" class="headerlink" title="归档页自定义模板"></a>归档页自定义模板</h2><p><code>Typecho </code>默认的归档页面是有主页显示效果类似的。里面包含了文章内容，为了更直接的查看文章归档，可以只保留标题和评论数显示。在默认主题目录下新建 <code>timeline.php</code>（保留原先的 <code>archive.php</code> )文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;__TYPECHO_ROOT_DIR__&#x27;</span>)) <span class="hljs-keyword">exit</span>; <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * archive</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@package</span> custom</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">need</span>(<span class="hljs-string">&#x27;header.php&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">col</span>-<span class="hljs-title">mb</span>-12 <span class="hljs-title">col</span>-12&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">main</span>&quot; <span class="hljs-title">role</span>=&quot;<span class="hljs-title">main</span>&quot;&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">article</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">post</span>&quot; <span class="hljs-title">itemscope</span> <span class="hljs-title">itemtype</span>=&quot;<span class="hljs-title">http</span>://<span class="hljs-title">schema</span>.<span class="hljs-title">org</span>/<span class="hljs-title">BlogPosting</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">h1</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">post</span>-<span class="hljs-title">title</span>&quot; <span class="hljs-title">itemprop</span>=&quot;<span class="hljs-title">name</span> <span class="hljs-title">headline</span>&quot;&gt;&lt;<span class="hljs-title">a</span> <span class="hljs-title">itemprop</span>=&quot;<span class="hljs-title">url</span>&quot; <span class="hljs-title">href</span>=&quot;&lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">permalink</span>() ?</span><br><span class="hljs-class">&gt;&quot;&gt;&lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">title</span>() ?&gt;&lt;/<span class="hljs-title">a</span>&gt;&lt;/<span class="hljs-title">h1</span>&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span> <span class="hljs-title">if</span>($<span class="hljs-title">this</span>-&gt;<span class="hljs-title">user</span>-&gt;<span class="hljs-title">hasLogin</span>()):?&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">a</span> <span class="hljs-title">href</span>=&quot;&lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">options</span>-&gt;<span class="hljs-title">adminUrl</span>(); ?&gt;<span class="hljs-title">write</span>-<span class="hljs-title">page</span>.<span class="hljs-title">php</span>?<span class="hljs-title">cid</span>=&lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">cid</span>;?&gt;&quot; &gt;编辑&lt;/<span class="hljs-title">a</span>&gt;</span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span> <span class="hljs-title">endif</span>;?&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class"></span><br><span class="hljs-class">        &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">post</span>-<span class="hljs-title">content</span>&quot; <span class="hljs-title">itemprop</span>=&quot;<span class="hljs-title">articleBody</span>&quot;&gt;</span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">widget</span>(&#x27;<span class="hljs-title">Widget_Contents_Post_Recent</span>&#x27;, &#x27;<span class="hljs-title">pageSize</span>=10000&#x27;)-&gt;<span class="hljs-title">to</span>($<span class="hljs-title">archives</span>);</span><br><span class="hljs-class">    $<span class="hljs-title">year</span>=0; $<span class="hljs-title">mon</span>=0; $<span class="hljs-title">i</span>=0; $<span class="hljs-title">j</span>=0;</span><br><span class="hljs-class">    $<span class="hljs-title">output</span> = &#x27;&lt;<span class="hljs-title">div</span> <span class="hljs-title">id</span>=&quot;<span class="hljs-title">archives</span>&quot;&gt;&#x27;;</span><br><span class="hljs-class">    <span class="hljs-title">while</span>($<span class="hljs-title">archives</span>-&gt;<span class="hljs-title">next</span>()):</span><br><span class="hljs-class">        $<span class="hljs-title">year_tmp</span> = <span class="hljs-title">date</span>(&#x27;<span class="hljs-title">Y</span>&#x27;,$<span class="hljs-title">archives</span>-&gt;<span class="hljs-title">created</span>);</span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">widget</span>(&#x27;<span class="hljs-title">Widget_Contents_Post_Recent</span>&#x27;, &#x27;<span class="hljs-title">pageSize</span>=10000&#x27;)-&gt;<span class="hljs-title">to</span>($<span class="hljs-title">archives</span>);</span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span> <span class="hljs-title">if</span> (!<span class="hljs-title">defined</span>(&#x27;<span class="hljs-title">__TYPECHO_ROOT_DIR__</span>&#x27;)) <span class="hljs-title">exit</span>; ?&gt;</span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span></span><br><span class="hljs-class">/**</span><br><span class="hljs-class"> * <span class="hljs-title">archive</span></span><br><span class="hljs-class"> *</span><br><span class="hljs-class"> * @<span class="hljs-title">package</span> <span class="hljs-title">custom</span></span><br><span class="hljs-class"> */</span><br><span class="hljs-class"> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">need</span>(&#x27;<span class="hljs-title">header</span>.<span class="hljs-title">php</span>&#x27;); ?&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">col</span>-<span class="hljs-title">mb</span>-12 <span class="hljs-title">col</span>-12&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">main</span>&quot; <span class="hljs-title">role</span>=&quot;<span class="hljs-title">main</span>&quot;&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">article</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">post</span>&quot; <span class="hljs-title">itemscope</span> <span class="hljs-title">itemtype</span>=&quot;<span class="hljs-title">http</span>://<span class="hljs-title">schema</span>.<span class="hljs-title">org</span>/<span class="hljs-title">BlogPosting</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">h1</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">post</span>-<span class="hljs-title">title</span>&quot; <span class="hljs-title">itemprop</span>=&quot;<span class="hljs-title">name</span> <span class="hljs-title">headline</span>&quot;&gt;&lt;<span class="hljs-title">a</span> <span class="hljs-title">itemprop</span>=&quot;<span class="hljs-title">url</span>&quot; <span class="hljs-title">href</span>=&quot;&lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">permalink</span>() ?</span><br><span class="hljs-class">&gt;&quot;&gt;&lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">title</span>() ?&gt;&lt;/<span class="hljs-title">a</span>&gt;&lt;/<span class="hljs-title">h1</span>&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span> <span class="hljs-title">if</span>($<span class="hljs-title">this</span>-&gt;<span class="hljs-title">user</span>-&gt;<span class="hljs-title">hasLogin</span>()):?&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">a</span> <span class="hljs-title">href</span>=&quot;&lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">options</span>-&gt;<span class="hljs-title">adminUrl</span>(); ?&gt;<span class="hljs-title">write</span>-<span class="hljs-title">page</span>.<span class="hljs-title">php</span>?<span class="hljs-title">cid</span>=&lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">cid</span>;?&gt;&quot; &gt;编辑&lt;/<span class="hljs-title">a</span>&gt;</span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span> <span class="hljs-title">endif</span>;?&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class"></span><br><span class="hljs-class">        &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">post</span>-<span class="hljs-title">content</span>&quot; <span class="hljs-title">itemprop</span>=&quot;<span class="hljs-title">articleBody</span>&quot;&gt;</span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">widget</span>(&#x27;<span class="hljs-title">Widget_Contents_Post_Recent</span>&#x27;, &#x27;<span class="hljs-title">pageSize</span>=10000&#x27;)-&gt;<span class="hljs-title">to</span>($<span class="hljs-title">archives</span>);</span><br><span class="hljs-class">    $<span class="hljs-title">year</span>=0; $<span class="hljs-title">mon</span>=0; $<span class="hljs-title">i</span>=0; $<span class="hljs-title">j</span>=0;</span><br><span class="hljs-class">    $<span class="hljs-title">output</span> = &#x27;&lt;<span class="hljs-title">div</span> <span class="hljs-title">id</span>=&quot;<span class="hljs-title">archives</span>&quot;&gt;&#x27;;</span><br><span class="hljs-class">    <span class="hljs-title">while</span>($<span class="hljs-title">archives</span>-&gt;<span class="hljs-title">next</span>()):</span><br><span class="hljs-class">        $<span class="hljs-title">year_tmp</span> = <span class="hljs-title">date</span>(&#x27;<span class="hljs-title">Y</span>&#x27;,$<span class="hljs-title">archives</span>-&gt;<span class="hljs-title">created</span>);</span><br><span class="hljs-class">        $<span class="hljs-title">mon_tmp</span> = <span class="hljs-title">date</span>(&#x27;<span class="hljs-title">m</span>&#x27;,$<span class="hljs-title">archives</span>-&gt;<span class="hljs-title">created</span>);</span><br><span class="hljs-class">        $<span class="hljs-title">y</span>=$<span class="hljs-title">year</span>; $<span class="hljs-title">m</span>=$<span class="hljs-title">mon</span>;</span><br><span class="hljs-class">        <span class="hljs-title">if</span> ($<span class="hljs-title">mon</span> != $<span class="hljs-title">mon_tmp</span> &amp;&amp; $<span class="hljs-title">mon</span> &gt; 0) $<span class="hljs-title">output</span> .= &#x27;&lt;/<span class="hljs-title">ul</span>&gt;&lt;/<span class="hljs-title">li</span>&gt;&#x27;;</span><br><span class="hljs-class">        <span class="hljs-title">if</span> ($<span class="hljs-title">year</span> != $<span class="hljs-title">year_tmp</span> &amp;&amp; $<span class="hljs-title">year</span> &gt; 0) $<span class="hljs-title">output</span> .= &#x27;&lt;/<span class="hljs-title">ul</span>&gt;&#x27;;</span><br><span class="hljs-class">        <span class="hljs-title">if</span> ($<span class="hljs-title">year</span> != $<span class="hljs-title">year_tmp</span>) </span>&#123;<br>            <span class="hljs-variable">$year</span> = <span class="hljs-variable">$year_tmp</span>;<br>            <span class="hljs-variable">$output</span> .= <span class="hljs-string">&#x27;&lt;h3&gt;&#x27;</span>. <span class="hljs-variable">$year</span> .<span class="hljs-string">&#x27; 年&lt;/h3&gt;&lt;ul&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$mon</span> != <span class="hljs-variable">$mon_tmp</span>) &#123;<br>            <span class="hljs-variable">$mon</span> = <span class="hljs-variable">$mon_tmp</span>;<br>            <span class="hljs-variable">$output</span> .= <span class="hljs-string">&#x27;&lt;li&gt;&lt;span&gt;&#x27;</span>. <span class="hljs-variable">$mon</span> .<span class="hljs-string">&#x27; 月&lt;/span&gt;&lt;ul&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-variable">$output</span> .= <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;d日: &#x27;</span>,<span class="hljs-variable">$archives</span>-&gt;created).<span class="hljs-string">&#x27;&lt;a href=&quot;&#x27;</span>.<span class="hljs-variable">$archives</span>-&gt;permalink .<span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>. <span class="hljs-variable">$archiv</span><br>es-&gt;title .<span class="hljs-string">&#x27;&lt;/a&gt; &lt;em&gt;(&#x27;</span>. <span class="hljs-variable">$archives</span>-&gt;commentsNum.<span class="hljs-string">&#x27;)&lt;/em&gt;&lt;/li&gt;&#x27;</span>;<br>    <span class="hljs-keyword">endwhile</span>;<br>    <span class="hljs-variable">$output</span> .= <span class="hljs-string">&#x27;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br><span class="hljs-meta">?&gt;</span><br>        &lt;/div&gt;<br>    &lt;/article&gt;<br>&lt;/div&gt;&lt;!-- end <span class="hljs-comment">#main--&gt;</span><br><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">need</span>(<span class="hljs-string">&#x27;sidebar.php&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">need</span>(<span class="hljs-string">&#x27;footer.php&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后登入到 <code>Typecho</code> 的管理后台，新建<strong>独立页面</strong>,然后选择默认为 <strong>timeline</strong> ，保存后点击新建的页面名称查看效果。</p><h2 id="分页标题"><a href="#分页标题" class="headerlink" title="分页标题"></a>分页标题</h2><p><code>Typecho </code>的文章分页标题默认都是一样的，为了更好的区分页面。可以在不同页面中显示不同的页面标题。编辑 <code>header.php</code> 文件，在 &lt;<code>title&gt;&lt;/title&gt;</code> 尾部添加以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;_currentPage&gt;<span class="hljs-number">1</span>) <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27; _ 第 &#x27;</span>.<span class="hljs-variable">$t</span><br>his-&gt;_currentPage.<span class="hljs-string">&#x27; 页 &#x27;</span>; <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>保存后刷新页面即可查看到效果。</p><h2 id="浏览器标识"><a href="#浏览器标识" class="headerlink" title="浏览器标识"></a>浏览器标识</h2><p>可以给访问的用户添加浏览器标识，在默认主题目录下编辑 <code>function.php</code> 文件，追加以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/** 获取浏览器信息 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBrowser</span>(<span class="hljs-params"><span class="hljs-variable">$agent</span></span>)</span><br><span class="hljs-function"></span>&#123; <span class="hljs-variable">$outputer</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/MSIE\s([^\s|;]+)/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; IE浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/FireFox\/([^\s]+)/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 火狐浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/Maxthon([\d]*)\/([^\s]+)/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 傲游浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;#SE 2([a-zA-Z0-9.]+)#i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 搜狗浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;#360([a-zA-Z0-9.]+)#i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 360浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/Edge([\d]*)\/([^\s]+)/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Edge&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/EdgiOS([\d]*)\/([^\s]+)/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Edge&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/UC/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; UC浏览器 &#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/OPR/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 欧朋浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/MicroMesseng/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 微信内嵌浏览器&#x27;</span>;<br>    &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/WeiBo/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 微博内嵌浏览器&#x27;</span>;<br>    &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/QQ/i&#x27;</span>, <span class="hljs-variable">$agent</span>)||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/QQBrowser\/([^\s]+)/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; QQ浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/MQBHD/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; QQ浏览器 &#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/BIDU/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 百度浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/LBBROWSER/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 猎豹浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/TheWorld/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 世界之窗浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/XiaoMi/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 小米浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/UBrowser/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; UC浏览器 &#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/mailapp/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; email内嵌浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/2345Explorer/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 2345浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/Sleipnir/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 神马浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/YaBrowser/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Yandex浏览器&#x27;</span>;<br>    &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/Opera[\s|\/]([^\s]+)/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Opera浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/MZBrowser/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 魅族浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/VivoBrowser/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; vivo浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/Quark/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 夸克浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/mixia/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 米侠浏览器&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/fusion/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 客户端&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/CoolMarket/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 基安内置浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/Thunder/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; 迅雷内置浏览器&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/Chrome([\d]*)\/([^\s]+)/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Chrome &#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/safari\/([^\s]+)/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$outputer</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Safari&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-variable">$outputer</span>;<br>&#125;<br><span class="hljs-comment">/** 获取操作系统信息 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOs</span>(<span class="hljs-params"><span class="hljs-variable">$agent</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$os</span> = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/win/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/nt 6.0/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>            <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Windows Vista&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/nt 6.1/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>            <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Windows 7&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/nt 6.2/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>            <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Windows 8&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/nt 6.3/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>            <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Windows 8.1&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/nt 5.1/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>            <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Windows XP&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/nt 10.0/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>            <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Windows 10&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Windows&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/android/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/android 9/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Android P&#x27;</span>;<br>    &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/android 8/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Android O&#x27;</span>;<br>    &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/android 7/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Android N&#x27;</span>;<br>    &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/android 6/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Android M&#x27;</span>;<br>    &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/android 5/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Android L&#x27;</span>;<br>    &#125;<br><span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Android&#x27;</span>;<br>&#125;<br>    &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ubuntu/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Linux&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/linux/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; Linux&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/iPhone/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; iPhone&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/iPad/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; iPad&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/mac/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;&lt;i&gt;&lt;/i&gt; OSX&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/cros/i&#x27;</span>, <span class="hljs-variable">$agent</span>)) &#123;<br>        <span class="hljs-variable">$os</span> = <span class="hljs-string">&#x27;chrome os&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-variable">$os</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在对应需要显示浏览器标识的地方输出以上函数即可。</p><h2 id="默认后台地址"><a href="#默认后台地址" class="headerlink" title="默认后台地址"></a>默认后台地址</h2><p>默认的后台登入地址是域名后跟<code>/admin</code>，如果熟悉<code>Typecho</code>的用户就有可能尝试登入。为了安全可以将其修改为其他登入地址，进入网站的<strong>根目录</strong>，编辑 <strong>config.inc.php</strong> 文件，找到下面这行，将<code>/admin</code>修改成自己想要的后台登入地址。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/** 后台路径(相对路径) */</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;__TYPECHO_ADMIN_DIR__&#x27;</span>, <span class="hljs-string">&#x27;/admin/&#x27;</span>);<br></code></pre></td></tr></table></figure><p>保存后将<strong>根目录</strong>的 <strong>admin</strong> 文件夹重名名修改的地址。</p><p>保存后刷新页面查看效果。</p><h2 id="分页页数"><a href="#分页页数" class="headerlink" title="分页页数"></a>分页页数</h2><p><code>Typecho </code>的默认分页数量是 <code>5</code>，可以将其增加到 <code>10 </code>提高阅读体验。编辑默认主题目录下的 <code>functioin.php</code> 文件，追加以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 自定义分页数量</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">themeInit</span>(<span class="hljs-params"><span class="hljs-variable">$archive</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$archive</span>-&gt;<span class="hljs-title function_ invoke__">is</span>(<span class="hljs-string">&#x27;index&#x27;</span>)) &#123;<br>                <span class="hljs-variable">$archive</span>-&gt;parameter-&gt;pageSize = <span class="hljs-number">10</span>;<br>        &#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$archive</span>-&gt;<span class="hljs-title function_ invoke__">is</span>(<span class="hljs-string">&#x27;archive&#x27;</span>))&#123;<br>                <span class="hljs-variable">$archive</span>-&gt;parameter-&gt;pageSize = <span class="hljs-number">10</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>保存后刷新即可。</p><h2 id="文章自动摘要"><a href="#文章自动摘要" class="headerlink" title="文章自动摘要"></a>文章自动摘要</h2><p><code>Typecho</code> 的文章在主页默认是全文显示了，可以在后台编写文章时通过<strong>摘要分隔线</strong>功能划分显示的摘要部分，每次手动设置容易忘记。为了简单起见，可以在代码中设置自动摘要内容。在默认主题目录下编辑 <code>index.php</code> ，找到以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">content</span>(<span class="hljs-string">&#x27;阅读剩余部分&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>将其内容替换为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">excerpt</span>(<span class="hljs-number">200</span>, <span class="hljs-string">&#x27;...&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上面的&#96;200&#96;&#96;数值可以自行修改，表示截取多少个字节作为摘要显示。</p><h2 id="GitHub-star"><a href="#GitHub-star" class="headerlink" title="GitHub star"></a>GitHub star</h2><p>分享 GitHub 仓库时可以让其显示 <code>star</code> 的数量，只需要增加以下代码即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ghbtns.com/github-btn.html?user=amplest&amp;repo=molerose-typecho-themes-dev&amp;type=star&amp;count=true&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;170px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;20px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="文章回复可见"><a href="#文章回复可见" class="headerlink" title="文章回复可见"></a>文章回复可见</h2><p>文章正文设置回复可见。在默认主题目录下编辑 <code>post.php</code> 文件， 找到 <code>&lt;?php $this-&gt;content(&#39;&#39;); ?&gt;</code> ,将其替换为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$db</span> = <span class="hljs-title class_">Typecho_Db</span>::<span class="hljs-title function_ invoke__">get</span>();<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">select</span>()-&gt;<span class="hljs-keyword">from</span>(<span class="hljs-string">&#x27;table.comments&#x27;</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;cid = ?&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;cid)<br>    -&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;mail = ?&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">remember</span>(<span class="hljs-string">&#x27;mail&#x27;</span>,<span class="hljs-literal">true</span>))<br>    -&gt;<span class="hljs-title function_ invoke__">limit</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">fetchAll</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;user-&gt;<span class="hljs-title function_ invoke__">hasLogin</span>() || <span class="hljs-variable">$result</span>) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/\[hide\](.*?)\[\/hide\]/sm&quot;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;reply2view&quot;&gt;&lt;i class=&quot;icon-lock-open&quot;&gt;&lt;/i&gt;$1&lt;/div&gt;&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;content);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/\[hide\](.*?)\[\/hide\]/sm&quot;</span>,<span class="hljs-string">&#x27;&lt;div class=&quot;reply2view&quot;&gt;&lt;i class=&quot;icon-lock&quot;&gt;&lt;/i&gt;此处内容需要评论回复后方可阅读。&lt;/div&gt;&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;content);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>（本文完）</p><p><strong>参考链接：</strong></p><ul><li><a href="https://web.archive.org/web/20201019231412/https://www.lanka.cn/Typecho-1_3284.html#comment-763">Typecho非插件实现内容回复可见功能</a></li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://maojun.xyz/blog/2020/02/Typecho%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96.html">Typecho 默认主题优化 </a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客平台</tag>
      
      <tag>Typecho</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho 开启Redis缓存</title>
    <link href="/blog/2020/02/Typecho%E5%BC%80%E5%90%AFRedis%E7%BC%93%E5%AD%98.html"/>
    <url>/blog/2020/02/Typecho%E5%BC%80%E5%90%AFRedis%E7%BC%93%E5%AD%98.html</url>
    
    <content type="html"><![CDATA[<h2 id="延迟问题"><a href="#延迟问题" class="headerlink" title="延迟问题"></a>延迟问题</h2><p> 在访问博客的时候会稍有等待。但是博客内容以文字为主，配图为辅。页面的延迟会给用户带来不好的体验，所以想着加一个缓存提高页面的响应速度。</p><p>为了统计不同地区访问的速度，使用了站长工具的多个地点Ping服务器<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[多个地点Ping服务器](http://ping.chinaz.com/)">[1]</span></a></sup>来进行统计分析。检测完发现除了海外地区访问速度善可，国内大部分地区访问速度都不理想。</p><h2 id="配置缓存"><a href="#配置缓存" class="headerlink" title="配置缓存"></a>配置缓存</h2><p>个人博客是属于<strong>读多写少</strong>的业务。为了提高服务的响应速度，决定给<code>Typecho</code>增加缓存，选用目前市场上热门的<code>Redis</code>作为缓存。</p><p>  以<code>Centos 7.xx</code>环境为例，首先安装<code>redis</code>服务和<code>php-redis</code>模块服务:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo yum -y install redis<br>$ sudo yum -y install php-pecl-redis<br></code></pre></td></tr></table></figure><p>  安装完后添加开机自启服务并启动<code>redis</code>:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl <span class="hljs-built_in">enable</span> redis<br>$ sudo systemctl start redis<br></code></pre></td></tr></table></figure><p>  检查<code>redis</code>服务是否启动成功：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ systemctl status redis<br></code></pre></td></tr></table></figure><p>  检查<code>php-redis</code>模块是否安装成功：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php -m |grep redis<br></code></pre></td></tr></table></figure><blockquote><p> 有输出内容则说明安装成功。</p></blockquote><p>安装完缓存服务后，需要在<code>Typecho</code>中开启缓存。为了让<code>Typecho</code>可以支持<code>Redis</code>缓存，这里采用安装插件的方式让<code>Typecho</code>集成缓存配置功能。下载TpCache插件<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[TpCache](https://github.com/phpgao/TpCache)">[2]</span></a></sup>，放入到<code>Typecho</code>的<strong>plugins</strong>目录下。然后去后台点击<strong>插件管理</strong>按钮并启用<strong>TpCache</strong>插件。接着点击<strong>设置</strong>按钮进入缓存配置页面，填写相应的配置信息，点击保存设置。</p><p>配置完缓存后，可以去页面刷新查看效果。</p><p>注意配置是否开启了<strong>对登入用户失效</strong>,如果开启则用隐私窗口或者先退出账号再测试。</p><p>验证<code>Redis</code>的缓存是否在工作，可以进入服务器中输入命令<code>redis-cli</code>登入<code>Redis</code>客户端：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-cli<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;43efe54439fbb9c6f647120ec9e02821&quot;</span><br>2) <span class="hljs-string">&quot;fcf92f7cb8f50717bba68d1655b4c9a2&quot;</span><br>3) <span class="hljs-string">&quot;a8356448e7efd93fdc4c068d4bcb91fb&quot;</span><br>4) <span class="hljs-string">&quot;c9db569cb388e160e4b86ca1ddff84d7&quot;</span><br>5) <span class="hljs-string">&quot;04ce4f80d6159435fb9b9362fa19442d&quot;</span><br>6) <span class="hljs-string">&quot;30da41efe7963d8e81fc37eaf8b656b1&quot;</span><br>7) <span class="hljs-string">&quot;45e1dc83b4f004caf1b43bbceccad223&quot;</span><br>8) <span class="hljs-string">&quot;271f8547640193f2e8dcaa8bd6cd4be7&quot;</span><br></code></pre></td></tr></table></figure><p>如果输入<code>keys *</code>有输出则说明<code>Redis</code>缓存已经起作用了。或者可以通过<code>redis-cli</code>的<code>info</code>命令查看缓存命中信息：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ redis-cli<br>127.0.0.1:6379&gt; info<br><span class="hljs-comment"># Stats</span><br>...<br>keyspace_hits:26<br>keyspace_misses:9<br>...<br></code></pre></td></tr></table></figure><blockquote><p>通过**keyspace_hits&#x2F;(keyspace_hits+keyspace_misses)**计算命令率。</p></blockquote><p>(本文完）</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://ping.chinaz.com/">多个地点Ping服务器</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/phpgao/TpCache">TpCache</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客平台</tag>
      
      <tag>Typecho</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置 docker 镜像加速</title>
    <link href="/blog/2020/02/%E9%85%8D%E7%BD%AEdocker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F.html"/>
    <url>/blog/2020/02/%E9%85%8D%E7%BD%AEdocker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F.html</url>
    
    <content type="html"><![CDATA[<h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><p>根据官方文档给出的配置步骤进行操作：  </p><p>针对 Docker 客户端版本大于 1.10.0 版本的，通过修改daemon配置文件 <code>/etc/docker/daemon.json</code> 来加速：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://8jngaj3j.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p>根据以上命令配置并重启 docke r服务后，重新进行镜像拉取。</p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 docker 搭建 nextcloud 网盘</title>
    <link href="/blog/2020/02/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAnextcloud%E7%BD%91%E7%9B%98.html"/>
    <url>/blog/2020/02/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAnextcloud%E7%BD%91%E7%9B%98.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Nextcloud 中文有下一代云盘的意思，在这个私有部署网盘上我们可以做很多事情：资料存储、密码管理、存储、离线下载等。有些功能已经自带集成在 Nextcloud 中了，另一些功能可以通过安装插件实现。</p><p>下面使用 docker-compose 来安装配置 nextcloud 网盘。</p><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><ul><li>centos 7.x</li><li>docker</li><li>docker-compose</li></ul><blockquote><p> 使用docker-compose可以快速编排<code>docker</code>服务，让容器管理变得简单。</p></blockquote><p>编写 <code>docker-compose.yaml</code> 文件，内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nextcloud:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nextcloud:apache</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">nextcloud_web</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">uid=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">gid=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">upload_max_size=10g</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">apc_shm_size=128m</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">opcache_mem_size=128</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">cron_period=15m</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">tz=aisa/shanghai</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">domain=http://exmaple.com</span><br><br><br>    <span class="hljs-attr">volumes:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">/app/docker/nextcloud:/var/www/html</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">7009</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">7009</span><span class="hljs-string">:80/tcp</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br><br>  <span class="hljs-attr">onlyoffice:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">onlyoffice/documentserver</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">onlyoffice</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">onlyoffice</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis_server_host=redis</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis_server_port=6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/app/docker/onlyoffice/data:/var/www/onlyoffice/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/app/docker/onlyoffice/logs:/var/log/onlyoffice</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9000</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9000</span><span class="hljs-string">:80</span><br></code></pre></td></tr></table></figure><blockquote><p>注意:<code>yaml</code>文件严格区分缩进和空格。</p></blockquote><p><code>docker-compose</code>参数说明:</p><ul><li>image 镜像地址</li><li>container_name 容器名称</li><li>depends_on 依赖服务（关系到启动顺序,先启动依赖）</li><li>enviroment 环境变量参数，对应相应的软件服务</li><li>volumes 将docker里的目录和宿主机目录映射挂载</li><li>expose 需要暴露的端口</li><li>ports 和宿主机端口映射</li><li>restart:always 设置开机自启</li><li>links 设置连接容器（如web服务连接到db)</li></ul><blockquote><p>注意,容器无法保存数据，删除后数据就丢失了，配置volumes有利于数据持久化到硬盘</p></blockquote><p>由于是个人和小团队使用，上述的配置中使用了<code>nextcloud</code>默认的<code>sqlite</code>数据库。如果你的<code>nextcloud</code>需要考虑到一定的并发和一定规模人数使用，建议使用<code>mysql</code>等数据库替换内嵌型数据库。</p><p>配置redis: 上述的配置我们让docker依赖了redis，这个需要配置才能让docker redis缓存生效。编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim /app/docker/nextcloud/config/config.php<br></code></pre></td></tr></table></figure><blockquote><p>具体路径为<code>docker-compse</code>中volume中映射的宿主机路径</p></blockquote><p>找准位置在【’memcache.local’ &#x3D;&gt; ‘\OC\Memcache\APCu’,】 这行后面</p><p>增加下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;memcache.locking&#x27;</span> =&gt; <span class="hljs-string">&#x27;\OC\Memcache\Redis&#x27;</span>,<br><span class="hljs-string">&#x27;redis&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<br>     <span class="hljs-string">&#x27;host&#x27;</span> =&gt; <span class="hljs-string">&#x27;redis&#x27;</span>,<br>     <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">6379</span>,<br>      ),<br></code></pre></td></tr></table></figure><blockquote><p>注意修改对应的<code>host</code>和<code>port</code>，<code>redis</code>和<code>nextcloud</code>同<code>docekr</code>网络故可以用<code>container name</code>替代。由于修改的是<strong>php</strong>脚本文件，所以保存后无需重启就可生效。</p></blockquote><p>检查redis配置是否生效: 进入<code>redis</code>容器环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker <span class="hljs-built_in">exec</span> -it redis /bin/sh<br></code></pre></td></tr></table></figure><p>执行redis监控</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli monitor<br></code></pre></td></tr></table></figure><p>然后去访问<code>nextcloud</code>页面并进行页面操作。查看<code>redis</code>监控日志，如果有日志输出则说明配置成功。</p><p>启动服务: 在docker-compose.yaml文件目录使用<code>docker-compose up -d</code>即可后台启动服务,启动并设置账号密码登入。</p><p>安装插件： 由于服务是安装在内网上，并且是直接通过ip和端口访问的，所以并没有配置https.部门需要https状态才可以使用，故不在这推荐，下面一些插件都是可以在http状态使用的。插件可以在应用里面找到并开启，但是nextcloud插件市场在国内访问是有问题的，无法显示插件信息及下载插件。</p><p>所以我们可以通过离线安装的方式使用插件： <a href="https://web.archive.org/web/20201019230404/https://apps.nextcloud.com/">all apps - app store - nextcloud</a> 在nextcloud应用市场找到插件包并下载，然后将其上传到nextcloud的apps目录,如果是linux系统可以直接借助scp或rsync上传.以scp上传onlyoffice插件为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ scp onlyoffice.tar.gz [email protected]:/app/docker/nextloud/apps<br></code></pre></td></tr></table></figure><p>进入apps目录解压并删除压缩包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$  tar -zxf onlyoffice.tar.gz &amp;&amp; <span class="hljs-built_in">rm</span> -rf onlyoffice.tar.gz<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果不是root账号，可以会上传失败。(docker目录是root用户组)</p></blockquote><p>以下插件安装步骤同上：</p><ul><li><p>onlyoffice office 文档在线编辑，支持团队协作。这个插件需要配置本地服务使用（即docker-compose.yaml中的onlyoffice),然后在设置中配置对应的onlyoffice 服务地址和开启对应的在线预览office格式。</p></li><li><p>drawio 在线画流程图，uml工具。官方可以通过draw.io直接使用，不过要同步数据的话要登入goole或github等，国内用这些服务容易受限于网络环境。用nextcloud 插件可以让数据保存在网盘上。在设置，其他设置下服务地址，主题和默认语言设置等。</p></li></ul><p>新建drawio文件,选择+创建diagam文件会创建一个xml格式的文件并进入drawio工作空间。 选择导入draw.io创建保存的本地文件</p><blockquote><p>注意，在draw.io保存的格式是<code>.drawio</code>格式,不能直接用nextcloud点击打开</p></blockquote><ul><li>javascript xmpp chat 在线即时沟通工具。 安装后进入设置,找到javascript xmpp chat设置即可。</li></ul><p>注意，默认消息是不会持久化保存的，如果需要将聊天记录存档，需要通过右侧聊天窗口右下角点击设置</p><p>Nextcloud 具有高度的可定制性，上面只是 Nextcloud 的一小部分功能，更多功能可以参考 Nextcloud 官方文档。</p><p>(本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>对象存储</tag>
      
      <tag>Nextcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho 默认主题优化</title>
    <link href="/blog/2020/02/Typecho%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96.html"/>
    <url>/blog/2020/02/Typecho%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96.html</url>
    
    <content type="html"><![CDATA[<h2 id="优化需求"><a href="#优化需求" class="headerlink" title="优化需求"></a>优化需求</h2><p>在博客迁移到Typecho<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[博客迁移到 Typecho](https://maojun.xyz/blog/2020/02/博客迁移到Typecho.html)">[1]</span></a></sup>文章中，介绍了迁移到<code>Typecho</code>后做的一些配置。为了让默认主题发挥出更好的效果，在原基础上对其进一步优化。主要优化的内容有：</p><ul><li>前置上下篇文章</li><li>文章页编辑功能</li><li>独立页编辑功能</li><li>文章页阅读次数</li><li>文章页加载时间</li></ul><h2 id="前置上下篇文章"><a href="#前置上下篇文章" class="headerlink" title="前置上下篇文章"></a>前置上下篇文章</h2><p><code>Typecho</code>默认主题的上下篇文章是在评论输入框后面的。如果前置上下篇文章会和文章之间的关联性更强，方便用户点击查看。 编辑<code>post.php</code>文件，默认的代码顺序如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">need</span>(<span class="hljs-string">&#x27;comments.php&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><br>   &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">post</span>-<span class="hljs-title">near</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span>&gt;上一篇: &lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">thePrev</span>(&#x27;%<span class="hljs-title">s</span>&#x27;,&#x27;没有了&#x27;); ?&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span>&gt;下一篇: &lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">theNext</span>(&#x27;%<span class="hljs-title">s</span>&#x27;,&#x27;没有了&#x27;); ?&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将行尾部分的上下篇代码前置到评论前：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">post</span>-<span class="hljs-title">near</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span>&gt;上一篇: &lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">thePrev</span>(&#x27;%<span class="hljs-title">s</span>&#x27;,&#x27;没有了&#x27;); ?&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span>&gt;下一篇: &lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">theNext</span>(&#x27;%<span class="hljs-title">s</span>&#x27;,&#x27;没有了&#x27;); ?&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">ul</span>&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class">    &lt;?<span class="hljs-title">php</span> $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">need</span>(&#x27;<span class="hljs-title">comments</span>.<span class="hljs-title">php</span>&#x27;); ?&gt;</span><br></code></pre></td></tr></table></figure><p>保存退出刷新页面，即可查看到效果。</p><h2 id="文章页编辑功能"><a href="#文章页编辑功能" class="headerlink" title="文章页编辑功能"></a>文章页编辑功能</h2><p><code>Typecho</code>的文章页面默认没有提供<strong>编辑</strong>的功能，需要登入到后台管理文章时才可以编辑。像 <code>WordPress</code> 之类的博客平台都有提供文章页面<strong>编辑</strong>功能。这个功能可以让有权限的用户快速的编辑文章。 在默认主题文件夹下编辑 <code>post.php</code> 文件，在带 <code>post-meta</code> 属性的 <code>ul</code> 标签下增加以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;user-&gt;<span class="hljs-title function_ invoke__">hasLogin</span>()):<span class="hljs-meta">?&gt;</span><br>&lt;a href=<span class="hljs-string">&quot;&lt;?php <span class="hljs-subst">$this</span>-&gt;options-&gt;adminUrl(); ?&gt;write-post.php?cid=&lt;?php echo <span class="hljs-subst">$this</span>-&gt;cid;?&gt;&quot;</span>&gt;编辑&lt;/a&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">endif</span>;<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="独立页编辑功能"><a href="#独立页编辑功能" class="headerlink" title="独立页编辑功能"></a>独立页编辑功能</h2><p>同文章页面设置，在默认主题文件夹下编辑 <code>page.php</code> 文件，在带 <code>post-content</code> 属性的 <code>div</code> 标签之前增加以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;user-&gt;<span class="hljs-title function_ invoke__">hasLogin</span>()):<span class="hljs-meta">?&gt;</span><br>&lt;a href=<span class="hljs-string">&quot;&lt;?php <span class="hljs-subst">$this</span>-&gt;options-&gt;adminUrl(); ?&gt;write-page.php?cid=&lt;?php echo <span class="hljs-subst">$this</span>-&gt;cid;?&gt;&quot;</span> &gt;编辑&lt;/a&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">endif</span>;<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="文章页阅读次数"><a href="#文章页阅读次数" class="headerlink" title="文章页阅读次数"></a>文章页阅读次数</h2><p>在默认主题文件夹下编辑 <code>functions.php</code>，在行尾增加以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 阅读次数统计</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_post_view</span>(<span class="hljs-params"><span class="hljs-variable">$archive</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$cid</span>    = <span class="hljs-variable">$archive</span>-&gt;cid;<br>    <span class="hljs-variable">$db</span>     = <span class="hljs-title class_">Typecho_Db</span>::<span class="hljs-title function_ invoke__">get</span>();<br>    <span class="hljs-variable">$prefix</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">getPrefix</span>();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">array_key_exists</span>(<span class="hljs-string">&#x27;views&#x27;</span>, <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">fetchRow</span>(<span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">select</span>()-&gt;<span class="hljs-keyword">from</span>(<span class="hljs-string">&#x27;table.contents&#x27;</span>)))) &#123;<br>        <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;ALTER TABLE `&#x27;</span> . <span class="hljs-variable">$prefix</span> . <span class="hljs-string">&#x27;contents` ADD `views` INT(10) DEFAULT 0;&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">fetchRow</span>(<span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-string">&#x27;views&#x27;</span>)-&gt;<span class="hljs-keyword">from</span>(<span class="hljs-string">&#x27;table.contents&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;cid = ?&#x27;</span>, <span class="hljs-variable">$cid</span>));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$archive</span>-&gt;<span class="hljs-title function_ invoke__">is</span>(<span class="hljs-string">&#x27;single&#x27;</span>)) &#123;<br> <span class="hljs-variable">$views</span> = <span class="hljs-title class_">Typecho_Cookie</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;extend_contents_views&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$views</span>))&#123;<br>            <span class="hljs-variable">$views</span> = <span class="hljs-keyword">array</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$views</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$views</span>);<br>        &#125;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$cid</span>,<span class="hljs-variable">$views</span>))&#123;<br>       <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-string">&#x27;table.contents&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">rows</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;views&#x27;</span> =&gt; (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;views&#x27;</span>] + <span class="hljs-number">1</span>))-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;cid = ?&#x27;</span>, <span class="hljs-variable">$cid</span>));<br><span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$views</span>, <span class="hljs-variable">$cid</span>);<br>            <span class="hljs-variable">$views</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$views</span>);<br>            <span class="hljs-title class_">Typecho_Cookie</span>::<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;extend_contents_views&#x27;</span>, <span class="hljs-variable">$views</span>); <span class="hljs-comment">//记录查看cookie</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;views&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>在需要统计阅读量的页面，如<strong>文章查看页</strong>增加阅读量。可以在默认主题文件夹下编辑 <code>post.php</code> 文件，在带 <code>post-meta</code> 属性的 <code>ul</code> 标签下增加以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;li&gt;<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">_e</span>(<span class="hljs-string">&#x27;阅读量: &#x27;</span>); <span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">get_post_view</span>(<span class="hljs-variable">$this</span>); <span class="hljs-meta">?&gt;</span>&lt;/li&gt;<br></code></pre></td></tr></table></figure><h2 id="文章页加载时间"><a href="#文章页加载时间" class="headerlink" title="文章页加载时间"></a>文章页加载时间</h2><p>同阅读次数统计，先在默认主题文件夹下编辑 <code>functions.php</code> ,在行尾添加以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer_start</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$timestart</span>;<br>        <span class="hljs-variable">$mtime</span>     = <span class="hljs-title function_ invoke__">explode</span>( <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-title function_ invoke__">microtime</span>() );<br>        <span class="hljs-variable">$timestart</span> = <span class="hljs-variable">$mtime</span>[<span class="hljs-number">1</span>] + <span class="hljs-variable">$mtime</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">timer_start</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer_stop</span>(<span class="hljs-params"> <span class="hljs-variable">$display</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$precision</span> = <span class="hljs-number">3</span> </span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$timestart</span>, <span class="hljs-variable">$timeend</span>;<br>        <span class="hljs-variable">$mtime</span>     = <span class="hljs-title function_ invoke__">explode</span>( <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-title function_ invoke__">microtime</span>() );<br>        <span class="hljs-variable">$timeend</span>   = <span class="hljs-variable">$mtime</span>[<span class="hljs-number">1</span>] + <span class="hljs-variable">$mtime</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-variable">$timetotal</span> = <span class="hljs-title function_ invoke__">number_format</span>( <span class="hljs-variable">$timeend</span> - <span class="hljs-variable">$timestart</span>, <span class="hljs-variable">$precision</span> );<br>        <span class="hljs-variable">$r</span>         = <span class="hljs-variable">$timetotal</span> &lt; <span class="hljs-number">1</span> ? <span class="hljs-variable">$timetotal</span> * <span class="hljs-number">1000</span> . <span class="hljs-string">&quot; ms&quot;</span> : <span class="hljs-variable">$timetotal</span> . <span class="hljs-string">&quot; s&quot;</span>;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$display</span> ) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$r</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$r</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后在需要统计阅读次数的页面，比如<strong>文章查看页</strong>增加加载时间统计。可以在默认主题文件夹下编辑 <code>post.php</code> 文件，在带 <code>post-meta</code> 属性的<code>ul</code>标签下增加以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;li&gt;<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">_e</span>(<span class="hljs-string">&#x27;加载时间: &#x27;</span>); <span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">timer_stop</span>();<span class="hljs-meta">?&gt;</span> &lt;/li&gt;<br></code></pre></td></tr></table></figure><p>在做好以上的配置后，我们就可以刷新页面查看效果了。在配置后备份自己的主题，方便以后重装使用。</p><p>(完）</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://maojun.xyz/blog/2020/02/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0Typecho.html">博客迁移到 Typecho</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客平台</tag>
      
      <tag>Typecho</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Cloudflare 服务优化图床</title>
    <link href="/blog/2020/02/%E4%BD%BF%E7%94%A8Cloudflare%E6%9C%8D%E5%8A%A1%E4%BC%98%E5%8C%96%E5%9B%BE%E5%BA%8A.html"/>
    <url>/blog/2020/02/%E4%BD%BF%E7%94%A8Cloudflare%E6%9C%8D%E5%8A%A1%E4%BC%98%E5%8C%96%E5%9B%BE%E5%BA%8A.html</url>
    
    <content type="html"><![CDATA[<h2 id="图床优化"><a href="#图床优化" class="headerlink" title="图床优化"></a>图床优化</h2><p>使用backblaze-B2搭建自己的图床<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[使用 backblaze-B2 搭建自己的图床](https://maojun.xyz/blog/2020/02/21/使用backblaze-B2搭建自己的图床.html)">[1]</span></a></sup>获取图片地址后，发现图片的链接难以记忆，并且不是自己的域名。</p><p>虽然可以通过域名的<code>DNS</code>服务并设置<code>CNAME</code>绑定二级域名到<code>f000.backblazeb2.com</code>,这样就可以通过自定义域名访问图片地址。比如<code>img.maojun.xyz/file/test/bar.png</code>。但是又有一个问题，<code>/file/test</code>这个也是固定的，如果直接显示为<code>img.maojun.xyz/bar.png</code>，这样就显得清爽多了。所以首先对图片的返回地址做下优化，可以将图床地址绑定成自己的域名。比如图片地址器地址是<strong>img.maojunxyz</strong>。 同时将默认图片地址后的路径<code>/file/bucketName/foo.png</code>优化缩短为<code>foo.png</code>，这样和图片前缀地址拼接上就是: <strong>img.maojun.xyz&#x2F;foo.png</strong>。</p><h2 id="自定义图片地址"><a href="#自定义图片地址" class="headerlink" title="自定义图片地址"></a>自定义图片地址</h2><p>这里将使用<code>Cloudflare</code>作为<code>DNS</code>的服务商。因为<code>Cloudflare</code>提供了一系列对站长友好的工具，并且可以免费使用。比如<code>CDN</code>,<code>Worker</code>,网站信息统计等功能。当然这一步不是必须的,你可以维持你的<code>DNS</code>服务提供商,这不会对后续的操作有影响。只需根据下面的步骤作为参考并在<code>DNS</code>服务商处做相应的修改即可。</p><p>下面以<code>Cloudflare</code>做为演示: 如果没有<code>Cloudflare</code>账号先注册并登入，<code>Cloudflare</code>的官网地址是Cloudflare<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Cloudflare - The Web Performance & Security Company | Cloudflare](https://cloudflare.com/)">[2]</span></a></sup>。</p><p>使用<code>Cloudflare</code>的<code>DNS</code>解析服务，首先添加域名，点击按钮<strong>Add a Site</strong>,然后根据提示。将<code>DNS</code>地址修改成<code>Cloudflare</code>提供的地址即可完成绑定解析。</p><p>绑定后然后点击自己的域名进入到控制台,点击菜单图标<strong>DNS</strong>，进入<code>DNS</code>控制面板。</p><p>点击<strong>record</strong>按钮，在输入框中输入并绑定自己的图片域名到<code>b2</code>服务地址。 填写完成后，点击<strong>SAVE</strong>按钮保存设置。</p><p>等待片刻就可以通过自定义图片域名+后缀访问图片地址了。 前后对比：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://f000.backblazeb2.com/file/bucketName/foo.png <span class="hljs-comment"># 老的图片链接</span><br>https://img.maojun.xyz/file/bucketName/foo.png <span class="hljs-comment"># 新的图片键接</span><br></code></pre></td></tr></table></figure><h2 id="配置页面规则"><a href="#配置页面规则" class="headerlink" title="配置页面规则"></a>配置页面规则</h2><p>在上面的链接中，访问<code>https://img.maojun.xyz/file/bucketName/foo.png</code>，当<code>bucketName</code>正确匹配我们自己创建的<code>buckets</code>时，可以正常访问到图片链接。 当<code>bucketName</code>是其他名称或者不是我们创建的<code>buckets</code>名称时，我们让其跳转到错误页面。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//img</span>.maojun.xyz<span class="hljs-regexp">/file/</span>bucketName/foo.png <span class="hljs-comment"># 正确的，提供服务</span><br>https:<span class="hljs-regexp">//img</span>.maojun.xyz<span class="hljs-regexp">/file/</span>aaaaaaaa/foo.png  <span class="hljs-comment"># 不正确的，跳转到404页面</span><br></code></pre></td></tr></table></figure><p>可以通过<code>Cloudflare</code>的<strong>Page ruler</strong>进行配置。点击域名下的控制面板，点击菜单<strong>Page ruler</strong>进入服务。 点击<strong>Create Page Ruler</strong>按钮，配置如下信息：</p><table><thead><tr><th align="left">URL</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://web.archive.org/web/20201019223844/https://img.maojun.xyz/file/imgxyz/">https://img.maojun.xyz/file/imgxyz/</a>*</td><td align="left">Cache Level: Standard</td></tr><tr><td align="left"><a href="https://web.archive.org/web/20201019223844/https://img.maojun.xyz/file/*/">https://img.maojun.xyz/file/*&#x2F;</a>*</td><td align="left">Forwarding URL (Status Code: 302 - Temporary Redirect, Url: <a href="https://web.archive.org/web/20201019223844/https://maojun.xyz/404notfound">https://maojun.xyz/404notfound</a>)</td></tr></tbody></table><p>上面的配置信息规则为：</p><ul><li>当访问<code>https://img.maojun.xyz/file/imgxyz/*</code>时，使用标准缓存。</li><li>当访问<code>https://img.maojun.xyz/file/*/*</code>(即除了上面的规则外的地址如：<a href="https://img.maojun.xyz/file/abc/">https://img.maojun.xyz/file/abc/</a>*) 就302掉转到指定的404页面。)</li></ul><blockquote><p>注意上面的规则顺序不能错，如果第二条规则在上面则会拦截所有地址包括<code>https://img.maojun.xyz/file/imgxyz/*</code>。</p></blockquote><p>这样当访问的请求不是来自配置的页面放行规则时就会被<code>302</code>跳转到指定的页面。 </p><h2 id="简化图片链接"><a href="#简化图片链接" class="headerlink" title="简化图片链接"></a>简化图片链接</h2><p>通过自定义域名绑定后，链接地址比之前要更加直观。但是后面的长路径依然存在，我们可以想办法把它去除，让最终的链接格式如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//img.maojun.xyz/foo.png</span><br></code></pre></td></tr></table></figure><p>我们可以使用<code>Cloudflare</code>提供的<code>Workers</code>服务来重写图片的<code>URL</code>地址，让链接地址更加友好和简洁。<code>Workers</code>是一个边缘计算服务，允许你在<code>Cloudflare</code>全球网络中的边界服务器运行<code>JavaScript</code>代码。开发者可以部署<code>serverless</code>(轻服务) 的应用程序。</p><p>免费版：</p><ul><li>每天<strong>10万</strong>次请求</li><li><strong>30</strong>个<code>Workers</code>脚本</li><li>运行在<strong>200</strong>个数据中心</li><li>免费的<strong>workers.dev</strong>二级域名</li><li>每次请求最大占用<code>CPU</code>运行时间为<strong>10ms</strong></li><li>首次请求后最低延迟</li></ul><p>在<code>Cloudflare</code>的主界面，在右侧位置点击进入<strong>Workers</strong>服务。 点击<strong>Craate a Workers</strong>按钮创建一个新的<code>Workers</code>脚本。</p><p>在<strong>Scripe</strong>代码框中清除原先代码并粘贴以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">const</span> b2Domain = <span class="hljs-string">&#x27;img.domain.com&#x27;</span>; <span class="hljs-comment">// configure this as per instructions above</span><br><span class="hljs-keyword">const</span> b2Bucket = <span class="hljs-string">&#x27;bucket-name&#x27;</span>; <span class="hljs-comment">// configure this as per instructions above</span><br><span class="hljs-keyword">const</span> b2UrlPath = <span class="hljs-string">`/file/<span class="hljs-subst">$&#123;b2Bucket&#125;</span>/`</span>;<br><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> event.<span class="hljs-title function_">respondWith</span>(<span class="hljs-title function_">fileReq</span>(event));<br>&#125;);<br><br><span class="hljs-comment">// define the file extensions we wish to add basic access control headers to</span><br>0<span class="hljs-keyword">const</span> corsFileTypes = [<span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;gif&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>, <span class="hljs-string">&#x27;webp&#x27;</span>];<br><br><span class="hljs-comment">// backblaze returns some additional headers that are useful for debugging, but unnecessary in production. We can remove these to save some size</span><br><span class="hljs-keyword">const</span> removeHeaders = [<br>    <span class="hljs-string">&#x27;x-bz-content-sha1&#x27;</span>,<br>    <span class="hljs-string">&#x27;x-bz-file-id&#x27;</span>,<br>    <span class="hljs-string">&#x27;x-bz-file-name&#x27;</span>,<br>    <span class="hljs-string">&#x27;x-bz-info-src_last_modified_millis&#x27;</span>,<br>    <span class="hljs-string">&#x27;X-Bz-Upload-Timestamp&#x27;</span>,<br>    <span class="hljs-string">&#x27;Expires&#x27;</span><br>];<br><span class="hljs-keyword">const</span> expiration = <span class="hljs-number">31536000</span>; <span class="hljs-comment">// override browser cache for images - 1 year</span><br><br><span class="hljs-comment">// define a function we can re-use to fix headers</span><br><span class="hljs-keyword">const</span> fixHeaders = <span class="hljs-keyword">function</span>(<span class="hljs-params">url, status, headers</span>)&#123;<br>    <span class="hljs-keyword">let</span> newHdrs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(headers);<br>    <span class="hljs-comment">// add basic cors headers for images</span><br>    <span class="hljs-keyword">if</span>(corsFileTypes.<span class="hljs-title function_">includes</span>(url.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-title function_">pop</span>()))&#123;<br>        newHdrs.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">// override browser cache for files when 200</span><br>    <span class="hljs-keyword">if</span>(status === <span class="hljs-number">200</span>)&#123;<br>        newHdrs.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&quot;public, max-age=&quot;</span> + expiration);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// only cache other things for 5 minutes</span><br>        newHdrs.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;public, max-age=300&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">// set ETag for efficient caching where possible</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">ETag</span> = newHdrs.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;x-bz-content-sha1&#x27;</span>) || newHdrs.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;x-bz-info-src_last_modified_millis&#x27;</span>) || newHdrs.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;x-bz-file-id&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">ETag</span>)&#123;<br>        newHdrs.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;ETag&#x27;</span>, <span class="hljs-title class_">ETag</span>);<br>    &#125;<br>    <span class="hljs-comment">// remove unnecessary headers</span><br>    removeHeaders.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">header</span> =&gt;</span> &#123;<br>        newHdrs.<span class="hljs-title function_">delete</span>(header);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> newHdrs;<br>&#125;;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fileReq</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-keyword">const</span> cache = caches.<span class="hljs-property">default</span>; <span class="hljs-comment">// Cloudflare edge caching</span><br>    <span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>);<br>    <span class="hljs-keyword">if</span>(url.<span class="hljs-property">host</span> === b2Domain &amp;&amp; !url.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">startsWith</span>(b2UrlPath))&#123;<br>        url.<span class="hljs-property">pathname</span> = b2UrlPath + url.<span class="hljs-property">pathname</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> cache.<span class="hljs-title function_">match</span>(url); <span class="hljs-comment">// try to find match for this request in the edge cache</span><br>    <span class="hljs-keyword">if</span>(response)&#123;<br>        <span class="hljs-comment">// use cache found on Cloudflare edge. Set X-Worker-Cache header for helpful debug</span><br>        <span class="hljs-keyword">let</span> newHdrs = <span class="hljs-title function_">fixHeaders</span>(url, response.<span class="hljs-property">status</span>, response.<span class="hljs-property">headers</span>);<br>        newHdrs.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;X-Worker-Cache&#x27;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(response.<span class="hljs-property">body</span>, &#123;<br>            <span class="hljs-attr">status</span>: response.<span class="hljs-property">status</span>,<br>            <span class="hljs-attr">statusText</span>: response.<span class="hljs-property">statusText</span>,<br>            <span class="hljs-attr">headers</span>: newHdrs<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">// no cache, fetch image, apply Cloudflare lossless compression</span><br>    response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, &#123;<span class="hljs-attr">cf</span>: &#123;<span class="hljs-attr">polish</span>: <span class="hljs-string">&quot;lossless&quot;</span>&#125;&#125;);<br>    <span class="hljs-keyword">let</span> newHdrs = <span class="hljs-title function_">fixHeaders</span>(url, response.<span class="hljs-property">status</span>, response.<span class="hljs-property">headers</span>);<br><br>  <span class="hljs-keyword">if</span>(response.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>)&#123;<br><br>    response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(response.<span class="hljs-property">body</span>, &#123;<br>      <span class="hljs-attr">status</span>: response.<span class="hljs-property">status</span>,<br>      <span class="hljs-attr">statusText</span>: response.<span class="hljs-property">statusText</span>,<br>      <span class="hljs-attr">headers</span>: newHdrs<br>    &#125;);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&#x27;File not found!&#x27;</span>, &#123; <span class="hljs-attr">status</span>: <span class="hljs-number">404</span> &#125;)<br>  &#125;<br><br>    event.<span class="hljs-title function_">waitUntil</span>(cache.<span class="hljs-title function_">put</span>(url, response.<span class="hljs-title function_">clone</span>()));<br>    <span class="hljs-keyword">return</span> response;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意代码的第<code>2-3</code>行:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> b2Domain = <span class="hljs-string">&#x27;img.domain.com&#x27;</span>; <span class="hljs-comment">// configure this as per instructions above</span><br><span class="hljs-keyword">const</span> b2Bucket = <span class="hljs-string">&#x27;bucket-name&#x27;</span>; <span class="hljs-comment">// configure this as per instructions above</span><br></code></pre></td></tr></table></figure><ul><li>b2Domain:修改成自己图床的域名。</li><li>b2Bucket，修改成自己的<code>bucket</code>名字。</li></ul><p>修改后点击按钮<strong>Save and Depoly</strong>保存。</p><p>保存后还不能直接使用，我们需要配置下规则。</p><p>进入域名下的控制面板。点击菜单<strong>Workers</strong>进入面板，然后点击<strong>Add route</strong>按钮。</p><p>添加路由为之前配置的图片服务器地址，后面使用<code>*</code>匹配该域名下的所有所有内容。 并在<em>Worker</em>处选择刚才创建的<em>Workers</em>名称。 </p><p>配置好少，稍等片刻生效。即可以通过最终的图片地址访问了:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//img.maojun.xyz/foo.png</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：配置<code>Workers</code>后上面配置的<code>Page ruler</code>规则会失效。配置了<code>Workers</code>规则会先走。</p></blockquote><h2 id="配置防盗链"><a href="#配置防盗链" class="headerlink" title="配置防盗链"></a>配置防盗链</h2><p>可以配置<code>Referer</code>来判断是否是自己的来自自己域名，如果不是则都拦截。 由于<code>Referer</code>是可以修改的，所以这只能简单的进行拦截。</p><p>进入域名下的面板，点击菜单<strong>Firewall</strong>进入服务。点击**+ Create firewall rule**进入防火墙规则服务。 </p><p>填写规则名称和规则匹配条件：</p><table><thead><tr><th align="left">Field</th><th align="left">Operator</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">Referer</td><td align="left">does not contains</td><td align="left">maojun.xyz</td></tr><tr><td align="left">URI Full</td><td align="left">contains</td><td align="left">img.maojun.xyz</td></tr></tbody></table><blockquote><p>(not http.referer contains “maojun.xyz” and http.request.full_uri contains “img.maojun.xyz”)</p></blockquote><p>上面的规则是： 如果<code>URI</code>全路径中包含了<code>img.maojun.xyz</code>内容，<strong>同时</strong><code>Referer</code>不包含<code>maojun.xyz</code>则拦截。 由于这个图床我暂时只有一个域名即<code>maojun.xyz</code>在用，如果你有多个域名使用同一图床，可以在上面的规则中填加多个域名放行。</p><p>配置完以上后，就可以通过优化后的图片地址<code>https://img.maojun.xyz/test.png</code>访问了。</p><p>(本文完）</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://maojun.xyz/blog/2020/02/21/%E4%BD%BF%E7%94%A8backblaze-B2%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A.html">使用 backblaze-B2 搭建自己的图床</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://cloudflare.com/">Cloudflare - The Web Performance &amp; Security Company | Cloudflare</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>对象存储</tag>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 backblaze-B2 搭建自己的图床</title>
    <link href="/blog/2020/02/%E4%BD%BF%E7%94%A8backblaze-B2%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A.html"/>
    <url>/blog/2020/02/%E4%BD%BF%E7%94%A8backblaze-B2%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A.html</url>
    
    <content type="html"><![CDATA[<h2 id="图床需求"><a href="#图床需求" class="headerlink" title="图床需求"></a>图床需求</h2><p>在搭建完<code>Typecho</code> 博客，并给上传的图片添加图片阴影效果后，发现在使用<code>Typecho</code>自身的图片上传功能时，每次截图后不支持直接粘贴。而是需要先将图片保存到本地后，才能上传到服务器。</p><p>这在使用的体验上就不太顺畅，并且上传的图片是不经过任何处理的。每次截图的大小都在<code>50kb</code>上下了，保存的位置也是同博客的目录。长久下来会占用不少的空间，毕竟个人的服务器资源有限。最要紧的还是图片加载问题了，所有请求都是向同一服务器发起请求。页面的响应速度也是会受到一定的影响。</p><p>带着以上的问题，决定将图片迁移到图片服务器。比如**阿里云 OSS **, <strong>Amazon S3</strong> 等，本着全面了解的心情，在了解其他产品同类产品后。发现 <strong>backblaze B2</strong> 提供了免费<code>10G</code>的存储服务，这让我想到了之前的 <strong>七牛云</strong> 也是有<code>10G</code>免费图片托管服务。但是国内的网站备案才能使用让我望而却步，最终决定尝试 <strong>backblaze B2</strong>,同时本着鸡蛋不放在同一个篮子的思想，后续将继续在其他平台开启图片托管服务，实现多机备份。</p><p><strong>Backblaze B2</strong> 提供了<code>10G</code>免费文件存储服务。超出部分将按量付费，但是对与博客平台而言，存图片能把<strong>10G</strong>空间用完还真不容易，以一张图片<code>100K</code>计算，差不多可以存储<code>10w</code>张图片。对于文件我更倾向与上传到网盘后分享，而不是通过文件存储服务器。所以只用来当图床已经足够了。<strong>Backblaze</strong> 官网也对比了其他储存服务的价格，总之是很便宜了。</p><h2 id="使用-B2-服务"><a href="#使用-B2-服务" class="headerlink" title="使用 B2 服务"></a>使用 B2 服务</h2><p>点击进入<a href="https://web.archive.org/web/20201024065121/https://secure.backblaze.com/user_signin.htm">backblaze注册</a>页面，输入邮箱密码后进入填写相关信息进入到控制台界面。 </p><p>点击<strong>Create a Bucket</strong>，输入服务要创建的<code>bucket</code>名称，文件权限选择<strong>public</strong>,然后点击<strong>Create a Bucket</strong>。</p><p>创建完<code>bucket</code>后，就可以通过<code>backblaze</code>提供的网页来上传图片了。在控制台界面点击<strong>Browse Files</strong>,进入我们刚才创建的&#96;bucket*中，点击<strong>upload</strong>按钮就可以拖拽文件或者访问本地图片路径上上传图片到<strong>backblzze b2</strong>了。</p><p>上传文件后，就可以点击文件名称后面的<strong>i</strong>图标按钮查看图片的信息，点击<strong>Friendly URL</strong>链接就可以访问到图片了。如果我们每次都要通过网页上传并且点击图片信息获取链接的就会显得非常的繁琐。<strong>backblaze b2</strong>也提供了客户端工具给我们使用。</p><p>如果需要利用客户端上传，则需要在<code>bucket</code>创建后，在控制台界面点击<strong>App Keys</strong>创建应用密钥，点击<strong>Add a New Application Key</strong>,在弹出的窗口中填写密钥的名称，以及访问<code>bucket</code>的范围，默认是可以访问所有的<code>bucket</code>,权限选择<strong>Read and Write</strong>，允许有<strong>读写</strong>权限。</p><p>保存后会显示三个值的内容。</p><ul><li>keyID</li><li>keyName</li><li>applicationKey</li></ul><blockquote><p>注意保存<strong>applicationKey</strong>的值，<strong>applicationKey</strong>只会显示一遍。如果没保存就需要重复上面的步骤再创建一个，把之前的删除即可。</p></blockquote><p>生成应用密钥的目的是为了让第三方应用可以用上传图片到<code>backblaze</code>的权限。方便我们将截图保存并访问截图链接。由于我使用的是<code>Archlinux</code>系统，目前没有支持<code>backblaze b2</code>的<code>linux</code>平台工具，所以我只能通过官方提供的命令行工具来实现客户端上传。如果你是<code>Windows</code>或者<code>Mac</code>用户则可以在这里查看支持的<a href="https://web.archive.org/web/20201024065121/https://help.backblaze.com/hc/en-us/articles/226688888-How-can-I-upload-files-to-B2-">backblaze客户端</a>。</p><p>这里以<strong>backblaze b2</strong>命令行客户端为例，首先去<code>GitHub</code>下载官方开源的命令行工具:<a href="https://web.archive.org/web/20201024065121/https://github.com/Backblaze/B2_Command_Line_Tool">b2-command</a>。根据官方文档安装工具，安装后使用命令登入<code>backblaze b2</code>,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ b2 authorize-account<br></code></pre></td></tr></table></figure><p>根据提示输入:</p><ul><li>keyID</li><li>applicationKey</li></ul><blockquote><p>在控制台<strong>App Keys</strong>查看<code>keyID</code>，<code>applicationKey</code>即之前保存的密钥，如果忘记需重新生成创建。</p></blockquote><p>查看<code>buckets</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ b2 list_buckets<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果输出为空则说明没有创建<code>buckets</code></p></blockquote><p>上传图片到<code>bucket</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ b2 upload-file  &lt;bucketName&gt; &lt;localFilePath&gt; &lt;b2FileName&gt;<br></code></pre></td></tr></table></figure><ul><li><strong>bucketName</strong>参数是<code>bucket</code>名称</li><li><strong>localFilePath</strong>参数为本地文件路径</li><li><strong>b2FileName</strong>参数为上传后的文件名称</li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ b2 upload-file  <span class="hljs-built_in">test</span> foo.png bar.png<br></code></pre></td></tr></table></figure><p>上面的格式为上传本地图片<code>foo.png</code>到名为<code>test</code>的<code>bucket</code>并命令为<code>bar.png</code>文件。</p><p>上传成功会在控制台返回以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">1foo.png: 100%|███████████████████████████████████████████████████████████████████| 73.2k/73.2k [00:30&lt;00:00, 2.39kB/s]<br>2URL by file name: https://f000.backblazeb2.com/file/bucketName/foo.png<br>3URL by fileId: https://f000.backblazeb2.com/b2api/v2/b2_download_file_by_id?fileId=4_zb21c374aec406a66740d0716_f109b36d0492bfbf2_d20200222_m133812_c000_v0001063_t0000<br>4&#123;<br>5  <span class="hljs-string">&quot;action&quot;</span>: <span class="hljs-string">&quot;upload&quot;</span>,<br>6  <span class="hljs-string">&quot;fileId&quot;</span>: <span class="hljs-string">&quot;4_zb21c374aec406a66740d0716_f109b36d0492bfbf2_d20200222_m133812_c000_v0001063_t0000&quot;</span>,<br>7  <span class="hljs-string">&quot;fileName&quot;</span>: <span class="hljs-string">&quot;foo.png&quot;</span>,<br>8  <span class="hljs-string">&quot;size&quot;</span>: 73243,<br>9  <span class="hljs-string">&quot;uploadTimestamp&quot;</span>: 1582378692000<br>10&#125;<br></code></pre></td></tr></table></figure><p>可以看到控制台返回了图片的<code>URL</code>，所以我们只要处理下返回结果。过滤出链接就可以。</p><ul><li>URL by file name 上面返回的参数可以通过管道命令先过滤出<code>URL</code>所在的行内容，即</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1</span><span class="hljs-built_in">URL</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">file</span> name: <span class="hljs-keyword">https</span>://f000.backblazeb2.com/<span class="hljs-built_in">file</span>/bucketName/foo.png<br></code></pre></td></tr></table></figure><p>然后再用<code>akw</code>工具通过<code>name:</code>列分隔取得后面的链接。</p><p>所以图片的<code>URL</code>链接就可以通过下面的命令过滤出来了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ b2 upload-file  <span class="hljs-built_in">test</span> foo.png bar.png | grep <span class="hljs-string">&quot;URL by file name&quot;</span> |awk -F <span class="hljs-string">&#x27;name:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>但是现在的问题是我们要获取上传的图片名称和保存到图床的名称，上传到<code>backblaze b2</code>的文件名可以和本地图片的文件名一样。这样我们可以可以写一个脚本实现截图后自动上传及获取图片的链接地址。</p><h2 id="优化和改良"><a href="#优化和改良" class="headerlink" title="优化和改良"></a>优化和改良</h2><p>我们通过<code>b2</code>客户端上传图片并过滤获取到了图片的地址。但是其中存在着大量的手工步骤：</p><ul><li>截图</li><li>截图后命名文件</li><li>获取图片上传路径</li><li>修改脚本的图片地址</li><li>复制上传后返回的链接</li><li>粘贴使用</li></ul><p>如果我们需要在短时间内上传大量的图片那重复的步骤就会很多。我们可以将重复的步骤自动化，优化后如下：</p><ul><li>截图</li><li>自动化（命令文件;获取获取图片上传路径;修改脚本中的图片地址;返回链接到剪切板中）</li><li>粘贴使用</li></ul><p>这里将用到命令行截图工具<code>maim</code>做为演示，如果是<code>Archlinux</code>用户或者使用<code>Pacman</code>作为包管理的系统，可以使用以下命令安装<code>maim</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ sudo pacman -S maim<br></code></pre></td></tr></table></figure><p>安装完后可以通过命令<code>maim -h</code>或者帮助信息。其中我们要用到的参数有<code>-s</code>，即选择区域截图。比如将截图保存到<code>/tmp</code>目录下命令为<code>screenshot.png</code>文件命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ maim -s /tmp/screenshot.png<br></code></pre></td></tr></table></figure><p>这样我们就有了本地图片名称了，但是当我们的图床名称和本地图片一样时，多次上传同样的名称图片会覆盖图床上的同名文件。所以最好使用随机产生不重复名称作为文件名。</p><p>这里我们可以使用格式化的日期函数作为文件名称:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1$ <span class="hljs-built_in">echo</span> $(<span class="hljs-built_in">date</span> +%y%m%d%k%M%s)<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>y:年份后2位数字</li><li>m:2位数月份数字</li><li>d:2位数单天数字</li><li>K:24制小时数字</li><li>M:60制分钟数字</li><li>s:UTC到当前时间的秒数 上面的输出结果格式为：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">120022323001582470005<br></code></pre></td></tr></table></figure><p>得到这个随机数字作为图片名称后，再加上图片的后缀<code>.jpg</code>或者<code>.png</code>就完成上传的图片名称定义了。</p><p>接着我们将前面的<code>b2</code>上传和图片过滤地址命令结合起来作为一个组合命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-comment">#!/bin/sh</span><br>2picName=$(<span class="hljs-built_in">date</span> +%y%m%d%k%M%s)<br>3picSuffix=png<br>4<span class="hljs-comment"># protocol:http or https</span><br>5protocol=https<br>6domainName=img.maojun.xyz<br>7<br>8sleep 2;<br>9maim -s /tmp/screenshot.png; b2 upload-file  imgxyz  /tmp/screenshot.png <span class="hljs-string">&quot;<span class="hljs-variable">$picName</span>&quot;</span>.<span class="hljs-string">&quot;<span class="hljs-variable">$picSuffix</span>&quot;</span> | grep name |awk -F <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27;&#123;print $(NF)&#125;&#x27;</span> |sed <span class="hljs-string">&quot;s/^/<span class="hljs-variable">$protocol</span>:\/\/<span class="hljs-variable">$domainName</span>\//&quot;</span> | xclip -selection clipboard<br>10<br>11echo url:  <span class="hljs-string">&quot;<span class="hljs-variable">$protocol</span>&quot;</span>://<span class="hljs-string">&quot;<span class="hljs-variable">$domainName</span>&quot;</span>/<span class="hljs-string">&quot;<span class="hljs-variable">$picName</span>&quot;</span>.<span class="hljs-string">&quot;<span class="hljs-variable">$picSuffix</span>&quot;</span><br></code></pre></td></tr></table></figure><p>上面的脚本地址定义了:</p><ul><li>picName：上传到图床的随机名称</li><li>picSuffix:上传的图片后缀名</li><li>protocol:自定义域名的前缀协议</li><li>domainName:自定义域名</li></ul><blockquote><p>注意:使用自定义域名需要先完成<code>DNS</code>的<code>CNAME</code>解析。</p></blockquote><p>组合脚本将<code>b2</code>上传后返回的图片<code>URL</code>地址过滤只保留下<strong>文件名称和后缀名</strong>,通过拼接我们的自定义域名然后发送给剪切板。这样只要将脚本绑定到快捷键就可以快速调用脚本并生成需要的链接，然后粘贴到需要的地方使用就可以了。</p><p>上面的脚本中，我将本地的图片地址写死为<code>screenshot.png</code>，而不是随机名称。因为上传到图床的图片我不想保存在本地，每次都替换上一次的文件。如果你希望保留在本地，可以将这里替换成随机生成的图片名称。</p><p>现在就可以愉快的截图并上传到图床使用了。同时为了区分本地截图和图床截图，我绑定了<code>2</code>个快捷键给不同的功能。这样就能区分场景完成截图的需求了。</p><p>后续的图片地址优化过程将在<a href="https://web.archive.org/web/20201024065121/https://maojun.xyz/archives/using-cloudflare-to-optimize-image-services.html">使用Cloudflare服务优化图床</a>中介绍。</p><p>（本文完）</p><p><strong>参考内容</strong></p><ul><li><a href="https://web.archive.org/web/20201024065121/https://jross.me/free-personal-image-hosting-with-backblaze-b2-and-cloudflare-workers/">free-personal-image-hosting-with-backblaze-b2-and-cloudflare-workers</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>对象存储</tag>
      
      <tag>backblaze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客迁移到 Typecho</title>
    <link href="/blog/2020/02/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0Typecho.html"/>
    <url>/blog/2020/02/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0Typecho.html</url>
    
    <content type="html"><![CDATA[<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>博客平台历经 <code>HEXO</code>, <code>HUGO</code>, <code>Wordpress</code>, <code>GitHub Issues</code>，使用这些作为博客平台有着不同的体验。</p><p>但最终我都没有坚持使用下去。目前除了<code>HEXO</code>博客托管在<code>GitLab</code>网站，以及<code>GitHub Issues</code>做为省事的博客平台外。</p><p>其他博客平台都已经下线，结束了他们早期作为博客平台的使命。</p><p>以上的博客平台都属于开源项目，还有一些商业的博客平台目前也已注销和放弃了。</p><p>直到今天迁移到 <code>Typecho</code>，迁移的时候有过犹豫。会不会是下一个被我放弃的平台（后续被证实），以后的事我不好打保票。当我在这写下这篇迁移博文时，我是打算长期使用下去的。之前那些博客平台放弃的原因无乎不是折腾完了，没有了之前安装时的兴致，伴随着时间也就慢慢忘却了写作的本质。没想到当初抱着以写博客为开始，到最终以折腾捣鼓为结束。好似忘记了搭建博客的初心了。</p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>迁移到 <code>Typecho</code> 后，打开默认的首页后，惊乎有个似曾相识的感觉。没错，这和我使用较长时间 <code>WordPress</code> 有那么的相似。相似的是界面和风格，但是不相似的是 <code>Typecho</code> 的思想。为什么这么说，体验下来 <code>Typecho</code> 是轻量及支持 <code>MarkDown</code> 语法，可以开箱即用。<code>WordPress</code> 虽也可以开箱即用，但是作为一个拥有多功能的后台而言，免不了要进行一版配置和优化。而 <code>Typecho</code> 就不用了，毕竟本身就没过多的配置。</p><p>当然，为了达到我想要的效果。我还是对 <strong>Typecho</strong> 进行了一般研究和配置。修改了默认主题以下内容：</p><ul><li>页面宽度</li><li>代码高亮</li><li>导航链接</li><li>图片阴影</li><li>设置<code>favicon</code></li><li>链接重定向去掉<code>index.php</code></li></ul><p>其他一些配置是在网站后台管理界面修改。</p><p>由于安装是基于经典的<code>LAMP</code>平台，所以没有过多要说明的。后期考虑迁移到<code>Docker</code>,有机会再做介绍。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>安装后默认网站是没有配置<code>favicon.ico</code>的，所以这个需要自己配置。进入对应的项目目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;WebHome&gt;/usr/themes/default<br></code></pre></td></tr></table></figure><p>然后编辑<code>header.php</code>,指定<code>favicon.ico</code>文件位置:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- favicon ico --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意:<code>/favicon.ico</code>对应的是网站根目录</p></blockquote><p>修改后即可刷新页面查看到网站已经可以显示自定义的<code>favicon.ico</code>图标了。</p><h3 id="链接重定向去掉index-php"><a href="#链接重定向去掉index-php" class="headerlink" title="链接重定向去掉index.php"></a>链接重定向去掉<code>index.php</code></h3><p>进入网站后台配置管理页面，选择<strong>设置-&gt;永久链接-&gt;启用地址重写功能</strong>。 如果有警告信息，点击保存即可。然后需要配置重定向：这里以<code>Apache</code>服务器为示例。 进入网站的服务器根目录，编写<code>.htaccess</code>配置文件，写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs .htaccess">Options +FollowSymLinks<br>RewriteEngine on<br>RewriteBase /<br>RewriteCond %&#123;REQUEST_FILENAME&#125; !-f<br>RewriteCond %&#123;REQUEST_FILENAME&#125; !-d<br>RewriteRule ^(.*)$ /index.php/$1 [L]<br></code></pre></td></tr></table></figure><p>保存然后去网站首页刷新页面，点击文章链接查看效果。</p><h3 id="修改页面宽度"><a href="#修改页面宽度" class="headerlink" title="修改页面宽度"></a>修改页面宽度</h3><p>主题默认提供的是二栏分布，我偏爱更宽的内容区域，这样阅读起来比较舒服。所以去网站后台管理界面，<strong>控制台-&gt;设置外观-&gt;关闭侧边栏显示</strong>。</p><p>接着配置<code>php</code>页面,进入默认主题<strong>Default</strong>目录，编辑以下文件：</p><ul><li>archive.php</li><li>index.php</li><li>page.php</li><li>post.php</li></ul><p>找到<code>&lt;div class=&quot;col-mb-12 col-8&quot; id=&quot;main&quot; role=&quot;main&quot;&gt;</code>所在的行，将<code>col-8</code>修改为<code>col-12</code>。即占满<strong>12</strong>个单元。 去页面刷新查看效果，发现宽度边宽了。但是两边有较大留白空隙，去页面查看元素，发现是有<code>container</code>属性控制的。在<code>Default**目录下编写</code>diy.css&#96;文件，加入以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1200px</span>) &#123;<br>    <span class="hljs-selector-class">.container</span>&#123;<br>        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1400px</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>即将<code>container</code>的最大宽度设置为<code>1400px</code>.保存后编辑<code>header.php</code>，添加自定义的<code>CSS</code>文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!-- diy css --&gt;<br>&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;&lt;?php <span class="hljs-subst">$this</span>-&gt;options-&gt;themeUrl(&#x27;diy.css&#x27;); ?&gt;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>保存后刷新页面查看效果。</p><h3 id="增加图片阴影"><a href="#增加图片阴影" class="headerlink" title="增加图片阴影"></a>增加图片阴影</h3><p><code>Typecho</code>上传图片后默认是没有效果的，显得非常的平。于是想到给增加些阴影更有立体感，图片的阴影样式是引用自<strong>王垠</strong>博客的图片样式。编辑原先定义的<code>diy.css</code>样式，追加以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">#555</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">margin-left</span>: auto;<br>    <span class="hljs-attribute">margin-right</span>: auto;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>    -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">#555</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在配置页面宽度时，已经引用过该<code>css</code>文件，所以直接去页面刷新查看效果即可。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p><code>Typecho</code>默认是不支持代码高亮的，为了显示和阅读上更加美观。我们可以通过插件或脚本让<code>Typecho</code>支持代码高亮。这里采用导入<code>JS</code>和<code>CSS</code>的方案让代码高亮，使用的是<code>prismjs</code>。去<a href="https://web.archive.org/web/20201019231149/https://prismjs.com/">官网下载</a>选择配置代码高亮主题及支持的代码类型，同时可以勾选插件让支持更多的功能。</p><p>配置好用，下载对应的<code>JS</code>和<code>CSS</code>文件上传到主题的目录，配置<code>header.php</code>文件，引入<code>prismjs</code>的依赖：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;&lt;?php <span class="hljs-subst">$this</span>-&gt;options-&gt;themeUrl(&#x27;prism.css&#x27;); ?&gt;&quot;</span>&gt;<br>&lt;script src=<span class="hljs-string">&quot;&lt;?php <span class="hljs-subst">$this</span>-&gt;options-&gt;themeUrl(&#x27;prism.js&#x27;);?&gt;&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>保存后，刷新网站的页面查看效果。</p><h3 id="增加导航链接"><a href="#增加导航链接" class="headerlink" title="增加导航链接"></a>增加导航链接</h3><p><code>Typeche</code>新增的自定义页面只支持站内链接。如果需要点击导航跳转到外部链接就不能通过<strong>新建独立页面</strong>的方式。同样的，我们可以在<code>header.php</code>中配置想要的外部链接。找到<code>&lt;nav id=&quot;nav-menu&quot; class=&quot;clearfix&quot; role=&quot;navigation&quot;&gt;</code>这行，在对应的<code>&lt;/nav&gt;</code>标签前增加自定义链接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;a href=<span class="hljs-string">&quot;//blog.maojun.xyz&quot;</span>&gt;博客&lt;/a&gt;<br>&lt;a href=<span class="hljs-string">&quot;//maojun.xyz/feed/&quot;</span>&gt;RSS&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>保存后，去页面刷新查看效果。</p><p>到此为止，配置后的 <code>Typecho</code> 已经能满足我的要求了。</p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>操作演示</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客平台</tag>
      
      <tag>Typecho</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《奇迹男孩》观后感</title>
    <link href="/blog/2018/11/%E3%80%8A%E5%A5%87%E8%BF%B9%E7%94%B7%E5%AD%A9%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F.html"/>
    <url>/blog/2018/11/%E3%80%8A%E5%A5%87%E8%BF%B9%E7%94%B7%E5%AD%A9%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F.html</url>
    
    <content type="html"><![CDATA[<h2 id="奇妙"><a href="#奇妙" class="headerlink" title="奇妙"></a>奇妙</h2><p>影片开场以太空为景切入生活，是一个小男孩戴着航天帽在跳跃，被这天真和活泼的小男孩所吸引着。</p><p>这不就是我们小时候天真的样子吗？各种模仿和好奇尝试。小男孩被子上的宇航服图案，当盖上那一刻仿佛和小男孩合为一体了。</p><h2 id="丑陋"><a href="#丑陋" class="headerlink" title="丑陋"></a>丑陋</h2><p>跟随着影片走进小男孩的生活中，小男孩出生就面部毁容了。医生作了二十多次手术才将小男孩抢救过来，但是面部被塑造成“完美”的形态。</p><p>小男孩的名字是奥吉，“丑陋”的面容让他从小在家由母亲辅导功课和学习。直到五年级才做为新生第一次去学校上课。</p><p>先天的缺陷让父母把大多数的经历都放在了奥吉身上，母亲甚至为奥吉放弃了自己的梦想。</p><p>去学校上课，由于自己先天面貌的缺陷，学校同学都不愿意和奥吉左朋友甚至霸凌奥吉。</p><p>奥吉也感到非常委屈和难过，因为自己的先天缺陷而受尽了同龄人不公平的对待。</p><h2 id="善良"><a href="#善良" class="headerlink" title="善良"></a>善良</h2><p>在奥吉上课时，老师上课黑板上写了一句箴言。</p><blockquote><p>如果在正确和善良之前必选其一，请选择善良。</p></blockquote><p>或许上帝为你关上一扇门，说不定会为你打开一扇窗。</p><p>慢慢地，奥吉用自己的善良和真诚让身边的同学对他的看法发生了改变， 并且愿意和奥吉一起做朋友。</p><p>奥吉也慢慢打开了心扉变得快乐起来。</p><h2 id="缩影"><a href="#缩影" class="headerlink" title="缩影"></a>缩影</h2><p>这部电影讲述了奥吉和小伙伴之间的故事。也可以映射到这个社会上，每个人之间都是差异化的。</p><p>我们有的时候会用自身的优势去比对那些没有我们好的人，从而让自身有一种优越感。</p><p>正如奥吉课堂上的箴言一样，如果我们都选择善良，彼此之间或许都可以温柔以待。</p><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影</tag>
      
      <tag>观后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京阳台山游记</title>
    <link href="/blog/2018/10/%E5%8C%97%E4%BA%AC%E9%98%B3%E5%8F%B0%E5%B1%B1%E6%B8%B8%E8%AE%B0.html"/>
    <url>/blog/2018/10/%E5%8C%97%E4%BA%AC%E9%98%B3%E5%8F%B0%E5%B1%B1%E6%B8%B8%E8%AE%B0.html</url>
    
    <content type="html"><![CDATA[<h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>北京的10月中旬和11月上旬正是看香山红叶的季节，听同事说红叶红的不是那么透。</p><p>加上住的地方离香山比较近，想下周再去一览香山红叶。这次先找来个相对比较近的阳台山。周六中午出门，马路是通向香山的，来看香山红叶的人非常多，路上非常的堵，公交停留好久才开出一段距离，很是磨练人们的耐心，继而转了三趟公交来到目的地。</p><p>阳台山离公交站大概有1.5公里，跟随着弯曲的道路走向景点，一路上可以听见农家在吆喝卖着自家的土特产。</p><p>马上走到一个丁字路口，左边通往阳台山和鹫峰国家森林公园，右边也通往阳台山，我选择了走左边的道路。</p><p>当时想用一个下午时间把这两个地方都走完，后来才发现我这个想法太单纯了。</p><h2 id="登山"><a href="#登山" class="headerlink" title="登山"></a>登山</h2><p>走进入口，来阳台山的人对比去香山的人，显得冷清多了。开始登山后看了登山地图，路途中一直担心自己是否可以爬到山顶，毕竟到景点时已经下午1点30多了。</p><p>查阅资料时发现阳台山有三条路可以上山，我选择走的是古道，据说当初是给慈禧修建的。走着就上了一个小平台，景点里也有农家在卖野果和农家特产。</p><p>一路爬着感觉并不是累，道路是石头铺设的虽然不整齐，但是台阶相对缓和。一路快上直到金山寺庙，在附近拍得一些秋黄的银杏叶，在阳光的照射下显得十分耀眼。沿途路上行人也不多，零零散散可以遇到一些从山顶往回走的。路上的石阶上散落着凋零的落叶。接着就爬到一个小上坡了，在小山坡可以遥望北京城。</p><p>爬到快三点的时候，发现距离终点还有一段距离。冬天的夜色总是降临的比较快。心想爬到4点就下山。一路向前，道路曲折而悠长，这次来时也没有准备充足，带足了水源可并没有带能量食品，爬山非常消耗能量，一边是饥饿，一边是体能逐渐下滑。</p><p>这时只能发挥意志力的作用了，抱着不到山顶不死心的念头坚持爬着。又继续爬了半个多小时，可以逐渐看到一些小屋子了，于是加快步伐爬了上去。发现是妙儿洼茶棚遗址，继而爬了不多远，眼前突然明朗开阔了起来，万物尽收眼底。</p><p>这里几个小卖部，饥肠辘辘的我在这里要了一碗泡面。山上面的风真是好大，虽然在一个小屋子里，不过风刮进来可真是刺骨的冷。虽然是顶着寒风吃泡面，此时就感觉在品尝人间美味。 后面询问了大妈上距离登顶还需要多久，一打听还要1个半小时，盘算了下继续登顶的话天就黑了，天黑再下山就非常危险。</p><p>在吃完泡面后就准备下山了。</p><h2 id="下山"><a href="#下山" class="headerlink" title="下山"></a>下山</h2><p>趁着太阳快落山那会，拍了一些上山并没有拍的一些风景作为这次留念。</p><p>回来路上有些堵，公交车上也非常拥挤，坚持着腰酸腿疼一路站回来。</p><p>到住处后吃了些东西，然后泡了个热水脚，不多久就入睡了。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发编程下存在的问题</title>
    <link href="/blog/2017/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8B%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <url>/blog/2017/11/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8B%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>Java内存模型（Java Memory Model，简称JMM）是Java编程语言中关于多线程并发编程的一个重要概念。JMM规定了多线程程序中，线程如何与内存交互，以确保多线程程序的正确性和可移植性。它定义了一组规则和语义，用于确保线程之间的协作和共享数据的一致性。</p><p>以下是Java内存模型的一些关键概念和规则：</p><ol><li><p><strong>主内存（Main Memory）</strong>：主内存是所有线程共享的内存区域，包含了共享变量和对象实例。主内存中的数据可以被多个线程同时访问。</p></li><li><p><strong>工作内存（Working Memory）</strong>：每个线程都有自己的工作内存，用于存储线程私有的局部变量和线程栈。线程在执行时会从主内存中读取数据到工作内存，然后对数据进行操作，最后再写回主内存。</p></li><li><p><strong>可见性（Visibility）</strong>：JMM规定了当一个线程写入主内存中的数据时，其他线程应该能够立即看到这个修改。这是通过使用volatile关键字、synchronized关键字或其他同步机制来实现的。</p></li><li><p><strong>原子性（Atomicity）</strong>：JMM确保一些特定操作的原子性，这意味着它们不会被其他线程中断。例如，通过synchronized关键字或java.util.concurrent包中的原子类可以实现原子性操作。</p></li><li><p><strong>有序性（Ordering）</strong>：JMM规定了操作执行的顺序，以确保多线程程序的执行顺序与程序员的预期一致。这包括指令重排的规则，以及通过同步机制来确保操作的有序性。</p></li></ol><pre><code class=" mermaid">graph并发问题--&gt;可见性--硬件--&gt;CPU缓存并发问题--&gt;原子性--操作系统--&gt;线程切换并发问题--&gt;有序性--编程语言--&gt;编译器优化</code></pre><h2 id="可见性和原子性"><a href="#可见性和原子性" class="headerlink" title="可见性和原子性"></a>可见性和原子性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> count;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                count++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>();<br>        <span class="hljs-type">Thread1</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>();<br>        t1.start();<br>        t2.start();<br>        t1.join();<br>        t2.join();<br>        System.out.println(count);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>上面的代码存在以下问题：</p><ol><li><strong>可见性问题：</strong> 可见性问题指的是一个线程对共享变量的修改在其他线程中不可见。在这段代码中，<code>count</code>是一个共享的静态变量，同时被<code>t1</code>和<code>t2</code>线程访问。由于缺乏适当的同步机制（如<code>synchronized</code>或<code>volatile</code>关键字），一个线程对<code>count</code>的修改可能不会被另一个线程立即看到。这可能导致<code>count</code>的值不是2000，因为两个线程并发地递增<code>count</code>，但它们的修改可能不会被正确地同步。</li></ol><pre><code class=" mermaid">graph可见性问题--&gt;单核CPU--&gt;所有线程都在一个CPU上执行--&gt;通常不存在可见性问题可见性问题--&gt;多核CPU--&gt;多个线程在不同的CPU上执行--&gt;存在可见性问题</code></pre><p>使用<code>synchronized</code>块，确保一个线程对<code>count</code>的修改在退出同步块时对其他线程是可见的。这消除了可见性问题。<code>synchronized</code>同时解决了有序性和原子性。</p><p>优化后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                    count++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>();<br>        <span class="hljs-type">Thread1</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>();<br>        t1.start();<br>        t2.start();<br>        t1.join();<br>        t2.join();<br>        System.out.println(count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>原子性问题：</strong> 原子性问题指的是一个操作是否在多线程环境下是不可分割的。在这段代码中，<code>count++</code>操作不是原子操作，它包括读取<code>count</code>的当前值、递增该值，然后将结果写回<code>count</code>。在多线程环境中，这个操作不是原子的，因此多个线程可以在同一时刻读取和修改<code>count</code>，导致竞争条件和不正确的结果。</li></ol><pre><code class=" mermaid">sequenceDiagram    participant 线程A    participant 线程B    线程A--&gt;线程A: count=0加载到寄存器中    线程A--&gt;&gt;线程B: 线程切换    线程B--&gt;线程B: count=0加载到寄存器中    线程B--&gt;线程B: count+1=1    线程B--&gt;线程B: count=1写入内存    线程B--&gt;&gt;线程A: 线程切换    线程A--&gt;线程A: count+1=1    线程A--&gt;线程A: count=1写入内存</code></pre><p>使用AtomicInteger类和incrementAndGet方法解决原子性问题，同时 <code>AtomicInteger</code> 使用内存屏障等机制来保证可见性和通过使用硬件级别的原子性指令来保证原子性和有序性。</p><p>优化后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                count.incrementAndGet();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>();<br>        <span class="hljs-type">Thread1</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>();<br>        t1.start();<br>        t2.start();<br>        t1.join();<br>        t2.join();<br>        System.out.println(count.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有序性和可见性"><a href="#有序性和可见性" class="headerlink" title="有序性和可见性"></a>有序性和可见性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码存在的问题：</p><ul><li><strong>可见性问题：</strong> 多个线程可能无法立即看到<code>instance</code>对象的更新。这是因为在没有适当的同步机制（如<code>volatile</code>或<code>synchronized</code>）的情况下，一个线程可能在另一个线程修改<code>instance</code>对象后，仍然看到<code>instance</code>为<code>null</code>，导致不正确的结果。</li><li><strong>有序性问题</strong>：没有适当的同步机制来确保操作的有序性。指令重排可能会导致线程在不正确的顺序下执行某些操作，从而破坏了单例模式的正确性。</li></ul><pre><code class=" mermaid">sequenceDiagram    participant 线程A    participant 线程B    线程A--&gt;线程A: instance == null?    线程A--&gt;线程A: 分配内存M    线程A--&gt;线程A: instance = &amp;M    线程A--&gt;&gt;线程B: 线程切换    线程B--&gt;线程B: instance == null?    线程B--&gt;线程B: 返回了未初始化但分配了内存地址的M    线程B--&gt;线程B: 使用M，报空指针异常    线程B--&gt;&gt;线程A: 线程切换    线程A--&gt;线程A: M = 初始化后的Singleton对象</code></pre><p><code>volatile</code> 保证一个线程对 <code>volatile</code> 变量的写操作将立即可见于其他线程。同时<code>volatile</code> 也禁止编译器和处理器对 <code>volatile</code> 变量相关的操作进行重排，从而确保操作按照程序中的顺序执行。所以，<code>volatile</code> 不仅确保可见性，还确保了操作的有序性。</p><p>优化后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（本文完）</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
      <tag>原子性</tag>
      
      <tag>有序性</tag>
      
      <tag>可见性</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
